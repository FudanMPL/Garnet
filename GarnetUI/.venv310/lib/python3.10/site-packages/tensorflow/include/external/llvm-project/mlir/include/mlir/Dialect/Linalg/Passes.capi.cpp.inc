/* Autogenerated by mlir-tblgen; don't manually edit. */
//===----------------------------------------------------------------------===//
// Linalg Group Registration
//===----------------------------------------------------------------------===//

void mlirRegisterLinalgPasses() {
  registerLinalgPasses();
}

MlirPass mlirCreateLinalgConvertElementwiseToLinalg() {
  return wrap(mlir::createConvertElementwiseToLinalgPass().release());
}
void mlirRegisterLinalgConvertElementwiseToLinalg() {
  registerConvertElementwiseToLinalg();
}


MlirPass mlirCreateLinalgLinalgBufferize() {
  return wrap(mlir::createLinalgBufferizePass().release());
}
void mlirRegisterLinalgLinalgBufferize() {
  registerLinalgBufferize();
}


MlirPass mlirCreateLinalgLinalgDetensorize() {
  return wrap(mlir::createLinalgDetensorizePass().release());
}
void mlirRegisterLinalgLinalgDetensorize() {
  registerLinalgDetensorize();
}


MlirPass mlirCreateLinalgLinalgElementwiseOpFusion() {
  return wrap(mlir::createLinalgElementwiseOpFusionPass().release());
}
void mlirRegisterLinalgLinalgElementwiseOpFusion() {
  registerLinalgElementwiseOpFusion();
}


MlirPass mlirCreateLinalgLinalgFoldUnitExtentDims() {
  return wrap(mlir::createLinalgFoldUnitExtentDimsPass().release());
}
void mlirRegisterLinalgLinalgFoldUnitExtentDims() {
  registerLinalgFoldUnitExtentDims();
}


MlirPass mlirCreateLinalgLinalgGeneralization() {
  return wrap(mlir::createLinalgGeneralizationPass().release());
}
void mlirRegisterLinalgLinalgGeneralization() {
  registerLinalgGeneralization();
}


MlirPass mlirCreateLinalgLinalgInlineScalarOperands() {
  return wrap(mlir::createLinalgInlineScalarOperandsPass().release());
}
void mlirRegisterLinalgLinalgInlineScalarOperands() {
  registerLinalgInlineScalarOperands();
}


MlirPass mlirCreateLinalgLinalgLowerToAffineLoops() {
  return wrap(mlir::createConvertLinalgToAffineLoopsPass().release());
}
void mlirRegisterLinalgLinalgLowerToAffineLoops() {
  registerLinalgLowerToAffineLoops();
}


MlirPass mlirCreateLinalgLinalgLowerToLoops() {
  return wrap(mlir::createConvertLinalgToLoopsPass().release());
}
void mlirRegisterLinalgLinalgLowerToLoops() {
  registerLinalgLowerToLoops();
}


MlirPass mlirCreateLinalgLinalgLowerToParallelLoops() {
  return wrap(mlir::createConvertLinalgToParallelLoopsPass().release());
}
void mlirRegisterLinalgLinalgLowerToParallelLoops() {
  registerLinalgLowerToParallelLoops();
}


MlirPass mlirCreateLinalgLinalgNamedOpConversion() {
  return wrap(mlir::createLinalgNamedOpConversionPass().release());
}
void mlirRegisterLinalgLinalgNamedOpConversion() {
  registerLinalgNamedOpConversion();
}

