// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/tf2tensorrt/utils/trt_engine_instance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor_shape.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto;
namespace tensorflow {
namespace tensorrt {
class TRTEngineInstance;
class TRTEngineInstanceDefaultTypeInternal;
extern TRTEngineInstanceDefaultTypeInternal _TRTEngineInstance_default_instance_;
}  // namespace tensorrt
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::tensorrt::TRTEngineInstance* Arena::CreateMaybeMessage<::tensorflow::tensorrt::TRTEngineInstance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace tensorrt {

// ===================================================================

class TRTEngineInstance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.tensorrt.TRTEngineInstance) */ {
 public:
  TRTEngineInstance();
  virtual ~TRTEngineInstance();

  TRTEngineInstance(const TRTEngineInstance& from);
  TRTEngineInstance(TRTEngineInstance&& from) noexcept
    : TRTEngineInstance() {
    *this = ::std::move(from);
  }

  inline TRTEngineInstance& operator=(const TRTEngineInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRTEngineInstance& operator=(TRTEngineInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TRTEngineInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TRTEngineInstance* internal_default_instance() {
    return reinterpret_cast<const TRTEngineInstance*>(
               &_TRTEngineInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TRTEngineInstance& a, TRTEngineInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(TRTEngineInstance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TRTEngineInstance* New() const final {
    return CreateMaybeMessage<TRTEngineInstance>(nullptr);
  }

  TRTEngineInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TRTEngineInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TRTEngineInstance& from);
  void MergeFrom(const TRTEngineInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRTEngineInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.tensorrt.TRTEngineInstance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputShapesFieldNumber = 1,
    kSerializedEngineFieldNumber = 2,
  };
  // repeated .tensorflow.TensorShapeProto input_shapes = 1;
  int input_shapes_size() const;
  void clear_input_shapes();
  ::tensorflow::TensorShapeProto* mutable_input_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
      mutable_input_shapes();
  const ::tensorflow::TensorShapeProto& input_shapes(int index) const;
  ::tensorflow::TensorShapeProto* add_input_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
      input_shapes() const;

  // bytes serialized_engine = 2;
  void clear_serialized_engine();
  const std::string& serialized_engine() const;
  void set_serialized_engine(const std::string& value);
  void set_serialized_engine(std::string&& value);
  void set_serialized_engine(const char* value);
  void set_serialized_engine(const void* value, size_t size);
  std::string* mutable_serialized_engine();
  std::string* release_serialized_engine();
  void set_allocated_serialized_engine(std::string* serialized_engine);

  // @@protoc_insertion_point(class_scope:tensorflow.tensorrt.TRTEngineInstance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto > input_shapes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_engine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TRTEngineInstance

// repeated .tensorflow.TensorShapeProto input_shapes = 1;
inline int TRTEngineInstance::input_shapes_size() const {
  return input_shapes_.size();
}
inline ::tensorflow::TensorShapeProto* TRTEngineInstance::mutable_input_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tensorrt.TRTEngineInstance.input_shapes)
  return input_shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
TRTEngineInstance::mutable_input_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tensorrt.TRTEngineInstance.input_shapes)
  return &input_shapes_;
}
inline const ::tensorflow::TensorShapeProto& TRTEngineInstance::input_shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tensorrt.TRTEngineInstance.input_shapes)
  return input_shapes_.Get(index);
}
inline ::tensorflow::TensorShapeProto* TRTEngineInstance::add_input_shapes() {
  // @@protoc_insertion_point(field_add:tensorflow.tensorrt.TRTEngineInstance.input_shapes)
  return input_shapes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
TRTEngineInstance::input_shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tensorrt.TRTEngineInstance.input_shapes)
  return input_shapes_;
}

// bytes serialized_engine = 2;
inline void TRTEngineInstance::clear_serialized_engine() {
  serialized_engine_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TRTEngineInstance::serialized_engine() const {
  // @@protoc_insertion_point(field_get:tensorflow.tensorrt.TRTEngineInstance.serialized_engine)
  return serialized_engine_.GetNoArena();
}
inline void TRTEngineInstance::set_serialized_engine(const std::string& value) {
  
  serialized_engine_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tensorrt.TRTEngineInstance.serialized_engine)
}
inline void TRTEngineInstance::set_serialized_engine(std::string&& value) {
  
  serialized_engine_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tensorrt.TRTEngineInstance.serialized_engine)
}
inline void TRTEngineInstance::set_serialized_engine(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialized_engine_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tensorrt.TRTEngineInstance.serialized_engine)
}
inline void TRTEngineInstance::set_serialized_engine(const void* value, size_t size) {
  
  serialized_engine_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tensorrt.TRTEngineInstance.serialized_engine)
}
inline std::string* TRTEngineInstance::mutable_serialized_engine() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tensorrt.TRTEngineInstance.serialized_engine)
  return serialized_engine_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TRTEngineInstance::release_serialized_engine() {
  // @@protoc_insertion_point(field_release:tensorflow.tensorrt.TRTEngineInstance.serialized_engine)
  
  return serialized_engine_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TRTEngineInstance::set_allocated_serialized_engine(std::string* serialized_engine) {
  if (serialized_engine != nullptr) {
    
  } else {
    
  }
  serialized_engine_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_engine);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tensorrt.TRTEngineInstance.serialized_engine)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorrt
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2tensorrt_2futils_2ftrt_5fengine_5finstance_2eproto
