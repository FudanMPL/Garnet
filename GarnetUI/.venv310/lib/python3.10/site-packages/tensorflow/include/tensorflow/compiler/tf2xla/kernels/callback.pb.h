// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/tf2xla/kernels/callback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/node_def.pb.h"
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
namespace tensorflow {
class TfCallbackData;
class TfCallbackDataDefaultTypeInternal;
extern TfCallbackDataDefaultTypeInternal _TfCallbackData_default_instance_;
class TfCallbackData_BufferDescription;
class TfCallbackData_BufferDescriptionDefaultTypeInternal;
extern TfCallbackData_BufferDescriptionDefaultTypeInternal _TfCallbackData_BufferDescription_default_instance_;
class TfCallbackData_InputBufferDescription;
class TfCallbackData_InputBufferDescriptionDefaultTypeInternal;
extern TfCallbackData_InputBufferDescriptionDefaultTypeInternal _TfCallbackData_InputBufferDescription_default_instance_;
class TfCallbackData_OutputBufferDescription;
class TfCallbackData_OutputBufferDescriptionDefaultTypeInternal;
extern TfCallbackData_OutputBufferDescriptionDefaultTypeInternal _TfCallbackData_OutputBufferDescription_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::TfCallbackData* Arena::CreateMaybeMessage<::tensorflow::TfCallbackData>(Arena*);
template<> ::tensorflow::TfCallbackData_BufferDescription* Arena::CreateMaybeMessage<::tensorflow::TfCallbackData_BufferDescription>(Arena*);
template<> ::tensorflow::TfCallbackData_InputBufferDescription* Arena::CreateMaybeMessage<::tensorflow::TfCallbackData_InputBufferDescription>(Arena*);
template<> ::tensorflow::TfCallbackData_OutputBufferDescription* Arena::CreateMaybeMessage<::tensorflow::TfCallbackData_OutputBufferDescription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class TfCallbackData_BufferDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TfCallbackData.BufferDescription) */ {
 public:
  TfCallbackData_BufferDescription();
  virtual ~TfCallbackData_BufferDescription();

  TfCallbackData_BufferDescription(const TfCallbackData_BufferDescription& from);
  TfCallbackData_BufferDescription(TfCallbackData_BufferDescription&& from) noexcept
    : TfCallbackData_BufferDescription() {
    *this = ::std::move(from);
  }

  inline TfCallbackData_BufferDescription& operator=(const TfCallbackData_BufferDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfCallbackData_BufferDescription& operator=(TfCallbackData_BufferDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TfCallbackData_BufferDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TfCallbackData_BufferDescription* internal_default_instance() {
    return reinterpret_cast<const TfCallbackData_BufferDescription*>(
               &_TfCallbackData_BufferDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TfCallbackData_BufferDescription& a, TfCallbackData_BufferDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(TfCallbackData_BufferDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfCallbackData_BufferDescription* New() const final {
    return CreateMaybeMessage<TfCallbackData_BufferDescription>(nullptr);
  }

  TfCallbackData_BufferDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfCallbackData_BufferDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfCallbackData_BufferDescription& from);
  void MergeFrom(const TfCallbackData_BufferDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfCallbackData_BufferDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TfCallbackData.BufferDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional .tensorflow.TensorShapeProto shape = 1;
  bool has_shape() const;
  void clear_shape();
  const ::tensorflow::TensorShapeProto& shape() const;
  ::tensorflow::TensorShapeProto* release_shape();
  ::tensorflow::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* shape);

  // optional .tensorflow.DataType type = 2;
  bool has_type() const;
  void clear_type();
  ::tensorflow::DataType type() const;
  void set_type(::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:tensorflow.TfCallbackData.BufferDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tensorflow::TensorShapeProto* shape_;
  int type_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
};
// -------------------------------------------------------------------

class TfCallbackData_InputBufferDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TfCallbackData.InputBufferDescription) */ {
 public:
  TfCallbackData_InputBufferDescription();
  virtual ~TfCallbackData_InputBufferDescription();

  TfCallbackData_InputBufferDescription(const TfCallbackData_InputBufferDescription& from);
  TfCallbackData_InputBufferDescription(TfCallbackData_InputBufferDescription&& from) noexcept
    : TfCallbackData_InputBufferDescription() {
    *this = ::std::move(from);
  }

  inline TfCallbackData_InputBufferDescription& operator=(const TfCallbackData_InputBufferDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfCallbackData_InputBufferDescription& operator=(TfCallbackData_InputBufferDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TfCallbackData_InputBufferDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TfCallbackData_InputBufferDescription* internal_default_instance() {
    return reinterpret_cast<const TfCallbackData_InputBufferDescription*>(
               &_TfCallbackData_InputBufferDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TfCallbackData_InputBufferDescription& a, TfCallbackData_InputBufferDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(TfCallbackData_InputBufferDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfCallbackData_InputBufferDescription* New() const final {
    return CreateMaybeMessage<TfCallbackData_InputBufferDescription>(nullptr);
  }

  TfCallbackData_InputBufferDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfCallbackData_InputBufferDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfCallbackData_InputBufferDescription& from);
  void MergeFrom(const TfCallbackData_InputBufferDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfCallbackData_InputBufferDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TfCallbackData.InputBufferDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferDescriptionFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional .tensorflow.TfCallbackData.BufferDescription buffer_description = 1;
  bool has_buffer_description() const;
  void clear_buffer_description();
  const ::tensorflow::TfCallbackData_BufferDescription& buffer_description() const;
  ::tensorflow::TfCallbackData_BufferDescription* release_buffer_description();
  ::tensorflow::TfCallbackData_BufferDescription* mutable_buffer_description();
  void set_allocated_buffer_description(::tensorflow::TfCallbackData_BufferDescription* buffer_description);

  // optional .tensorflow.TensorProto value = 2;
  bool has_value() const;
  void clear_value();
  const ::tensorflow::TensorProto& value() const;
  ::tensorflow::TensorProto* release_value();
  ::tensorflow::TensorProto* mutable_value();
  void set_allocated_value(::tensorflow::TensorProto* value);

  // @@protoc_insertion_point(class_scope:tensorflow.TfCallbackData.InputBufferDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tensorflow::TfCallbackData_BufferDescription* buffer_description_;
  ::tensorflow::TensorProto* value_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
};
// -------------------------------------------------------------------

class TfCallbackData_OutputBufferDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TfCallbackData.OutputBufferDescription) */ {
 public:
  TfCallbackData_OutputBufferDescription();
  virtual ~TfCallbackData_OutputBufferDescription();

  TfCallbackData_OutputBufferDescription(const TfCallbackData_OutputBufferDescription& from);
  TfCallbackData_OutputBufferDescription(TfCallbackData_OutputBufferDescription&& from) noexcept
    : TfCallbackData_OutputBufferDescription() {
    *this = ::std::move(from);
  }

  inline TfCallbackData_OutputBufferDescription& operator=(const TfCallbackData_OutputBufferDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfCallbackData_OutputBufferDescription& operator=(TfCallbackData_OutputBufferDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TfCallbackData_OutputBufferDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TfCallbackData_OutputBufferDescription* internal_default_instance() {
    return reinterpret_cast<const TfCallbackData_OutputBufferDescription*>(
               &_TfCallbackData_OutputBufferDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TfCallbackData_OutputBufferDescription& a, TfCallbackData_OutputBufferDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(TfCallbackData_OutputBufferDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfCallbackData_OutputBufferDescription* New() const final {
    return CreateMaybeMessage<TfCallbackData_OutputBufferDescription>(nullptr);
  }

  TfCallbackData_OutputBufferDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfCallbackData_OutputBufferDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfCallbackData_OutputBufferDescription& from);
  void MergeFrom(const TfCallbackData_OutputBufferDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfCallbackData_OutputBufferDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TfCallbackData.OutputBufferDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferDescriptionFieldNumber = 1,
    kIsDynamicallyPaddedFieldNumber = 2,
  };
  // optional .tensorflow.TfCallbackData.BufferDescription buffer_description = 1;
  bool has_buffer_description() const;
  void clear_buffer_description();
  const ::tensorflow::TfCallbackData_BufferDescription& buffer_description() const;
  ::tensorflow::TfCallbackData_BufferDescription* release_buffer_description();
  ::tensorflow::TfCallbackData_BufferDescription* mutable_buffer_description();
  void set_allocated_buffer_description(::tensorflow::TfCallbackData_BufferDescription* buffer_description);

  // optional bool is_dynamically_padded = 2;
  bool has_is_dynamically_padded() const;
  void clear_is_dynamically_padded();
  bool is_dynamically_padded() const;
  void set_is_dynamically_padded(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.TfCallbackData.OutputBufferDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tensorflow::TfCallbackData_BufferDescription* buffer_description_;
  bool is_dynamically_padded_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
};
// -------------------------------------------------------------------

class TfCallbackData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TfCallbackData) */ {
 public:
  TfCallbackData();
  virtual ~TfCallbackData();

  TfCallbackData(const TfCallbackData& from);
  TfCallbackData(TfCallbackData&& from) noexcept
    : TfCallbackData() {
    *this = ::std::move(from);
  }

  inline TfCallbackData& operator=(const TfCallbackData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfCallbackData& operator=(TfCallbackData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TfCallbackData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TfCallbackData* internal_default_instance() {
    return reinterpret_cast<const TfCallbackData*>(
               &_TfCallbackData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TfCallbackData& a, TfCallbackData& b) {
    a.Swap(&b);
  }
  inline void Swap(TfCallbackData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfCallbackData* New() const final {
    return CreateMaybeMessage<TfCallbackData>(nullptr);
  }

  TfCallbackData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfCallbackData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfCallbackData& from);
  void MergeFrom(const TfCallbackData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfCallbackData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TfCallbackData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TfCallbackData_BufferDescription BufferDescription;
  typedef TfCallbackData_InputBufferDescription InputBufferDescription;
  typedef TfCallbackData_OutputBufferDescription OutputBufferDescription;

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kOutputsFieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // repeated .tensorflow.TfCallbackData.InputBufferDescription inputs = 2;
  int inputs_size() const;
  void clear_inputs();
  ::tensorflow::TfCallbackData_InputBufferDescription* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription >*
      mutable_inputs();
  const ::tensorflow::TfCallbackData_InputBufferDescription& inputs(int index) const;
  ::tensorflow::TfCallbackData_InputBufferDescription* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription >&
      inputs() const;

  // repeated .tensorflow.TfCallbackData.OutputBufferDescription outputs = 3;
  int outputs_size() const;
  void clear_outputs();
  ::tensorflow::TfCallbackData_OutputBufferDescription* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription >*
      mutable_outputs();
  const ::tensorflow::TfCallbackData_OutputBufferDescription& outputs(int index) const;
  ::tensorflow::TfCallbackData_OutputBufferDescription* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription >&
      outputs() const;

  // optional .tensorflow.NodeDef op = 1;
  bool has_op() const;
  void clear_op();
  const ::tensorflow::NodeDef& op() const;
  ::tensorflow::NodeDef* release_op();
  ::tensorflow::NodeDef* mutable_op();
  void set_allocated_op(::tensorflow::NodeDef* op);

  // @@protoc_insertion_point(class_scope:tensorflow.TfCallbackData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription > outputs_;
  ::tensorflow::NodeDef* op_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfCallbackData_BufferDescription

// optional .tensorflow.TensorShapeProto shape = 1;
inline bool TfCallbackData_BufferDescription::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::tensorflow::TensorShapeProto& TfCallbackData_BufferDescription::shape() const {
  const ::tensorflow::TensorShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.BufferDescription.shape)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::TensorShapeProto*>(
      &::tensorflow::_TensorShapeProto_default_instance_);
}
inline ::tensorflow::TensorShapeProto* TfCallbackData_BufferDescription::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.BufferDescription.shape)
  _has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* TfCallbackData_BufferDescription::mutable_shape() {
  _has_bits_[0] |= 0x00000001u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TensorShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.BufferDescription.shape)
  return shape_;
}
inline void TfCallbackData_BufferDescription::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape)->GetArena();
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.BufferDescription.shape)
}

// optional .tensorflow.DataType type = 2;
inline bool TfCallbackData_BufferDescription::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TfCallbackData_BufferDescription::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::tensorflow::DataType TfCallbackData_BufferDescription::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.BufferDescription.type)
  return static_cast< ::tensorflow::DataType >(type_);
}
inline void TfCallbackData_BufferDescription::set_type(::tensorflow::DataType value) {
  assert(::tensorflow::DataType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TfCallbackData.BufferDescription.type)
}

// -------------------------------------------------------------------

// TfCallbackData_InputBufferDescription

// optional .tensorflow.TfCallbackData.BufferDescription buffer_description = 1;
inline bool TfCallbackData_InputBufferDescription::has_buffer_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TfCallbackData_InputBufferDescription::clear_buffer_description() {
  if (buffer_description_ != nullptr) buffer_description_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::TfCallbackData_BufferDescription& TfCallbackData_InputBufferDescription::buffer_description() const {
  const ::tensorflow::TfCallbackData_BufferDescription* p = buffer_description_;
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::TfCallbackData_BufferDescription*>(
      &::tensorflow::_TfCallbackData_BufferDescription_default_instance_);
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_InputBufferDescription::release_buffer_description() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
  _has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TfCallbackData_BufferDescription* temp = buffer_description_;
  buffer_description_ = nullptr;
  return temp;
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_InputBufferDescription::mutable_buffer_description() {
  _has_bits_[0] |= 0x00000001u;
  if (buffer_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TfCallbackData_BufferDescription>(GetArenaNoVirtual());
    buffer_description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
  return buffer_description_;
}
inline void TfCallbackData_InputBufferDescription::set_allocated_buffer_description(::tensorflow::TfCallbackData_BufferDescription* buffer_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete buffer_description_;
  }
  if (buffer_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buffer_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buffer_description_ = buffer_description;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
}

// optional .tensorflow.TensorProto value = 2;
inline bool TfCallbackData_InputBufferDescription::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::tensorflow::TensorProto& TfCallbackData_InputBufferDescription::value() const {
  const ::tensorflow::TensorProto* p = value_;
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.InputBufferDescription.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::TensorProto*>(
      &::tensorflow::_TensorProto_default_instance_);
}
inline ::tensorflow::TensorProto* TfCallbackData_InputBufferDescription::release_value() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.InputBufferDescription.value)
  _has_bits_[0] &= ~0x00000002u;
  ::tensorflow::TensorProto* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorProto* TfCallbackData_InputBufferDescription::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TensorProto>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.InputBufferDescription.value)
  return value_;
}
inline void TfCallbackData_InputBufferDescription::set_allocated_value(::tensorflow::TensorProto* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.InputBufferDescription.value)
}

// -------------------------------------------------------------------

// TfCallbackData_OutputBufferDescription

// optional .tensorflow.TfCallbackData.BufferDescription buffer_description = 1;
inline bool TfCallbackData_OutputBufferDescription::has_buffer_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TfCallbackData_OutputBufferDescription::clear_buffer_description() {
  if (buffer_description_ != nullptr) buffer_description_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::TfCallbackData_BufferDescription& TfCallbackData_OutputBufferDescription::buffer_description() const {
  const ::tensorflow::TfCallbackData_BufferDescription* p = buffer_description_;
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::TfCallbackData_BufferDescription*>(
      &::tensorflow::_TfCallbackData_BufferDescription_default_instance_);
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_OutputBufferDescription::release_buffer_description() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
  _has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TfCallbackData_BufferDescription* temp = buffer_description_;
  buffer_description_ = nullptr;
  return temp;
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_OutputBufferDescription::mutable_buffer_description() {
  _has_bits_[0] |= 0x00000001u;
  if (buffer_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TfCallbackData_BufferDescription>(GetArenaNoVirtual());
    buffer_description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
  return buffer_description_;
}
inline void TfCallbackData_OutputBufferDescription::set_allocated_buffer_description(::tensorflow::TfCallbackData_BufferDescription* buffer_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete buffer_description_;
  }
  if (buffer_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buffer_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buffer_description_ = buffer_description;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
}

// optional bool is_dynamically_padded = 2;
inline bool TfCallbackData_OutputBufferDescription::has_is_dynamically_padded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TfCallbackData_OutputBufferDescription::clear_is_dynamically_padded() {
  is_dynamically_padded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TfCallbackData_OutputBufferDescription::is_dynamically_padded() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.OutputBufferDescription.is_dynamically_padded)
  return is_dynamically_padded_;
}
inline void TfCallbackData_OutputBufferDescription::set_is_dynamically_padded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_dynamically_padded_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TfCallbackData.OutputBufferDescription.is_dynamically_padded)
}

// -------------------------------------------------------------------

// TfCallbackData

// optional .tensorflow.NodeDef op = 1;
inline bool TfCallbackData::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::tensorflow::NodeDef& TfCallbackData::op() const {
  const ::tensorflow::NodeDef* p = op_;
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.op)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::NodeDef*>(
      &::tensorflow::_NodeDef_default_instance_);
}
inline ::tensorflow::NodeDef* TfCallbackData::release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.op)
  _has_bits_[0] &= ~0x00000001u;
  ::tensorflow::NodeDef* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::tensorflow::NodeDef* TfCallbackData::mutable_op() {
  _has_bits_[0] |= 0x00000001u;
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::NodeDef>(GetArenaNoVirtual());
    op_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.op)
  return op_;
}
inline void TfCallbackData::set_allocated_op(::tensorflow::NodeDef* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op)->GetArena();
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.op)
}

// repeated .tensorflow.TfCallbackData.InputBufferDescription inputs = 2;
inline int TfCallbackData::inputs_size() const {
  return inputs_.size();
}
inline void TfCallbackData::clear_inputs() {
  inputs_.Clear();
}
inline ::tensorflow::TfCallbackData_InputBufferDescription* TfCallbackData::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription >*
TfCallbackData::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TfCallbackData.inputs)
  return &inputs_;
}
inline const ::tensorflow::TfCallbackData_InputBufferDescription& TfCallbackData::inputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.inputs)
  return inputs_.Get(index);
}
inline ::tensorflow::TfCallbackData_InputBufferDescription* TfCallbackData::add_inputs() {
  // @@protoc_insertion_point(field_add:tensorflow.TfCallbackData.inputs)
  return inputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription >&
TfCallbackData::inputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.TfCallbackData.inputs)
  return inputs_;
}

// repeated .tensorflow.TfCallbackData.OutputBufferDescription outputs = 3;
inline int TfCallbackData::outputs_size() const {
  return outputs_.size();
}
inline void TfCallbackData::clear_outputs() {
  outputs_.Clear();
}
inline ::tensorflow::TfCallbackData_OutputBufferDescription* TfCallbackData::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription >*
TfCallbackData::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TfCallbackData.outputs)
  return &outputs_;
}
inline const ::tensorflow::TfCallbackData_OutputBufferDescription& TfCallbackData::outputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.outputs)
  return outputs_.Get(index);
}
inline ::tensorflow::TfCallbackData_OutputBufferDescription* TfCallbackData::add_outputs() {
  // @@protoc_insertion_point(field_add:tensorflow.TfCallbackData.outputs)
  return outputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription >&
TfCallbackData::outputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.TfCallbackData.outputs)
  return outputs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto
