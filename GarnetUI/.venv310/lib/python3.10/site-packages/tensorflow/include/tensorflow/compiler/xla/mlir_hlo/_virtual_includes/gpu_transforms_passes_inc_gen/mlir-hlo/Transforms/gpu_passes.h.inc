/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_GPUFUSIONREWRITEPASS
#define GEN_PASS_DECL_GPUKERNELTONVVMPASS
#define GEN_PASS_DECL_GPUKERNELTOROCDLPASS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// GpuFusionRewritePass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_GPUFUSIONREWRITEPASS
#undef GEN_PASS_DECL_GPUFUSIONREWRITEPASS
#endif // GEN_PASS_DECL_GPUFUSIONREWRITEPASS
#ifdef GEN_PASS_DEF_GPUFUSIONREWRITEPASS
namespace impl {

template <typename DerivedT>
class GpuFusionRewritePassBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = GpuFusionRewritePassBase;

  GpuFusionRewritePassBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  GpuFusionRewritePassBase(const GpuFusionRewritePassBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gpu-fusion-rewrite");
  }
  ::llvm::StringRef getArgument() const override { return "gpu-fusion-rewrite"; }

  ::llvm::StringRef getDescription() const override { return "Pass to rewrite lmhlo.fusion ops to gpu.launch_func."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GpuFusionRewritePass");
  }
  ::llvm::StringRef getName() const override { return "GpuFusionRewritePass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GpuFusionRewritePassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_GPUFUSIONREWRITEPASS
#endif // GEN_PASS_DEF_GPUFUSIONREWRITEPASS

//===----------------------------------------------------------------------===//
// GpuKernelToNVVMPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_GPUKERNELTONVVMPASS
#undef GEN_PASS_DECL_GPUKERNELTONVVMPASS
#endif // GEN_PASS_DECL_GPUKERNELTONVVMPASS
#ifdef GEN_PASS_DEF_GPUKERNELTONVVMPASS
namespace impl {

template <typename DerivedT>
class GpuKernelToNVVMPassBase : public ::mlir::OperationPass<gpu::GPUModuleOp> {
public:
  using Base = GpuKernelToNVVMPassBase;

  GpuKernelToNVVMPassBase() : ::mlir::OperationPass<gpu::GPUModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  GpuKernelToNVVMPassBase(const GpuKernelToNVVMPassBase &other) : ::mlir::OperationPass<gpu::GPUModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gpu-kernel-to-nvvm");
  }
  ::llvm::StringRef getArgument() const override { return "gpu-kernel-to-nvvm"; }

  ::llvm::StringRef getDescription() const override { return "Pass to transform a gpu module to nvvm."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GpuKernelToNVVMPass");
  }
  ::llvm::StringRef getName() const override { return "GpuKernelToNVVMPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<LLVM::LLVMDialect>();

  registry.insert<NVVM::NVVMDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GpuKernelToNVVMPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_GPUKERNELTONVVMPASS
#endif // GEN_PASS_DEF_GPUKERNELTONVVMPASS

//===----------------------------------------------------------------------===//
// GpuKernelToROCDLPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_GPUKERNELTOROCDLPASS
#undef GEN_PASS_DECL_GPUKERNELTOROCDLPASS
#endif // GEN_PASS_DECL_GPUKERNELTOROCDLPASS
#ifdef GEN_PASS_DEF_GPUKERNELTOROCDLPASS
namespace impl {

template <typename DerivedT>
class GpuKernelToROCDLPassBase : public ::mlir::OperationPass<gpu::GPUModuleOp> {
public:
  using Base = GpuKernelToROCDLPassBase;

  GpuKernelToROCDLPassBase() : ::mlir::OperationPass<gpu::GPUModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  GpuKernelToROCDLPassBase(const GpuKernelToROCDLPassBase &other) : ::mlir::OperationPass<gpu::GPUModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gpu-kernel-to-rocdl");
  }
  ::llvm::StringRef getArgument() const override { return "gpu-kernel-to-rocdl"; }

  ::llvm::StringRef getDescription() const override { return "Pass to transform a gpu module to rocdl."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GpuKernelToROCDLPass");
  }
  ::llvm::StringRef getName() const override { return "GpuKernelToROCDLPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<LLVM::LLVMDialect>();

  registry.insert<ROCDL::ROCDLDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GpuKernelToROCDLPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_GPUKERNELTOROCDLPASS
#endif // GEN_PASS_DEF_GPUKERNELTOROCDLPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// GpuFusionRewritePass Registration
//===----------------------------------------------------------------------===//

inline void registerGpuFusionRewritePass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createGpuFusionRewritePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerGpuFusionRewritePassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createGpuFusionRewritePass();
  });
}

//===----------------------------------------------------------------------===//
// GpuKernelToNVVMPass Registration
//===----------------------------------------------------------------------===//

inline void registerGpuKernelToNVVMPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createGpuKernelToNvvmPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerGpuKernelToNVVMPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createGpuKernelToNvvmPass();
  });
}

//===----------------------------------------------------------------------===//
// GpuKernelToROCDLPass Registration
//===----------------------------------------------------------------------===//

inline void registerGpuKernelToROCDLPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createGpuKernelToRocdlPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerGpuKernelToROCDLPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createGpuKernelToRocdlPass();
  });
}

//===----------------------------------------------------------------------===//
// LMHLOGPUTransforms Registration
//===----------------------------------------------------------------------===//

inline void registerLMHLOGPUTransformsPasses() {
  registerGpuFusionRewritePass();
  registerGpuKernelToNVVMPass();
  registerGpuKernelToROCDLPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class GpuFusionRewritePassBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = GpuFusionRewritePassBase;

  GpuFusionRewritePassBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  GpuFusionRewritePassBase(const GpuFusionRewritePassBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gpu-fusion-rewrite");
  }
  ::llvm::StringRef getArgument() const override { return "gpu-fusion-rewrite"; }

  ::llvm::StringRef getDescription() const override { return "Pass to rewrite lmhlo.fusion ops to gpu.launch_func."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GpuFusionRewritePass");
  }
  ::llvm::StringRef getName() const override { return "GpuFusionRewritePass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GpuFusionRewritePassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class GpuKernelToNVVMPassBase : public ::mlir::OperationPass<gpu::GPUModuleOp> {
public:
  using Base = GpuKernelToNVVMPassBase;

  GpuKernelToNVVMPassBase() : ::mlir::OperationPass<gpu::GPUModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  GpuKernelToNVVMPassBase(const GpuKernelToNVVMPassBase &other) : ::mlir::OperationPass<gpu::GPUModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gpu-kernel-to-nvvm");
  }
  ::llvm::StringRef getArgument() const override { return "gpu-kernel-to-nvvm"; }

  ::llvm::StringRef getDescription() const override { return "Pass to transform a gpu module to nvvm."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GpuKernelToNVVMPass");
  }
  ::llvm::StringRef getName() const override { return "GpuKernelToNVVMPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<LLVM::LLVMDialect>();

  registry.insert<NVVM::NVVMDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GpuKernelToNVVMPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class GpuKernelToROCDLPassBase : public ::mlir::OperationPass<gpu::GPUModuleOp> {
public:
  using Base = GpuKernelToROCDLPassBase;

  GpuKernelToROCDLPassBase() : ::mlir::OperationPass<gpu::GPUModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  GpuKernelToROCDLPassBase(const GpuKernelToROCDLPassBase &other) : ::mlir::OperationPass<gpu::GPUModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gpu-kernel-to-rocdl");
  }
  ::llvm::StringRef getArgument() const override { return "gpu-kernel-to-rocdl"; }

  ::llvm::StringRef getDescription() const override { return "Pass to transform a gpu module to rocdl."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GpuKernelToROCDLPass");
  }
  ::llvm::StringRef getName() const override { return "GpuKernelToROCDLPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<LLVM::LLVMDialect>();

  registry.insert<ROCDL::ROCDLDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GpuKernelToROCDLPassBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
