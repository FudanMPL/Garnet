// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/mlir/tools/kernel_gen/compile_cache_item.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto;
namespace mlir {
namespace kernel_gen {
class CompilationCacheItem;
class CompilationCacheItemDefaultTypeInternal;
extern CompilationCacheItemDefaultTypeInternal _CompilationCacheItem_default_instance_;
}  // namespace kernel_gen
}  // namespace mlir
PROTOBUF_NAMESPACE_OPEN
template<> ::mlir::kernel_gen::CompilationCacheItem* Arena::CreateMaybeMessage<::mlir::kernel_gen::CompilationCacheItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mlir {
namespace kernel_gen {

// ===================================================================

class CompilationCacheItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mlir.kernel_gen.CompilationCacheItem) */ {
 public:
  CompilationCacheItem();
  virtual ~CompilationCacheItem();

  CompilationCacheItem(const CompilationCacheItem& from);
  CompilationCacheItem(CompilationCacheItem&& from) noexcept
    : CompilationCacheItem() {
    *this = ::std::move(from);
  }

  inline CompilationCacheItem& operator=(const CompilationCacheItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompilationCacheItem& operator=(CompilationCacheItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompilationCacheItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompilationCacheItem* internal_default_instance() {
    return reinterpret_cast<const CompilationCacheItem*>(
               &_CompilationCacheItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompilationCacheItem& a, CompilationCacheItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CompilationCacheItem* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompilationCacheItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompilationCacheItem* New() const final {
    return CreateMaybeMessage<CompilationCacheItem>(nullptr);
  }

  CompilationCacheItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompilationCacheItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompilationCacheItem& from);
  void MergeFrom(const CompilationCacheItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompilationCacheItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mlir.kernel_gen.CompilationCacheItem";
  }
  protected:
  explicit CompilationCacheItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalModuleFieldNumber = 1,
    kResultModuleFieldNumber = 2,
  };
  // string original_module = 1;
  void clear_original_module();
  const std::string& original_module() const;
  void set_original_module(const std::string& value);
  void set_original_module(std::string&& value);
  void set_original_module(const char* value);
  void set_original_module(const char* value, size_t size);
  std::string* mutable_original_module();
  std::string* release_original_module();
  void set_allocated_original_module(std::string* original_module);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_original_module();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_original_module(
      std::string* original_module);

  // string result_module = 2;
  void clear_result_module();
  const std::string& result_module() const;
  void set_result_module(const std::string& value);
  void set_result_module(std::string&& value);
  void set_result_module(const char* value);
  void set_result_module(const char* value, size_t size);
  std::string* mutable_result_module();
  std::string* release_result_module();
  void set_allocated_result_module(std::string* result_module);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result_module();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result_module(
      std::string* result_module);

  // @@protoc_insertion_point(class_scope:mlir.kernel_gen.CompilationCacheItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_module_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_module_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompilationCacheItem

// string original_module = 1;
inline void CompilationCacheItem::clear_original_module() {
  original_module_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CompilationCacheItem::original_module() const {
  // @@protoc_insertion_point(field_get:mlir.kernel_gen.CompilationCacheItem.original_module)
  return original_module_.Get();
}
inline void CompilationCacheItem::set_original_module(const std::string& value) {
  
  original_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:mlir.kernel_gen.CompilationCacheItem.original_module)
}
inline void CompilationCacheItem::set_original_module(std::string&& value) {
  
  original_module_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:mlir.kernel_gen.CompilationCacheItem.original_module)
}
inline void CompilationCacheItem::set_original_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:mlir.kernel_gen.CompilationCacheItem.original_module)
}
inline void CompilationCacheItem::set_original_module(const char* value,
    size_t size) {
  
  original_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:mlir.kernel_gen.CompilationCacheItem.original_module)
}
inline std::string* CompilationCacheItem::mutable_original_module() {
  
  // @@protoc_insertion_point(field_mutable:mlir.kernel_gen.CompilationCacheItem.original_module)
  return original_module_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CompilationCacheItem::release_original_module() {
  // @@protoc_insertion_point(field_release:mlir.kernel_gen.CompilationCacheItem.original_module)
  
  return original_module_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CompilationCacheItem::set_allocated_original_module(std::string* original_module) {
  if (original_module != nullptr) {
    
  } else {
    
  }
  original_module_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_module,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:mlir.kernel_gen.CompilationCacheItem.original_module)
}
inline std::string* CompilationCacheItem::unsafe_arena_release_original_module() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mlir.kernel_gen.CompilationCacheItem.original_module)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return original_module_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CompilationCacheItem::unsafe_arena_set_allocated_original_module(
    std::string* original_module) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (original_module != nullptr) {
    
  } else {
    
  }
  original_module_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      original_module, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mlir.kernel_gen.CompilationCacheItem.original_module)
}

// string result_module = 2;
inline void CompilationCacheItem::clear_result_module() {
  result_module_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CompilationCacheItem::result_module() const {
  // @@protoc_insertion_point(field_get:mlir.kernel_gen.CompilationCacheItem.result_module)
  return result_module_.Get();
}
inline void CompilationCacheItem::set_result_module(const std::string& value) {
  
  result_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:mlir.kernel_gen.CompilationCacheItem.result_module)
}
inline void CompilationCacheItem::set_result_module(std::string&& value) {
  
  result_module_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:mlir.kernel_gen.CompilationCacheItem.result_module)
}
inline void CompilationCacheItem::set_result_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:mlir.kernel_gen.CompilationCacheItem.result_module)
}
inline void CompilationCacheItem::set_result_module(const char* value,
    size_t size) {
  
  result_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:mlir.kernel_gen.CompilationCacheItem.result_module)
}
inline std::string* CompilationCacheItem::mutable_result_module() {
  
  // @@protoc_insertion_point(field_mutable:mlir.kernel_gen.CompilationCacheItem.result_module)
  return result_module_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CompilationCacheItem::release_result_module() {
  // @@protoc_insertion_point(field_release:mlir.kernel_gen.CompilationCacheItem.result_module)
  
  return result_module_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CompilationCacheItem::set_allocated_result_module(std::string* result_module) {
  if (result_module != nullptr) {
    
  } else {
    
  }
  result_module_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_module,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:mlir.kernel_gen.CompilationCacheItem.result_module)
}
inline std::string* CompilationCacheItem::unsafe_arena_release_result_module() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mlir.kernel_gen.CompilationCacheItem.result_module)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return result_module_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CompilationCacheItem::unsafe_arena_set_allocated_result_module(
    std::string* result_module) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (result_module != nullptr) {
    
  } else {
    
  }
  result_module_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result_module, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mlir.kernel_gen.CompilationCacheItem.result_module)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kernel_gen
}  // namespace mlir

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2ftools_2fkernel_5fgen_2fcompile_5fcache_5fitem_2eproto
