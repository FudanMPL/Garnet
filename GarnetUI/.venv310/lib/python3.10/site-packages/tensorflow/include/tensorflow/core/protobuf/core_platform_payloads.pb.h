// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/core_platform_payloads.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto;
namespace tensorflow {
namespace core {
namespace platform {
class ErrorSourceProto;
class ErrorSourceProtoDefaultTypeInternal;
extern ErrorSourceProtoDefaultTypeInternal _ErrorSourceProto_default_instance_;
}  // namespace platform
}  // namespace core
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::core::platform::ErrorSourceProto* Arena::CreateMaybeMessage<::tensorflow::core::platform::ErrorSourceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace core {
namespace platform {

enum ErrorSourceProto_ErrorSource : int {
  ErrorSourceProto_ErrorSource_UNKNOWN = 0,
  ErrorSourceProto_ErrorSource_TPU_COMPILE_OP = 1,
  ErrorSourceProto_ErrorSource_TF_XLA_BRIDGE = 2,
  ErrorSourceProto_ErrorSource_MLIR_BRIDGE_PHASE_1 = 3,
  ErrorSourceProto_ErrorSource_MLIR_BRIDGE_PHASE_2 = 4,
  ErrorSourceProto_ErrorSource_EAGER_REMOTE_MGR = 5,
  ErrorSourceProto_ErrorSource_ErrorSourceProto_ErrorSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorSourceProto_ErrorSource_ErrorSourceProto_ErrorSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorSourceProto_ErrorSource_IsValid(int value);
constexpr ErrorSourceProto_ErrorSource ErrorSourceProto_ErrorSource_ErrorSource_MIN = ErrorSourceProto_ErrorSource_UNKNOWN;
constexpr ErrorSourceProto_ErrorSource ErrorSourceProto_ErrorSource_ErrorSource_MAX = ErrorSourceProto_ErrorSource_EAGER_REMOTE_MGR;
constexpr int ErrorSourceProto_ErrorSource_ErrorSource_ARRAYSIZE = ErrorSourceProto_ErrorSource_ErrorSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorSourceProto_ErrorSource_descriptor();
template<typename T>
inline const std::string& ErrorSourceProto_ErrorSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorSourceProto_ErrorSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorSourceProto_ErrorSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorSourceProto_ErrorSource_descriptor(), enum_t_value);
}
inline bool ErrorSourceProto_ErrorSource_Parse(
    const std::string& name, ErrorSourceProto_ErrorSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorSourceProto_ErrorSource>(
    ErrorSourceProto_ErrorSource_descriptor(), name, value);
}
// ===================================================================

class ErrorSourceProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.core.platform.ErrorSourceProto) */ {
 public:
  ErrorSourceProto();
  virtual ~ErrorSourceProto();

  ErrorSourceProto(const ErrorSourceProto& from);
  ErrorSourceProto(ErrorSourceProto&& from) noexcept
    : ErrorSourceProto() {
    *this = ::std::move(from);
  }

  inline ErrorSourceProto& operator=(const ErrorSourceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorSourceProto& operator=(ErrorSourceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorSourceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorSourceProto* internal_default_instance() {
    return reinterpret_cast<const ErrorSourceProto*>(
               &_ErrorSourceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrorSourceProto& a, ErrorSourceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorSourceProto* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorSourceProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorSourceProto* New() const final {
    return CreateMaybeMessage<ErrorSourceProto>(nullptr);
  }

  ErrorSourceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorSourceProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorSourceProto& from);
  void MergeFrom(const ErrorSourceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorSourceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.core.platform.ErrorSourceProto";
  }
  protected:
  explicit ErrorSourceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ErrorSourceProto_ErrorSource ErrorSource;
  static constexpr ErrorSource UNKNOWN =
    ErrorSourceProto_ErrorSource_UNKNOWN;
  static constexpr ErrorSource TPU_COMPILE_OP =
    ErrorSourceProto_ErrorSource_TPU_COMPILE_OP;
  static constexpr ErrorSource TF_XLA_BRIDGE =
    ErrorSourceProto_ErrorSource_TF_XLA_BRIDGE;
  static constexpr ErrorSource MLIR_BRIDGE_PHASE_1 =
    ErrorSourceProto_ErrorSource_MLIR_BRIDGE_PHASE_1;
  static constexpr ErrorSource MLIR_BRIDGE_PHASE_2 =
    ErrorSourceProto_ErrorSource_MLIR_BRIDGE_PHASE_2;
  static constexpr ErrorSource EAGER_REMOTE_MGR =
    ErrorSourceProto_ErrorSource_EAGER_REMOTE_MGR;
  static inline bool ErrorSource_IsValid(int value) {
    return ErrorSourceProto_ErrorSource_IsValid(value);
  }
  static constexpr ErrorSource ErrorSource_MIN =
    ErrorSourceProto_ErrorSource_ErrorSource_MIN;
  static constexpr ErrorSource ErrorSource_MAX =
    ErrorSourceProto_ErrorSource_ErrorSource_MAX;
  static constexpr int ErrorSource_ARRAYSIZE =
    ErrorSourceProto_ErrorSource_ErrorSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorSource_descriptor() {
    return ErrorSourceProto_ErrorSource_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorSource_Name.");
    return ErrorSourceProto_ErrorSource_Name(enum_t_value);
  }
  static inline bool ErrorSource_Parse(const std::string& name,
      ErrorSource* value) {
    return ErrorSourceProto_ErrorSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorSourceFieldNumber = 1,
  };
  // .tensorflow.core.platform.ErrorSourceProto.ErrorSource error_source = 1;
  void clear_error_source();
  ::tensorflow::core::platform::ErrorSourceProto_ErrorSource error_source() const;
  void set_error_source(::tensorflow::core::platform::ErrorSourceProto_ErrorSource value);

  // @@protoc_insertion_point(class_scope:tensorflow.core.platform.ErrorSourceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int error_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorSourceProto

// .tensorflow.core.platform.ErrorSourceProto.ErrorSource error_source = 1;
inline void ErrorSourceProto::clear_error_source() {
  error_source_ = 0;
}
inline ::tensorflow::core::platform::ErrorSourceProto_ErrorSource ErrorSourceProto::error_source() const {
  // @@protoc_insertion_point(field_get:tensorflow.core.platform.ErrorSourceProto.error_source)
  return static_cast< ::tensorflow::core::platform::ErrorSourceProto_ErrorSource >(error_source_);
}
inline void ErrorSourceProto::set_error_source(::tensorflow::core::platform::ErrorSourceProto_ErrorSource value) {
  
  error_source_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.core.platform.ErrorSourceProto.error_source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace platform
}  // namespace core
}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::core::platform::ErrorSourceProto_ErrorSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::core::platform::ErrorSourceProto_ErrorSource>() {
  return ::tensorflow::core::platform::ErrorSourceProto_ErrorSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcore_5fplatform_5fpayloads_2eproto
