// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/coordination_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto;
namespace tensorflow {
class CoordinatedJob;
class CoordinatedJobDefaultTypeInternal;
extern CoordinatedJobDefaultTypeInternal _CoordinatedJob_default_instance_;
class CoordinationServiceConfig;
class CoordinationServiceConfigDefaultTypeInternal;
extern CoordinationServiceConfigDefaultTypeInternal _CoordinationServiceConfig_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::CoordinatedJob* Arena::CreateMaybeMessage<::tensorflow::CoordinatedJob>(Arena*);
template<> ::tensorflow::CoordinationServiceConfig* Arena::CreateMaybeMessage<::tensorflow::CoordinationServiceConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class CoordinatedJob :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.CoordinatedJob) */ {
 public:
  CoordinatedJob();
  virtual ~CoordinatedJob();

  CoordinatedJob(const CoordinatedJob& from);
  CoordinatedJob(CoordinatedJob&& from) noexcept
    : CoordinatedJob() {
    *this = ::std::move(from);
  }

  inline CoordinatedJob& operator=(const CoordinatedJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinatedJob& operator=(CoordinatedJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoordinatedJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinatedJob* internal_default_instance() {
    return reinterpret_cast<const CoordinatedJob*>(
               &_CoordinatedJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CoordinatedJob& a, CoordinatedJob& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinatedJob* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordinatedJob* New() const final {
    return CreateMaybeMessage<CoordinatedJob>(nullptr);
  }

  CoordinatedJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordinatedJob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordinatedJob& from);
  void MergeFrom(const CoordinatedJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinatedJob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.CoordinatedJob";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNumTasksFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int32 num_tasks = 2;
  void clear_num_tasks();
  ::PROTOBUF_NAMESPACE_ID::int32 num_tasks() const;
  void set_num_tasks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.CoordinatedJob)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class CoordinationServiceConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.CoordinationServiceConfig) */ {
 public:
  CoordinationServiceConfig();
  virtual ~CoordinationServiceConfig();

  CoordinationServiceConfig(const CoordinationServiceConfig& from);
  CoordinationServiceConfig(CoordinationServiceConfig&& from) noexcept
    : CoordinationServiceConfig() {
    *this = ::std::move(from);
  }

  inline CoordinationServiceConfig& operator=(const CoordinationServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinationServiceConfig& operator=(CoordinationServiceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoordinationServiceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationServiceConfig* internal_default_instance() {
    return reinterpret_cast<const CoordinationServiceConfig*>(
               &_CoordinationServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CoordinationServiceConfig& a, CoordinationServiceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinationServiceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordinationServiceConfig* New() const final {
    return CreateMaybeMessage<CoordinationServiceConfig>(nullptr);
  }

  CoordinationServiceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationServiceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordinationServiceConfig& from);
  void MergeFrom(const CoordinationServiceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationServiceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.CoordinationServiceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecoverableJobsFieldNumber = 9,
    kCoordinatedJobListFieldNumber = 10,
    kServiceTypeFieldNumber = 1,
    kServiceLeaderFieldNumber = 2,
    kClusterRegisterTimeoutInMsFieldNumber = 4,
    kHeartbeatTimeoutInMsFieldNumber = 5,
    kShutdownBarrierTimeoutInMsFieldNumber = 7,
    kEnableHealthCheckFieldNumber = 3,
    kAgentDestructionWithoutShutdownFieldNumber = 8,
  };
  // repeated string recoverable_jobs = 9;
  int recoverable_jobs_size() const;
  void clear_recoverable_jobs();
  const std::string& recoverable_jobs(int index) const;
  std::string* mutable_recoverable_jobs(int index);
  void set_recoverable_jobs(int index, const std::string& value);
  void set_recoverable_jobs(int index, std::string&& value);
  void set_recoverable_jobs(int index, const char* value);
  void set_recoverable_jobs(int index, const char* value, size_t size);
  std::string* add_recoverable_jobs();
  void add_recoverable_jobs(const std::string& value);
  void add_recoverable_jobs(std::string&& value);
  void add_recoverable_jobs(const char* value);
  void add_recoverable_jobs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& recoverable_jobs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_recoverable_jobs();

  // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
  int coordinated_job_list_size() const;
  void clear_coordinated_job_list();
  ::tensorflow::CoordinatedJob* mutable_coordinated_job_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::CoordinatedJob >*
      mutable_coordinated_job_list();
  const ::tensorflow::CoordinatedJob& coordinated_job_list(int index) const;
  ::tensorflow::CoordinatedJob* add_coordinated_job_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::CoordinatedJob >&
      coordinated_job_list() const;

  // string service_type = 1;
  void clear_service_type();
  const std::string& service_type() const;
  void set_service_type(const std::string& value);
  void set_service_type(std::string&& value);
  void set_service_type(const char* value);
  void set_service_type(const char* value, size_t size);
  std::string* mutable_service_type();
  std::string* release_service_type();
  void set_allocated_service_type(std::string* service_type);

  // string service_leader = 2;
  void clear_service_leader();
  const std::string& service_leader() const;
  void set_service_leader(const std::string& value);
  void set_service_leader(std::string&& value);
  void set_service_leader(const char* value);
  void set_service_leader(const char* value, size_t size);
  std::string* mutable_service_leader();
  std::string* release_service_leader();
  void set_allocated_service_leader(std::string* service_leader);

  // int64 cluster_register_timeout_in_ms = 4;
  void clear_cluster_register_timeout_in_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 cluster_register_timeout_in_ms() const;
  void set_cluster_register_timeout_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 heartbeat_timeout_in_ms = 5;
  void clear_heartbeat_timeout_in_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 heartbeat_timeout_in_ms() const;
  void set_heartbeat_timeout_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 shutdown_barrier_timeout_in_ms = 7;
  void clear_shutdown_barrier_timeout_in_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 shutdown_barrier_timeout_in_ms() const;
  void set_shutdown_barrier_timeout_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool enable_health_check = 3;
  void clear_enable_health_check();
  bool enable_health_check() const;
  void set_enable_health_check(bool value);

  // bool agent_destruction_without_shutdown = 8;
  void clear_agent_destruction_without_shutdown();
  bool agent_destruction_without_shutdown() const;
  void set_agent_destruction_without_shutdown(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.CoordinationServiceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> recoverable_jobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::CoordinatedJob > coordinated_job_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_leader_;
  ::PROTOBUF_NAMESPACE_ID::int64 cluster_register_timeout_in_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 heartbeat_timeout_in_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 shutdown_barrier_timeout_in_ms_;
  bool enable_health_check_;
  bool agent_destruction_without_shutdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CoordinatedJob

// string name = 1;
inline void CoordinatedJob::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CoordinatedJob::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinatedJob.name)
  return name_.GetNoArena();
}
inline void CoordinatedJob::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinatedJob.name)
}
inline void CoordinatedJob::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CoordinatedJob.name)
}
inline void CoordinatedJob::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.CoordinatedJob.name)
}
inline void CoordinatedJob::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CoordinatedJob.name)
}
inline std::string* CoordinatedJob::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinatedJob.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CoordinatedJob::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CoordinatedJob.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CoordinatedJob::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CoordinatedJob.name)
}

// int32 num_tasks = 2;
inline void CoordinatedJob::clear_num_tasks() {
  num_tasks_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CoordinatedJob::num_tasks() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinatedJob.num_tasks)
  return num_tasks_;
}
inline void CoordinatedJob::set_num_tasks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_tasks_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CoordinatedJob.num_tasks)
}

// -------------------------------------------------------------------

// CoordinationServiceConfig

// string service_type = 1;
inline void CoordinationServiceConfig::clear_service_type() {
  service_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CoordinationServiceConfig::service_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.service_type)
  return service_type_.GetNoArena();
}
inline void CoordinationServiceConfig::set_service_type(const std::string& value) {
  
  service_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.service_type)
}
inline void CoordinationServiceConfig::set_service_type(std::string&& value) {
  
  service_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CoordinationServiceConfig.service_type)
}
inline void CoordinationServiceConfig::set_service_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.CoordinationServiceConfig.service_type)
}
inline void CoordinationServiceConfig::set_service_type(const char* value, size_t size) {
  
  service_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CoordinationServiceConfig.service_type)
}
inline std::string* CoordinationServiceConfig::mutable_service_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.service_type)
  return service_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CoordinationServiceConfig::release_service_type() {
  // @@protoc_insertion_point(field_release:tensorflow.CoordinationServiceConfig.service_type)
  
  return service_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CoordinationServiceConfig::set_allocated_service_type(std::string* service_type) {
  if (service_type != nullptr) {
    
  } else {
    
  }
  service_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_type);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CoordinationServiceConfig.service_type)
}

// string service_leader = 2;
inline void CoordinationServiceConfig::clear_service_leader() {
  service_leader_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CoordinationServiceConfig::service_leader() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.service_leader)
  return service_leader_.GetNoArena();
}
inline void CoordinationServiceConfig::set_service_leader(const std::string& value) {
  
  service_leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.service_leader)
}
inline void CoordinationServiceConfig::set_service_leader(std::string&& value) {
  
  service_leader_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CoordinationServiceConfig.service_leader)
}
inline void CoordinationServiceConfig::set_service_leader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.CoordinationServiceConfig.service_leader)
}
inline void CoordinationServiceConfig::set_service_leader(const char* value, size_t size) {
  
  service_leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CoordinationServiceConfig.service_leader)
}
inline std::string* CoordinationServiceConfig::mutable_service_leader() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.service_leader)
  return service_leader_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CoordinationServiceConfig::release_service_leader() {
  // @@protoc_insertion_point(field_release:tensorflow.CoordinationServiceConfig.service_leader)
  
  return service_leader_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CoordinationServiceConfig::set_allocated_service_leader(std::string* service_leader) {
  if (service_leader != nullptr) {
    
  } else {
    
  }
  service_leader_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_leader);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CoordinationServiceConfig.service_leader)
}

// bool enable_health_check = 3;
inline void CoordinationServiceConfig::clear_enable_health_check() {
  enable_health_check_ = false;
}
inline bool CoordinationServiceConfig::enable_health_check() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.enable_health_check)
  return enable_health_check_;
}
inline void CoordinationServiceConfig::set_enable_health_check(bool value) {
  
  enable_health_check_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.enable_health_check)
}

// int64 cluster_register_timeout_in_ms = 4;
inline void CoordinationServiceConfig::clear_cluster_register_timeout_in_ms() {
  cluster_register_timeout_in_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CoordinationServiceConfig::cluster_register_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.cluster_register_timeout_in_ms)
  return cluster_register_timeout_in_ms_;
}
inline void CoordinationServiceConfig::set_cluster_register_timeout_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cluster_register_timeout_in_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.cluster_register_timeout_in_ms)
}

// int64 heartbeat_timeout_in_ms = 5;
inline void CoordinationServiceConfig::clear_heartbeat_timeout_in_ms() {
  heartbeat_timeout_in_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CoordinationServiceConfig::heartbeat_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.heartbeat_timeout_in_ms)
  return heartbeat_timeout_in_ms_;
}
inline void CoordinationServiceConfig::set_heartbeat_timeout_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  heartbeat_timeout_in_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.heartbeat_timeout_in_ms)
}

// repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
inline int CoordinationServiceConfig::coordinated_job_list_size() const {
  return coordinated_job_list_.size();
}
inline void CoordinationServiceConfig::clear_coordinated_job_list() {
  coordinated_job_list_.Clear();
}
inline ::tensorflow::CoordinatedJob* CoordinationServiceConfig::mutable_coordinated_job_list(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return coordinated_job_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::CoordinatedJob >*
CoordinationServiceConfig::mutable_coordinated_job_list() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return &coordinated_job_list_;
}
inline const ::tensorflow::CoordinatedJob& CoordinationServiceConfig::coordinated_job_list(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return coordinated_job_list_.Get(index);
}
inline ::tensorflow::CoordinatedJob* CoordinationServiceConfig::add_coordinated_job_list() {
  // @@protoc_insertion_point(field_add:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return coordinated_job_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::CoordinatedJob >&
CoordinationServiceConfig::coordinated_job_list() const {
  // @@protoc_insertion_point(field_list:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return coordinated_job_list_;
}

// int64 shutdown_barrier_timeout_in_ms = 7;
inline void CoordinationServiceConfig::clear_shutdown_barrier_timeout_in_ms() {
  shutdown_barrier_timeout_in_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CoordinationServiceConfig::shutdown_barrier_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.shutdown_barrier_timeout_in_ms)
  return shutdown_barrier_timeout_in_ms_;
}
inline void CoordinationServiceConfig::set_shutdown_barrier_timeout_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shutdown_barrier_timeout_in_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.shutdown_barrier_timeout_in_ms)
}

// bool agent_destruction_without_shutdown = 8;
inline void CoordinationServiceConfig::clear_agent_destruction_without_shutdown() {
  agent_destruction_without_shutdown_ = false;
}
inline bool CoordinationServiceConfig::agent_destruction_without_shutdown() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.agent_destruction_without_shutdown)
  return agent_destruction_without_shutdown_;
}
inline void CoordinationServiceConfig::set_agent_destruction_without_shutdown(bool value) {
  
  agent_destruction_without_shutdown_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.agent_destruction_without_shutdown)
}

// repeated string recoverable_jobs = 9;
inline int CoordinationServiceConfig::recoverable_jobs_size() const {
  return recoverable_jobs_.size();
}
inline void CoordinationServiceConfig::clear_recoverable_jobs() {
  recoverable_jobs_.Clear();
}
inline const std::string& CoordinationServiceConfig::recoverable_jobs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return recoverable_jobs_.Get(index);
}
inline std::string* CoordinationServiceConfig::mutable_recoverable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return recoverable_jobs_.Mutable(index);
}
inline void CoordinationServiceConfig::set_recoverable_jobs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  recoverable_jobs_.Mutable(index)->assign(value);
}
inline void CoordinationServiceConfig::set_recoverable_jobs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  recoverable_jobs_.Mutable(index)->assign(std::move(value));
}
inline void CoordinationServiceConfig::set_recoverable_jobs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recoverable_jobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CoordinationServiceConfig.recoverable_jobs)
}
inline void CoordinationServiceConfig::set_recoverable_jobs(int index, const char* value, size_t size) {
  recoverable_jobs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CoordinationServiceConfig.recoverable_jobs)
}
inline std::string* CoordinationServiceConfig::add_recoverable_jobs() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return recoverable_jobs_.Add();
}
inline void CoordinationServiceConfig::add_recoverable_jobs(const std::string& value) {
  recoverable_jobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CoordinationServiceConfig.recoverable_jobs)
}
inline void CoordinationServiceConfig::add_recoverable_jobs(std::string&& value) {
  recoverable_jobs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.CoordinationServiceConfig.recoverable_jobs)
}
inline void CoordinationServiceConfig::add_recoverable_jobs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recoverable_jobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CoordinationServiceConfig.recoverable_jobs)
}
inline void CoordinationServiceConfig::add_recoverable_jobs(const char* value, size_t size) {
  recoverable_jobs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CoordinationServiceConfig.recoverable_jobs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CoordinationServiceConfig::recoverable_jobs() const {
  // @@protoc_insertion_point(field_list:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return recoverable_jobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CoordinationServiceConfig::mutable_recoverable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return &recoverable_jobs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto
