from Compiler.sorting import *
from Compiler.group_ops import *


court_row = 15024 # 法院数据总共有多少条数据


community_row = 1173 # 社区数据总共有多少条数据

col = 5 # 每个数据有多少个特征


total_table = sint.Matrix(court_row + community_row, col)
for i in range(court_row):
    total_table[i][0] = sint.get_input_from(1)

for i in range(court_row,court_row+community_row):
    for j in range(col):
        total_table[i][j]= sint.get_input_from(2)


ids = total_table.get_column(0)
perm = gen_perm_by_radix_sort(ids)

for i in range(col):
    total_table.set_column(i, perm.apply(total_table.get_column(i)).get_vector())

ids = total_table.get_column(0)
flag = sint.Array(size=court_row+community_row)
flag[0] = 1
flag.assign_vector(ids.get_vector(size=len(ids) - 1) !=
                ids.get_vector(size=len(ids) - 1, base=1), base=1)


for i in range(1, col):
    total_table.set_column(i, GroupSum(flag, total_table.get_column(i)))



print_ln("===================== 检测结果 =====================")
print_ln("证件号, 判决时间, 矫正期限（天）, 入矫日期, 终止日期")



@for_range(community_row + court_row-1)
def _(i):
    entry = total_table[i]
    in_intersection = entry[0] == total_table[i+1][0]
    entry = entry * in_intersection + (1 - in_intersection) * -1 # 不符合规则的数据置为-1
    plain_text = entry.reveal_to(0) # 还原数据
    @if_(plain_text[0]._v >= 0)
    def _():
        print_ln_to(0, ' %s,  %s, %s,  %s, %s',   plain_text[0], plain_text[1], plain_text[2], plain_text[3], plain_text[4]) # 输出数据

print_ln("====================================================")
