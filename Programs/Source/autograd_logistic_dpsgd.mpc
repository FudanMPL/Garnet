import nn as nn
from tensor import Tensor,autograd_function
import optimizer as optim
import dataloader as dataloader
import functional as F
# program.use_trunc_pr = True

class LogisticRegression(nn.Module):
    def __init__(self, n_inputs, n_outputs):
        super(LogisticRegression, self).__init__()
        self.linear = nn.Linear(n_inputs, n_outputs, dp = True)

    def forward(self,x):
        out = self.linear(x)
        return out

x = MultiArray([5, 3], sfix)
y = MultiArray([5, 10], sfix)

@for_range(x.total_size())
def _(i):
    x.assign_vector(sfix(i/10), i)
y.assign_all(0)
for i in range(5):
    y[i][i//3] = 1

dataloader = dataloader.DataLoader(x, y, batch_size = 3)
model = LogisticRegression(3, 10)
optimizer = optim.DPSGD(model.parameters(), lr = 0.01, iterations = 1)
criterion = nn.MSELoss(reduction = 'none')
model.train()
@for_range(1)
def _(i):
    x, labels = dataloader[i]
    optimizer.zero_grad()
    output = model(x)
    loss = criterion(output, labels)
    loss.print_reveal_nested()
    print(loss.sizes)
    loss.backward()
    optimizer.step()