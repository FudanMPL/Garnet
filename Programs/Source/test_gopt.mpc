from tensor import Tensor,autograd_function
import functional as F
from Compiler.types import *

sfix.set_precision(30, 60)
cfix.set_precision(30, 60)

@for_range_opt(30)
def _(i):
    x = MultiArray([1, 1], sfix)
    # x = Array(1, sfix)
    x.assign_vector(sfix(i))
    input = Tensor(x, req_grad = True)

    out1 = F.gelu(input, approximate='tanh')
    out2 = input.relu()
    out3 = out1 - out2
    
    print_ln('======================')
    x.print_reveal_nested()
    out1.value.print_reveal_nested()
    out2.value.print_reveal_nested()
    out3.value.print_reveal_nested()
    
    