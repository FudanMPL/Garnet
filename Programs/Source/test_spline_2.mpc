from Compiler.util import max

splines = [-10.0, -9.5, -9.0, -8.5, -8.0, -7.5, -7.0, -6.5, -6.0, -5.5, -5.0, -4.5, -4.0, -3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5]
params = [[0.00339677020113237, 0.000626528324102048, 2.91405362211570e-5], [0.00509516052684336, 0.000984784249654551, 4.80373551259104e-5], [0.00760678749855976, 0.00154406917538036, 7.91804604750493e-5], [0.0112971170182701, 0.00241425407078389, 0.000130492846792179], [0.0166794083883975, 0.00376288024828803, 0.000215000551378303], [0.0244624651814632, 0.00584332834535067, 0.000354080108850031], [0.0356039733654046, 0.00903466137078948, 0.000582705100740299], [0.0513599222296289, 0.0138955976643518, 0.000957806024598979], [0.0733079927474822, 0.0212322734756719, 0.00157127448257441], [0.103299897199456, 0.0321708464971353, 0.00256933052531747], [0.143260069199195, 0.0482045441730402, 0.00417901389635270], [0.194697073478254, 0.0711381333553112, 0.00673791669619732], [0.257756238623476, 0.102765986265130, 0.0107088767844116], [0.329717967989798, 0.143999381879699, 0.0166255063160570], [0.403284018575260, 0.193121841465128, 0.0248446539673188], [0.466132976982768, 0.243327399631800, 0.0349043233753860], [0.504722415640350, 0.281499594937529, 0.0443915342145353], [0.514084143506077, 0.293109620496732, 0.0480019334016939], [0.506203750761696, 0.276458206070422, 0.0390421415390722], [0.500313504549436, 0.253785960744278, 0.0153037560133594]]

n = 100

x = sfix.Array(n)
@for_range_opt(n)
def _(i):
    x[i] = sfix.get_random(0,10)
    print_ln("xi is %s", x[i].reveal())

ex_res = sfix.Array(n)
x_max = max(x)
print_ln("x_max is %s", x_max.reveal())
length = len(splines)

final_res = sfix.Array(n)
previous = sfix(1)
sum = sfix(0)

for j in range(n):
    val = x[j] - x_max
    print_ln("val is %s", val.reveal())
    for i in range(0, length):
        tmp = (val >= splines[i])
        com_res = previous - tmp
        previous = tmp
        final_res[j] += com_res * (params[i][0] + params[i][1]*val + params[i][2]*val*val)
    final_res[j] += previous * sfix(1)
    sum+=final_res[j]


for i in range(n):
    print_ln("x is %s , softmax val is %s", final_res[i].reveal(), (final_res[i]/sum).reveal())