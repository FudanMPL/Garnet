import Compiler.nn as nn
import Compiler.optimizer as optim
import Compiler.dataloader as dataloader
import Compiler.functional as F
from Compiler.tensor import Tensor,autograd_function

class LogisticRegression(nn.Module):
    def __init__(self):
        super(LogisticRegression, self).__init__()
        self.linear = nn.Linear(4,1)

    def forward(self,x):
        out = self.linear(x)
        out = F.sigmoid(out)
        return out

x = Tensor.ones(30, 4)
y = Tensor.ones(30, 1)
dataload = dataloader.DataLoader(x, y, batch_size = 2)

model = LogisticRegression()
optimizer = optim.SGD(model.parameters(), lr = 0.01)
mse = nn.MSELoss()
model.train()
@for_range(10)
def _(i):
    input, label = dataload.get_data(i)
    output = model(input)
    loss = mse(output, label)
    optimizer.zero_grad()
    loss.backward()
    loss.print_reveal_nested()
    optimizer.step()