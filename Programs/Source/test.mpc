# id1 = sint.get_input_from(0)
# ID1 = id1.reveal()
# id2 = sint.get_input_from(0)
# ID2 = id2.reveal()
# id3 = sint.get_input_from(0)
# ID3 = id3.reveal()
# id4 = sint.get_input_from(0)
# ID4 = id4.reveal()
# age1 = sint.get_input_from(0)
# age2 = sint.get_input_from(0)
# age3 = sint.get_input_from(0)
# age4 = sint.get_input_from(0)
# height1 = sfix.get_input_from(1)
# height2 = sfix.get_input_from(1)
# height3 = sfix.get_input_from(1)
# height4 = sfix.get_input_from(1)
# name1 = sint.get_input_from(0)
# name2 = sint.get_input_from(0)
# name3 = sint.get_input_from(0)
# name4 = sint.get_input_from(0)

# # 构造
# data = [[id1, age1, height1], [id2, age2, height2], [id3, age3, height3]]
# columns = ['id', 'age', 'height']
# df = dataframe(data, columns)

# new_row_data = [id4, age4, height4]
# new_row_index = ['id', 'age', 'height', 'ID']
# new_row = series(new_row_data, index = new_row_index)

# new_column_data = [[id2, age2, name1, id2]]
# new_column_data2 = [[id2, age4, height4, name4]]
# new_column = series(new_column_data, name='id')


# df2 = dataframe(new_column_data, ['id', 'age', 'name', 'ID'])
# df3 = dataframe(new_column_data2, ['id', 'age', 'height', 'name'])
# df4 = dataframe([[id2, id1]], ['id', 'ID'])
# # df.drop(index = 1, inplace=True)
# print(df)
# df5, num = df.merge2([df2, df3, df4], on='id', join='inner', inplace=True)
# print("df: \n", df)
# # df5, num = df._ss_groupBy(on='id', party_number=4, join='inner')


# for col in df.columns:
#     for i in range(len(df.index)): 
#         if df.value_types[df.columns.index(col)] is sint or df.value_types[df.columns.index(col)] is sfix: print_ln("df[%s][%s]: %s", col, i, df[col][i].reveal())
#         else: print_ln("df[%s][%s]: %s", col, i, df[col][i])

# print_ln("%s", num.reveal())
    
# # 查
# print_ln("df['age']: %s", df['age'])
# print_ln("df[['age', 'id']]: \n%s", df[['id', 'age']])
# print_ln("df['id'][0]: %s", df['id'][0].reveal())
# print_ln("df['age'][1]: %s", df['age'][1].reveal())

# print_ln("df.loc[0]: %s", df.loc[0])
# print_ln("df.loc[[0, 1]]:\n %s", df.loc[[0, 1]])
# print_ln("df.loc[1:2]:\n %s", df.loc[1:2])
# print_ln("df.loc[0]['age]: %s", df.loc[0]['age'].reveal())
# print_ln("df.loc[[0, 1]]]['age'][0]: %s", df.loc[[0, 1]]['age'][0].reveal())

# # 改
# df['age'][0] = age2
# print_ln("df['age'][0]: %s", df['age'][0].reveal())

# # 增
# df['ID'] = new_column_data
# print_ln("after insert column id: \n%s", df)
# df.loc[3] = new_row_data
# print_ln("after insert row 3: \n%s", df)

# # 删
# df.drop(index=1, inplace=True)
# print_ln("after drop row 1:\n %s", df)
# df.drop(column=['ID', 'age'], inplace=True)
# print_ln("after drop column ID, age:\n %s", df)

ID1 = cint(1)
ID2 = cint(2)
ID3 = cint(3)
salary1 = sfix(1000.0)
salary2 = sfix(1500.0)
salary3 = sfix(800.0)
age1 = sint(25)
age2 = sint(40)
age3 = sint(37)
height1 = cfix(175.0)
height2 = cfix(170.0)
height3 = cfix(160.0)

# 构造
data = [[ID1, salary1], [ID2, salary2], [ID3, salary3]]
df = dataframe(data, ['ID', 'salary'])

# 查
# df['ID'], df[['ID', 'salary']], df.loc[2], df.loc[[0, 1]], df.loc[1:2], df['ID'][2]
print_ln("df['ID']: %s", df['ID'])
print_ln("df[['ID', 'salary']]: \n%s", df[['ID', 'salary']])
print_ln("df.loc[2]: %s", df.loc[2])
print_ln("df.loc[[0, 1]]: \n%s", df.loc[[0, 2]])
print_ln("df.loc[1:2]: \n%s", df.loc[1:2])
print_ln("df['ID'][2]: %s", df['ID'][2])

# 增
df[['age', 'height']] = [[age1, height1], [age2, height2], [age3, height3]]
print_ln("after insert column age: \n%s", df)
df.loc[3] = [cint(4), sfix(2000.0), sint(46), cfix(165.0)]
print_ln("after insert row 3: \n%s", df)

# 删
df2 = df.drop(index=3, column=['age', 'height'], inplace=True)
print_ln("after drop row 1 and columns age, height: \n%s", df)

# # 改
# df['salary'][0] = sfix(5000.0)
# df['ID'] = [cint(4), cint(3), cint(2)]
# df.loc[2] = [cint(5), sfix(2000.0)]


# df3 = dataframe([[ID2, sint(37)], [cint(4), sint(40)]], columns=['ID', 'age'])
# df4 = dataframe([[ID2, cint(170)], [cint(5), cint(160)]], columns=['ID', 'height'])
# df.merge(obj=[df3, df4], on='ID', join='outer', inplace=True)

df.print_dataframe()

for col in df.columns:
    for i in df.index:
        if df.value_types[df.columns.index(col)] == sint or df.value_types[df.columns.index(col)] == sfix: print_ln("df[%s][%s]: %s", col, i, df[col][i].reveal())
        else: print_ln("df[%s][%s]: %s", col, i, df[col][i])

# ===================================================== 以下是merge算法的测试

# from Compiler import types
# from Compiler import sorting
# a1 = sint.get_input_from(0)
# a2 = sint.get_input_from(0)
# a3 = sint.get_input_from(0)
# b1 = sint.get_input_from(0)
# b2 = sint.get_input_from(0)
# b3 = sint.get_input_from(0)

# m = types.Matrix.create_from([[b1, a2, a3], [b1, None, b3], [a1, a3, a2]])
# c1 = m.get_column(0)
# perm = sorting.gen_perm_by_radix_sort(c1)
# print(m)
# print(perm)
# print(perm.get_vector())
# # print_ln("a1: %s", a1.reveal())
# # print_ln("a2: %s", a2.reveal())
# # print_ln("a3: %s", a3.reveal())
# # print_ln("b1: %s", b1.reveal())
# # print_ln("b2: %s", b2.reveal())
# # print_ln("b3: %s", b3.reveal())
# print_ln("c1[0]: %s", c1[0].reveal())
# print_ln("c1[1]: %s", c1[1].reveal())
# print_ln("c1[2]: %s", c1[2].reveal())

# print_ln("perm[0]: %s", perm[0].reveal())
# print_ln("perm[1]: %s", perm[1].reveal())
# print_ln("perm[2]: %s", perm[2].reveal())

# res = perm.apply(m.get_column(0))
# print("res: ", res)
# print_ln("res[0]: %s", res[0].reveal())
# print_ln("res[1]: %s", res[1].reveal())
# print_ln("res[2]: %s", res[2].reveal())

# from Compiler.group_ops import GroupSum
# flag = sint.Array(size=3)
# flag[0] = 1
# ids = m.get_column(0)
# flag.assign_vector(ids.get_vector(size=len(ids) - 1) !=
#                     ids.get_vector(size=len(ids) - 1, base=1), base=1)
# gs = GroupSum(flag, m.get_column(1))
# print("gs: ", gs)
# print_ln("%s", gs[0].reveal())
# print_ln("%s", gs[1].reveal())
# print_ln("%s", gs[2].reveal())
