############# 2024-06-11 15:55:12 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v107, v54) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v108
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v108,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v109
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v109, v55) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v110
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v109, v56) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v111
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v110, v57) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v112
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v112, v58) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v113
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v114,) {}
output:  v115
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v115, v59) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v116, v60) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v117, v61) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v118
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v119,) {}
output:  v120
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v120, v62) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v121
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v121, v63) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v122
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v122, v64) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v123
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v124,) {}
output:  v125
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v125, v65) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v126
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v125, v66) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v127
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v126, v67) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v128
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v128, v68) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v129
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v130,) {}
output:  v131
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v131, v69) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v132
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v132, v70) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v133
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v133, v71) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v134
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v135,) {}
output:  v136
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v136, v72) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v137
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v137, v73) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v138
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v138, v74) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v139
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v140,) {}
output:  v141
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v141, v75) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v142
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v142, v76) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v143
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v143, v77) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v144
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v145,) {}
output:  v146
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v146, v78) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v147
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v146, v79) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v148
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v147, v80) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v149
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v149, v81) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v150
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v151,) {}
output:  v152
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v152, v82) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v153
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v153, v83) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v154
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v154, v84) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v155
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v156,) {}
output:  v157
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v157, v85) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v158
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v158, v86) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v159
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v159, v87) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v160
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v161,) {}
output:  v162
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v162, v88) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v163
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v163, v89) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v164
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v164, v90) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v165
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v166,) {}
output:  v167
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v167, v91) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v168
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v168, v92) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v169
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v169, v93) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v170
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v171,) {}
output:  v172
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v172, v94) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v173
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v173, v95) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v174
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v174, v96) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v175
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v176,) {}
output:  v177
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v177, v97) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v178
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v177, v98) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v179
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v178, v99) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v180
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v180, v100) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v181
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v182,) {}
output:  v183
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v183, v101) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v184
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v184, v102) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v185
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v185, v103) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v186
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v187,) {}
output:  v188
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v188, v104) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v189
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v189, v105) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v190
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v190, v106) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v191
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v192,) {}
output:  v193
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v107, v54) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v108
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v108,) {}
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v109
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v109, v55) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v110
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v109, v56) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v111
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v110, v57) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v112
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v112, v58) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v113
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v114,) {}
output:  v115
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v115, v59) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v116, v60) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v117, v61) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:55:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v118
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v119,) {}
output:  v120
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v120, v62) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v121
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v121, v63) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v122
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v122, v64) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v123
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v124,) {}
output:  v125
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v125, v65) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v126
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v125, v66) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v127
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v126, v67) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v128
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v128, v68) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v129
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v130,) {}
output:  v131
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v131, v69) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v132
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v132, v70) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v133
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v133, v71) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v134
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v135,) {}
output:  v136
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v136, v72) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v137
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v137, v73) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v138
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v138, v74) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v139
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v140,) {}
output:  v141
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v141, v75) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v142
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v142, v76) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v143
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v143, v77) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v144
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v145,) {}
output:  v146
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v146, v78) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v147
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v146, v79) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v148
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v147, v80) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v149
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v149, v81) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v150
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v151,) {}
output:  v152
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v152, v82) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v153
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v153, v83) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v154
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v154, v84) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v155
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v156,) {}
output:  v157
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v157, v85) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v158
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v158, v86) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v159
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v159, v87) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v160
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v161,) {}
output:  v162
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v162, v88) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v163
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v163, v89) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v164
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v164, v90) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v165
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v166,) {}
output:  v167
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v167, v91) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v168
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v168, v92) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v169
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v169, v93) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v170
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v171,) {}
output:  v172
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v172, v94) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v173
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v173, v95) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v174
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v174, v96) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v175
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v176,) {}
output:  v177
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v177, v97) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v178
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v177, v98) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v179
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v178, v99) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:55:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v180
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v180, v100) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v181
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v182,) {}
output:  v183
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v183, v101) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v184
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v184, v102) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v185
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v185, v103) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v186
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v187,) {}
output:  v188
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v188, v104) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v189
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v189, v105) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v190
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v190, v106) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v191
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v192,) {}
output:  v193
Processing basic block Tue Jun 11 15:55:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 52.184343 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:55:32 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v298, v246) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v299
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v299,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v300
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v300, v247) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v301
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v301,)
Compiled 100000 lines at Tue Jun 11 15:55:39 2024
spilts:  (v302, v303)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v303, v248) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v304
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v304, v249) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v305
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v306,) {}
output:  v307
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v307, v250) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v308
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v308, v251) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v309
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v309, v252) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v310
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v311,) {}
output:  v312
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v312, v253) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v313
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v313, v254) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v314
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v314, v255) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v315
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v316,) {}
output:  v317
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v317, v256) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v318
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v317, v257) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v319
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v318, v258) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v320
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v320, v259) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v321
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v322,) {}
output:  v323
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v323, v260) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v324
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v324, v261) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v325
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v325, v262) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v326
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v327,) {}
output:  v328
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v328, v263) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v329
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v329, v264) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v330
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v330, v265) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v331
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v332,) {}
output:  v333
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v333, v266) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v334
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v334, v267) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v335
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v335, v268) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v336
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v337,) {}
output:  v338
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v338, v269) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v339
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v338, v270) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v340
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v339, v271) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v341
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v341, v272) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v342
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v343,) {}
output:  v344
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v344, v273) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v345
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v345, v274) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v346
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v346, v275) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v347
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v348,) {}
output:  v349
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v349, v276) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v350
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v350, v277) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v351
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v351, v278) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v352
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v353,) {}
output:  v354
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v354, v279) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v355
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v355, v280) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v356
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v356, v281) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v357
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v358,) {}
output:  v359
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v359, v282) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v360
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v360, v283) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v361
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v361, v284) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v362
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v363,) {}
output:  v364
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v364, v285) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v365
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v365, v286) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v366
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v366, v287) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v367
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v368,) {}
output:  v369
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v369, v288) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v370
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v369, v289) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v371
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v370, v290) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v372
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v372, v291) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v373
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v374,) {}
output:  v375
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v375, v292) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v376
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v376, v293) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v377
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v377, v294) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v378
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v379,) {}
output:  v380
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v380, v295) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v381
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v381, v296) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v382
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v382, v297) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v383
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v384,) {}
output:  v385
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v298, v246) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:55:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v299
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v299,) {}
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v300
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v300, v247) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v301
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v301,)
spilts:  (v302, v303)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v303, v248) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v304
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v304, v249) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v305
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v306,) {}
output:  v307
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v307, v250) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v308
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v308, v251) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:55:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v309
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v309, v252) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v310
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v311,) {}
output:  v312
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v312, v253) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v313
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v313, v254) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v314
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v314, v255) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v315
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v316,) {}
output:  v317
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v317, v256) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v318
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v317, v257) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v319
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v318, v258) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v320
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v320, v259) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v321
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v322,) {}
output:  v323
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v323, v260) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v324
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v324, v261) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v325
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v325, v262) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v326
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v327,) {}
output:  v328
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v328, v263) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v329
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v329, v264) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v330
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v330, v265) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v331
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v332,) {}
output:  v333
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v333, v266) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v334
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v334, v267) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v335
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v335, v268) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v336
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v337,) {}
output:  v338
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v338, v269) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v339
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v338, v270) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v340
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v339, v271) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 15:55:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v341
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v341, v272) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v342
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v343,) {}
output:  v344
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v344, v273) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v345
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v345, v274) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v346
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v346, v275) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v347
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v348,) {}
output:  v349
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v349, v276) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v350
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v350, v277) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v351
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v351, v278) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v352
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v353,) {}
output:  v354
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v354, v279) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v355
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v355, v280) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v356
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v356, v281) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v357
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v358,) {}
output:  v359
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v359, v282) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v360
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v360, v283) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v361
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v361, v284) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v362
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v363,) {}
output:  v364
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v364, v285) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v365
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v365, v286) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v366
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v366, v287) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v367
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v368,) {}
output:  v369
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v369, v288) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v370
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v369, v289) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v371
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v370, v290) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v372
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v372, v291) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v373
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v374,) {}
output:  v375
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v375, v292) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v376
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v376, v293) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v377
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v377, v294) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v378
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v379,) {}
output:  v380
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v380, v295) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v381
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v381, v296) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v382
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v382, v297) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v383
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v384,) {}
output:  v385
Processing basic block Tue Jun 11 15:55:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 52.901745 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:55:53 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv243_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split244_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v490, v438) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v491
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v491,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v492
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v492, v439) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v493
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v493,)
spilts:  (v494, v495)
MULTIOUTPUT size:  (1, 128, 56, 56)
MULTIOUTPUT size:  (1, 256, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v494, v440) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v496
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v496, v441) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v497
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v498,) {}
output:  v499
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v499, v442) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v500
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v500, v443) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v501
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v501, v444) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v502
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v503,) {}
output:  v504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v504, v445) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v505
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v505, v446) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v506
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v506, v447) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v507
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v508,) {}
output:  v509
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v509, v448) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v510
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v509, v449) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v511
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v510, v450) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v512
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v512, v451) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v513
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v514,) {}
output:  v515
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v515, v452) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v516
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v516, v453) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v517
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v517, v454) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v518
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v519,) {}
output:  v520
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v520, v455) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v521
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v521, v456) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v522
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v522, v457) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v523
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v524,) {}
output:  v525
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v525, v458) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v526
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v526, v459) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
Compiled 200000 lines at Tue Jun 11 15:56:00 2024
output:  v527
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v527, v460) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v528
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v529,) {}
output:  v530
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v530, v461) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v531
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v530, v462) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v532
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v531, v463) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v533
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v533, v464) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v534
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v535,) {}
output:  v536
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v536, v465) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v537
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v537, v466) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v538
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v538, v467) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v539
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v540,) {}
output:  v541
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v541, v468) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v542
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v542, v469) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v543
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v543, v470) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v544
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v545,) {}
output:  v546
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v546, v471) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v547
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v547, v472) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v548
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v548, v473) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v549
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v550,) {}
output:  v551
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v551, v474) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v552
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v552, v475) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v553
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v553, v476) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v554
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v555,) {}
output:  v556
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v556, v477) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v557
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v557, v478) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v558
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v558, v479) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v559
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v560,) {}
output:  v561
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v561, v480) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v562
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v561, v481) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v563
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v562, v482) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v564
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v564, v483) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v565
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v566,) {}
output:  v567
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v567, v484) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v568
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v568, v485) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v569
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v569, v486) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v570
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v571,) {}
output:  v572
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v572, v487) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v573
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v573, v488) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v574
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v574, v489) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v575
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v576,) {}
output:  v577
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v490, v438) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:56:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:56:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v491
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v491,) {}
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v492
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v492, v439) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v493
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v493,)
spilts:  (v494, v495)
MULTIOUTPUT size:  (1, 128, 56, 56)
MULTIOUTPUT size:  (1, 256, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v494, v440) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v496
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v496, v441) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v497
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v498,) {}
output:  v499
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v499, v442) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v500
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v500, v443) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v501
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v501, v444) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v502
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v503,) {}
output:  v504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v504, v445) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v505
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v505, v446) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v506
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v506, v447) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:56:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v507
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v508,) {}
output:  v509
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v509, v448) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v510
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v509, v449) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v511
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v510, v450) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v512
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v512, v451) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v513
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v514,) {}
output:  v515
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v515, v452) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v516
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v516, v453) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v517
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v517, v454) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v518
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v519,) {}
output:  v520
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v520, v455) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v521
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v521, v456) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v522
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v522, v457) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v523
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v524,) {}
output:  v525
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v525, v458) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v526
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v526, v459) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v527
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v527, v460) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v528
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v529,) {}
output:  v530
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v530, v461) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v531
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v530, v462) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v532
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v531, v463) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v533
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v533, v464) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v534
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v535,) {}
output:  v536
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v536, v465) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v537
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v537, v466) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 15:56:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v538
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v538, v467) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v539
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v540,) {}
output:  v541
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v541, v468) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v542
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v542, v469) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v543
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v543, v470) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v544
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v545,) {}
output:  v546
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v546, v471) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v547
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v547, v472) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v548
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v548, v473) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v549
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v550,) {}
output:  v551
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v551, v474) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v552
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v552, v475) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v553
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v553, v476) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v554
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v555,) {}
output:  v556
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v556, v477) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v557
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v557, v478) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v558
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v558, v479) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v559
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v560,) {}
output:  v561
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v561, v480) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v562
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v561, v481) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v563
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v562, v482) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 15:56:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v564
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v564, v483) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v565
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v566,) {}
output:  v567
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v567, v484) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v568
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v568, v485) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v569
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v569, v486) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v570
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v571,) {}
output:  v572
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v572, v487) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v573
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v573, v488) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v574
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v574, v489) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v575
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v576,) {}
output:  v577
Processing basic block Tue Jun 11 15:56:04 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.686049 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:56:14 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v684, v631) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v685
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v685,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v686
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v686, v632) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v687
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v686, v633) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v688
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v687, v634) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v689
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v689, v635) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v690
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v691,) {}
output:  v692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v692, v636) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v693
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v693, v637) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v694
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v694, v638) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v695
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v696,) {}
output:  v697
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v697, v639) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v698
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v698, v640) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v699
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v699, v641) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v700
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v701,) {}
output:  v702
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v702, v642) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v703
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v702, v643) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v704
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v703, v644) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v705
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v705, v645) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v706
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v707,) {}
output:  v708
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v708, v646) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v709
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v709, v647) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v710
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v710, v648) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v711
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v712,) {}
output:  v713
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v713, v649) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v714
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v714, v650) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v715
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v715, v651) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v716
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v717,) {}
output:  v718
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v718, v652) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v719
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v719, v653) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v720
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v720, v654) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v721
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v722,) {}
output:  v723
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v723, v655) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v724
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v723, v656) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v725
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v724, v657) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v726
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v726, v658) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v727
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v728,) {}
output:  v729
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v729, v659) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v730
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v730, v660) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v731
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v731, v661) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v732
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v733,) {}
output:  v734
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v734, v662) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v735
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v735, v663) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v736
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v736, v664) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v737
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v738,) {}
output:  v739
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v739, v665) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v740
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v740, v666) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v741
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v741, v667) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v742
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v743,) {}
output:  v744
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v744, v668) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v745
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v745, v669) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v746
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v746, v670) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v747
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v748,) {}
output:  v749
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v749, v671) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v750
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v750, v672) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v751
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v751, v673) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v752
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v753,) {}
output:  v754
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v754, v674) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v755
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v754, v675) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v756
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v755, v676) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v757
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v757, v677) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v758
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v759,) {}
output:  v760
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v760, v678) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v761
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v761, v679) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v762
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v762, v680) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v763
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v764,) {}
output:  v765
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v765, v681) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v766
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v766, v682) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v767
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v767, v683) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v768
NOSTAND
Compiled 300000 lines at Tue Jun 11 15:56:21 2024
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v769,) {}
output:  v770
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v684, v631) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:56:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:56:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v685
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v685,) {}
Processing basic block Tue Jun 11 15:56:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v686
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v686, v632) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v687
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v686, v633) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v688
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v687, v634) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v689
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v689, v635) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v690
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v691,) {}
output:  v692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v692, v636) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v693
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v693, v637) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v694
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v694, v638) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v695
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v696,) {}
output:  v697
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v697, v639) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v698
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v698, v640) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v699
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v699, v641) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v700
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v701,) {}
output:  v702
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v702, v642) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v703
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v702, v643) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v704
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v703, v644) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v705
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v705, v645) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v706
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v707,) {}
output:  v708
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v708, v646) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v709
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v709, v647) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v710
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v710, v648) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v711
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v712,) {}
output:  v713
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v713, v649) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v714
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v714, v650) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v715
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v715, v651) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v716
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v717,) {}
output:  v718
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v718, v652) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v719
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v719, v653) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:56:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v720
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v720, v654) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v721
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v722,) {}
output:  v723
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v723, v655) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v724
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v723, v656) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v725
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v724, v657) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v726
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v726, v658) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v727
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v728,) {}
output:  v729
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v729, v659) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v730
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v730, v660) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v731
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v731, v661) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v732
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v733,) {}
output:  v734
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v734, v662) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v735
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v735, v663) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v736
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v736, v664) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v737
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v738,) {}
output:  v739
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v739, v665) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v740
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v740, v666) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v741
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v741, v667) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v742
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v743,) {}
output:  v744
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v744, v668) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v745
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v745, v669) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v746
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v746, v670) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v747
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v748,) {}
output:  v749
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v749, v671) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v750
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v750, v672) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v751
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v751, v673) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v752
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v753,) {}
output:  v754
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v754, v674) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v755
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v754, v675) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v756
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v755, v676) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v757
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v757, v677) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v758
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v759,) {}
output:  v760
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v760, v678) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v761
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v761, v679) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v762
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v762, v680) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v763
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v764,) {}
output:  v765
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v765, v681) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v766
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v766, v682) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v767
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v767, v683) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v768
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v769,) {}
output:  v770
Processing basic block Tue Jun 11 15:56:24 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.997972 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:56:34 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv281_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv281_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v877, v824) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v878
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v878,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v879
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v879, v825) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v880
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v879, v826) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v881
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v880, v827) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v882
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v882, v828) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v883
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v884,) {}
output:  v885
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v885, v829) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v886
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v886, v830) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v887
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v887, v831) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v888
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v889,) {}
output:  v890
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v890, v832) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v891
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v891, v833) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v892
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v892, v834) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v893
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v894,) {}
output:  v895
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v895, v835) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v896
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v895, v836) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v897
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v896, v837) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v898
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v898, v838) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v899
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v900,) {}
output:  v901
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v901, v839) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v902
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v902, v840) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v903
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v903, v841) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v904
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v905,) {}
output:  v906
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v906, v842) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v907
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v907, v843) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v908
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v908, v844) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v909
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v910,) {}
output:  v911
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v911, v845) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v912
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v912, v846) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v913
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v913, v847) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v914
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v915,) {}
output:  v916
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v916, v848) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v917
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v916, v849) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v918
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v917, v850) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v919
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v919, v851) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v920
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v921,) {}
output:  v922
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v922, v852) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v923
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v923, v853) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v924
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v924, v854) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v925
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v926,) {}
output:  v927
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v927, v855) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v928
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v928, v856) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v929
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v929, v857) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v930
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v931,) {}
output:  v932
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v932, v858) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v933
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v933, v859) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v934
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v934, v860) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v935
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v936,) {}
output:  v937
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v937, v861) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v938
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v938, v862) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v939
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v939, v863) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v940
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v941,) {}
output:  v942
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v942, v864) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v943
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v943, v865) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v944
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v944, v866) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v945
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v946,) {}
output:  v947
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v947, v867) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v948
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v947, v868) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v949
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v948, v869) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v950
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v950, v870) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v951
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v952,) {}
output:  v953
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v953, v871) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v954
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v954, v872) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v955
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v955, v873) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v956
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v957,) {}
output:  v958
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v958, v874) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v959
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v959, v875) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v960
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v960, v876) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v961
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v962,) {}
output:  v963
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v877, v824) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v878
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v878,) {}
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v879
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v879, v825) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v880
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v879, v826) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v881
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v880, v827) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v882
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v882, v828) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v883
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v884,) {}
output:  v885
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v885, v829) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v886
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v886, v830) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v887
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v887, v831) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v888
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v889,) {}
output:  v890
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v890, v832) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v891
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v891, v833) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v892
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v892, v834) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v893
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v894,) {}
output:  v895
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v895, v835) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v896
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v895, v836) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v897
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v896, v837) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v898
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v898, v838) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Compiled 400000 lines at Tue Jun 11 15:56:42 2024
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v899
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v900,) {}
output:  v901
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v901, v839) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v902
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v902, v840) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v903
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v903, v841) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v904
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v905,) {}
output:  v906
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v906, v842) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v907
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v907, v843) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v908
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v908, v844) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v909
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v910,) {}
output:  v911
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v911, v845) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v912
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v912, v846) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v913
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v913, v847) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v914
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v915,) {}
output:  v916
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v916, v848) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v917
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v916, v849) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:56:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v918
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v917, v850) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v919
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v919, v851) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v920
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v921,) {}
output:  v922
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v922, v852) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v923
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v923, v853) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v924
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v924, v854) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v925
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v926,) {}
output:  v927
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v927, v855) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v928
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v928, v856) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v929
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v929, v857) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v930
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v931,) {}
output:  v932
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v932, v858) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v933
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v933, v859) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v934
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v934, v860) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v935
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v936,) {}
output:  v937
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v937, v861) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v938
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v938, v862) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v939
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v939, v863) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v940
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v941,) {}
output:  v942
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v942, v864) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v943
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v943, v865) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v944
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v944, v866) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v945
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v946,) {}
output:  v947
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v947, v867) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v948
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v947, v868) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v949
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v948, v869) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v950
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v950, v870) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v951
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v952,) {}
output:  v953
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v953, v871) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v954
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v954, v872) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v955
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v955, v873) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v956
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v957,) {}
output:  v958
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v958, v874) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v959
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v959, v875) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v960
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v960, v876) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v961
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v962,) {}
output:  v963
Processing basic block Tue Jun 11 15:56:44 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.986052 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:56:54 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv284_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv284_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1070, v1017) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v1071
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1071,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1072
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1072, v1018) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v1073
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1072, v1019) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v1074
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1073, v1020) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1075
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1075, v1021) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1076
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1077,) {}
output:  v1078
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1078, v1022) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1079
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1079, v1023) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1080
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1080, v1024) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1081
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1082,) {}
output:  v1083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1083, v1025) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1084
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1084, v1026) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1085
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1085, v1027) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1086
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1087,) {}
output:  v1088
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1088, v1028) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v1089
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1088, v1029) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v1090
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1089, v1030) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v1091
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1091, v1031) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1092
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1093,) {}
output:  v1094
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1094, v1032) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1095
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1095, v1033) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1096
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1096, v1034) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1097
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1098,) {}
output:  v1099
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1099, v1035) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1100
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1100, v1036) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1101
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1101, v1037) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1102
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1103,) {}
output:  v1104
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1104, v1038) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1105
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v1105, v1039) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v1106
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1106, v1040) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1107
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1108,) {}
output:  v1109
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1109, v1041) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v1110
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1109, v1042) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v1111
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1110, v1043) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v1112
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1112, v1044) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1113
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1114,) {}
output:  v1115
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1115, v1045) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1116, v1046) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1117, v1047) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1118
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1119,) {}
output:  v1120
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1120, v1048) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1121
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1121, v1049) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1122
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1122, v1050) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1123
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1124,) {}
output:  v1125
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1125, v1051) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1126
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1126, v1052) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1127
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1127, v1053) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1128
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1129,) {}
output:  v1130
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1130, v1054) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1131
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1131, v1055) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1132
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1132, v1056) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1133
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1134,) {}
output:  v1135
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1135, v1057) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1136
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1136, v1058) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1137
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1137, v1059) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1138
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1139,) {}
output:  v1140
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1140, v1060) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v1141
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1140, v1061) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1142
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1141, v1062) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v1143
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1143, v1063) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1144
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1145,) {}
output:  v1146
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1146, v1064) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1147
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1147, v1065) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1148
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1148, v1066) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1149
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1150,) {}
output:  v1151
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1151, v1067) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1152
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1152, v1068) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1153
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1153, v1069) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1154
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1155,) {}
output:  v1156
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1070, v1017) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:57:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:57:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v1071
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1071,) {}
Processing basic block Tue Jun 11 15:57:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1072
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1072, v1018) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v1073
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1072, v1019) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v1074
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1073, v1020) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v1075
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1075, v1021) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v1076
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1077,) {}
output:  v1078
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1078, v1022) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v1079
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1079, v1023) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v1080
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1080, v1024) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v1081
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1082,) {}
output:  v1083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1083, v1025) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v1084
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1084, v1026) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v1085
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1085, v1027) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v1086
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1087,) {}
output:  v1088
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1088, v1028) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v1089
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1088, v1029) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v1090
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1089, v1030) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v1091
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1091, v1031) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v1092
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1093,) {}
output:  v1094
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1094, v1032) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v1095
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1095, v1033) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v1096
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1096, v1034) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v1097
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1098,) {}
output:  v1099
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1099, v1035) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v1100
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1100, v1036) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v1101
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1101, v1037) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v1102
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1103,) {}
output:  v1104
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1104, v1038) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v1105
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v1105, v1039) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v1106
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1106, v1040) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v1107
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1108,) {}
output:  v1109
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1109, v1041) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v1110
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1109, v1042) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v1111
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1110, v1043) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v1112
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1112, v1044) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v1113
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1114,) {}
output:  v1115
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1115, v1045) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v1116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1116, v1046) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v1117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1117, v1047) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v1118
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1119,) {}
output:  v1120
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1120, v1048) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v1121
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1121, v1049) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Compiled 500000 lines at Tue Jun 11 15:57:02 2024
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v1122
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1122, v1050) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v1123
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1124,) {}
output:  v1125
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1125, v1051) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v1126
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1126, v1052) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v1127
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1127, v1053) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v1128
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1129,) {}
output:  v1130
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1130, v1054) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v1131
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1131, v1055) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v1132
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1132, v1056) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v1133
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1134,) {}
output:  v1135
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1135, v1057) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v1136
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1136, v1058) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v1137
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1137, v1059) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v1138
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1139,) {}
output:  v1140
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1140, v1060) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v1141
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1140, v1061) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v1142
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1141, v1062) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v1143
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1143, v1063) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v1144
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1145,) {}
output:  v1146
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1146, v1064) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v1147
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1147, v1065) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v1148
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1148, v1066) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v1149
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1150,) {}
output:  v1151
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1151, v1067) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v1152
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1152, v1068) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v1153
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1153, v1069) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:57:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v1154
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1155,) {}
output:  v1156
Processing basic block Tue Jun 11 15:57:04 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.692797 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:57:13 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv267_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv267_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1263, v1210) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v1264
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1264,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1265
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1265, v1211) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v1266
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1265, v1212) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v1267
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v1266, v1213) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v1268
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1268, v1214) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1269
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1270,) {}
output:  v1271
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1271, v1215) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1272
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1272, v1216) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1273
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1273, v1217) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1274
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1275,) {}
output:  v1276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1276, v1218) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1277
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1277, v1219) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1278
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1278, v1220) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1279
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1280,) {}
output:  v1281
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1281, v1221) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v1282
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1281, v1222) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v1283
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1282, v1223) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v1284
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1284, v1224) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1285
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1286,) {}
output:  v1287
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1287, v1225) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1288
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1288, v1226) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1289
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1289, v1227) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1290
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1291,) {}
output:  v1292
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1292, v1228) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1293
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1293, v1229) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1294
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1294, v1230) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1295
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1296,) {}
output:  v1297
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1297, v1231) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1298
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1298, v1232) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1299
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1299, v1233) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1300
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1301,) {}
output:  v1302
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1302, v1234) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v1303
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1302, v1235) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v1304
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1303, v1236) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v1305
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1305, v1237) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1306
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1307,) {}
output:  v1308
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1308, v1238) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1309
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1309, v1239) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1310
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1310, v1240) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1311
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1312,) {}
output:  v1313
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1313, v1241) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1314
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1314, v1242) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1315
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1315, v1243) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1316
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1317,) {}
output:  v1318
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1318, v1244) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1319
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1319, v1245) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1320
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1320, v1246) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1321
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1322,) {}
output:  v1323
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1323, v1247) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1324
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1324, v1248) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1325
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1325, v1249) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1326
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1327,) {}
output:  v1328
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1328, v1250) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1329
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1329, v1251) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1330
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1330, v1252) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1331
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1332,) {}
output:  v1333
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1333, v1253) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v1334
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1333, v1254) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1335
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1334, v1255) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v1336
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1336, v1256) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1337
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1338,) {}
output:  v1339
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1339, v1257) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1340
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1340, v1258) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1341
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1341, v1259) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1342
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1343,) {}
output:  v1344
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1344, v1260) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1345
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1345, v1261) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1346
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1346, v1262) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1347
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1348,) {}
output:  v1349
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1263, v1210) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v1264
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1264,) {}
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1265
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1265, v1211) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v1266
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1265, v1212) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v1267
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v1266, v1213) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v1268
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1268, v1214) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v1269
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1270,) {}
output:  v1271
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1271, v1215) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v1272
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1272, v1216) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v1273
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1273, v1217) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v1274
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1275,) {}
output:  v1276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1276, v1218) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v1277
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1277, v1219) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v1278
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1278, v1220) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v1279
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1280,) {}
output:  v1281
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1281, v1221) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v1282
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1281, v1222) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v1283
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1282, v1223) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v1284
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1284, v1224) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v1285
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1286,) {}
output:  v1287
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1287, v1225) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v1288
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1288, v1226) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v1289
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1289, v1227) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v1290
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1291,) {}
output:  v1292
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1292, v1228) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v1293
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1293, v1229) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v1294
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1294, v1230) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v1295
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1296,) {}
output:  v1297
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1297, v1231) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v1298
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1298, v1232) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v1299
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1299, v1233) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v1300
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1301,) {}
output:  v1302
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1302, v1234) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v1303
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1302, v1235) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v1304
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1303, v1236) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v1305
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1305, v1237) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v1306
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1307,) {}
output:  v1308
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1308, v1238) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v1309
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1309, v1239) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v1310
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1310, v1240) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v1311
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1312,) {}
output:  v1313
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1313, v1241) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v1314
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1314, v1242) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v1315
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1315, v1243) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v1316
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1317,) {}
output:  v1318
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1318, v1244) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v1319
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1319, v1245) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v1320
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1320, v1246) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v1321
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1322,) {}
output:  v1323
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1323, v1247) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v1324
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1324, v1248) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v1325
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1325, v1249) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v1326
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1327,) {}
output:  v1328
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1328, v1250) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v1329
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1329, v1251) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v1330
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1330, v1252) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v1331
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1332,) {}
output:  v1333
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1333, v1253) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v1334
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1333, v1254) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v1335
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1334, v1255) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v1336
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1336, v1256) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:57:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v1337
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1338,) {}
output:  v1339
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1339, v1257) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v1340
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1340, v1258) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v1341
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1341, v1259) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v1342
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1343,) {}
Compiled 600000 lines at Tue Jun 11 15:57:23 2024
output:  v1344
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1344, v1260) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v1345
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1345, v1261) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v1346
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1346, v1262) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v1347
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1348,) {}
output:  v1349
Processing basic block Tue Jun 11 15:57:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.551342 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:57:33 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv274_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv274_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1456, v1403) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v1457
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1457,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1458
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1458, v1404) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v1459
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1458, v1405) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v1460
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1459, v1406) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1461
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1461, v1407) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1462
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1463,) {}
output:  v1464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1464, v1408) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1465
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1465, v1409) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1466
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1466, v1410) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1467
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1468,) {}
output:  v1469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1469, v1411) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1470
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v1470, v1412) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v1471
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1471, v1413) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1472
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1473,) {}
output:  v1474
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1474, v1414) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v1475
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1474, v1415) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v1476
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1475, v1416) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v1477
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1477, v1417) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1478
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1479,) {}
output:  v1480
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1480, v1418) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1481
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1481, v1419) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1482
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1482, v1420) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1483
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1484,) {}
output:  v1485
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1485, v1421) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1486
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1486, v1422) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1487
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1487, v1423) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1488
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1489,) {}
output:  v1490
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1490, v1424) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1491
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1491, v1425) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1492
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1492, v1426) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1493
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1494,) {}
output:  v1495
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1495, v1427) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v1496
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1495, v1428) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v1497
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1496, v1429) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v1498
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1498, v1430) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1499
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1500,) {}
output:  v1501
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1501, v1431) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1502
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1502, v1432) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1503
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1503, v1433) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1504
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1505,) {}
output:  v1506
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1506, v1434) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1507
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1507, v1435) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1508
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1508, v1436) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1509
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1510,) {}
output:  v1511
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1511, v1437) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1512
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1512, v1438) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1513
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1513, v1439) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1514
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1515,) {}
output:  v1516
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1516, v1440) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1517
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1517, v1441) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1518
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1518, v1442) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1519
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1520,) {}
output:  v1521
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1521, v1443) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1522
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1522, v1444) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1523
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1523, v1445) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1524
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1525,) {}
output:  v1526
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1526, v1446) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v1527
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1526, v1447) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1528
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1527, v1448) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v1529
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1529, v1449) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1530
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1531,) {}
output:  v1532
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1532, v1450) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1533
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1533, v1451) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1534
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1534, v1452) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1535
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1536,) {}
output:  v1537
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1537, v1453) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1538
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1538, v1454) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1539
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1539, v1455) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1540
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1541,) {}
output:  v1542
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1456, v1403) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:57:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:57:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v1457
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1457,) {}
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1458
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1458, v1404) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v1459
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1458, v1405) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v1460
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1459, v1406) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v1461
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1461, v1407) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v1462
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1463,) {}
output:  v1464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1464, v1408) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v1465
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1465, v1409) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v1466
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1466, v1410) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v1467
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1468,) {}
output:  v1469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1469, v1411) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v1470
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v1470, v1412) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v1471
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1471, v1413) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v1472
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1473,) {}
output:  v1474
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1474, v1414) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v1475
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1474, v1415) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:57:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v1476
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1475, v1416) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v1477
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1477, v1417) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v1478
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1479,) {}
output:  v1480
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1480, v1418) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v1481
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1481, v1419) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v1482
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1482, v1420) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v1483
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1484,) {}
output:  v1485
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1485, v1421) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v1486
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1486, v1422) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v1487
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1487, v1423) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v1488
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1489,) {}
output:  v1490
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1490, v1424) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v1491
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1491, v1425) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v1492
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1492, v1426) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v1493
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1494,) {}
output:  v1495
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1495, v1427) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v1496
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1495, v1428) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v1497
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1496, v1429) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v1498
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1498, v1430) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v1499
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1500,) {}
output:  v1501
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1501, v1431) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v1502
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1502, v1432) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v1503
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1503, v1433) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:57:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v1504
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1505,) {}
output:  v1506
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1506, v1434) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v1507
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1507, v1435) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v1508
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1508, v1436) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v1509
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1510,) {}
output:  v1511
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1511, v1437) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v1512
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1512, v1438) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v1513
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1513, v1439) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v1514
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1515,) {}
output:  v1516
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1516, v1440) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v1517
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1517, v1441) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v1518
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1518, v1442) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v1519
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1520,) {}
output:  v1521
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1521, v1443) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v1522
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1522, v1444) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v1523
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1523, v1445) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v1524
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1525,) {}
output:  v1526
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1526, v1446) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v1527
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1526, v1447) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v1528
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1527, v1448) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v1529
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1529, v1449) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v1530
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1531,) {}
output:  v1532
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1532, v1450) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v1533
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1533, v1451) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v1534
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1534, v1452) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:57:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v1535
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1536,) {}
output:  v1537
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1537, v1453) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:57:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v1538
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1538, v1454) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:57:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:57:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:57:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v1539
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1539, v1455) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:57:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:57:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v1540
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1541,) {}
output:  v1542
Processing basic block Tue Jun 11 15:57:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.999641 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:57:53 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv271_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv271_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
Compiled 700000 lines at Tue Jun 11 15:57:55 2024
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1649, v1596) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v1650
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1650,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1651
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1651, v1597) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v1652
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1651, v1598) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v1653
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1652, v1599) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1654
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1654, v1600) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1655
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1656,) {}
output:  v1657
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1657, v1601) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1658
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v1658, v1602) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v1659
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1659, v1603) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1660
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1661,) {}
output:  v1662
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1662, v1604) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1663
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1663, v1605) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1664
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1664, v1606) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1665
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1666,) {}
output:  v1667
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1667, v1607) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v1668
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1667, v1608) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v1669
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1668, v1609) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v1670
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1670, v1610) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1671
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1672,) {}
output:  v1673
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1673, v1611) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1674
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1674, v1612) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1675
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1675, v1613) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1676
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1677,) {}
output:  v1678
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1678, v1614) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1679
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1679, v1615) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1680
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1680, v1616) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1681
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1682,) {}
output:  v1683
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1683, v1617) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1684
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1684, v1618) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1685
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1685, v1619) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1686
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1687,) {}
output:  v1688
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1688, v1620) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v1689
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1688, v1621) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v1690
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1689, v1622) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v1691
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1691, v1623) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1692
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1693,) {}
output:  v1694
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1694, v1624) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1695
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1695, v1625) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1696, v1626) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1697
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1698,) {}
output:  v1699
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1699, v1627) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1700
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1700, v1628) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1701
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1701, v1629) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1702
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1703,) {}
output:  v1704
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1704, v1630) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1705
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1705, v1631) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1706
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1706, v1632) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1707
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1708,) {}
output:  v1709
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1709, v1633) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1710
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1710, v1634) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1711
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1711, v1635) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1712
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1713,) {}
output:  v1714
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1714, v1636) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1715
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1715, v1637) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1716
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1716, v1638) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1717
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1718,) {}
output:  v1719
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1719, v1639) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v1720
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1719, v1640) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1721
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1720, v1641) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v1722
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1722, v1642) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1723
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1724,) {}
output:  v1725
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1725, v1643) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1726
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1726, v1644) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1727
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1727, v1645) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1728
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1729,) {}
output:  v1730
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1730, v1646) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1731
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1731, v1647) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1732
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1732, v1648) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1733
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1734,) {}
output:  v1735
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1649, v1596) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:57:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:57:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v1650
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1650,) {}
Processing basic block Tue Jun 11 15:57:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1651
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1651, v1597) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v1652
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1651, v1598) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v1653
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1652, v1599) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v1654
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1654, v1600) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v1655
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1656,) {}
output:  v1657
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1657, v1601) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v1658
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v1658, v1602) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v1659
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1659, v1603) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v1660
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1661,) {}
output:  v1662
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1662, v1604) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v1663
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1663, v1605) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v1664
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1664, v1606) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v1665
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1666,) {}
output:  v1667
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1667, v1607) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v1668
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1667, v1608) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v1669
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1668, v1609) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v1670
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1670, v1610) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v1671
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1672,) {}
output:  v1673
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1673, v1611) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v1674
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1674, v1612) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v1675
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1675, v1613) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v1676
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1677,) {}
output:  v1678
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1678, v1614) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v1679
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1679, v1615) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:58:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v1680
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1680, v1616) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v1681
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1682,) {}
output:  v1683
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1683, v1617) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v1684
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1684, v1618) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v1685
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1685, v1619) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v1686
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1687,) {}
output:  v1688
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1688, v1620) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v1689
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1688, v1621) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v1690
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1689, v1622) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v1691
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1691, v1623) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v1692
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1693,) {}
output:  v1694
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1694, v1624) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v1695
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1695, v1625) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v1696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1696, v1626) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v1697
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1698,) {}
output:  v1699
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1699, v1627) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v1700
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1700, v1628) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v1701
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1701, v1629) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v1702
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1703,) {}
output:  v1704
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1704, v1630) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v1705
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1705, v1631) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v1706
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1706, v1632) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:58:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v1707
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1708,) {}
output:  v1709
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1709, v1633) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v1710
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1710, v1634) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v1711
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1711, v1635) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v1712
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1713,) {}
output:  v1714
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1714, v1636) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v1715
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1715, v1637) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v1716
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1716, v1638) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v1717
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1718,) {}
output:  v1719
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1719, v1639) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v1720
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1719, v1640) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v1721
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1720, v1641) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v1722
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1722, v1642) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v1723
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1724,) {}
output:  v1725
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1725, v1643) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v1726
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1726, v1644) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v1727
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1727, v1645) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v1728
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1729,) {}
output:  v1730
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1730, v1646) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v1731
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1731, v1647) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v1732
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1732, v1648) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:58:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v1733
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1734,) {}
output:  v1735
Processing basic block Tue Jun 11 15:58:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.653458 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:58:12 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv310_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv310_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1842, v1789) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v1843
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1843,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1844
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1844, v1790) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v1845
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1844, v1791) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v1846
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1845, v1792) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1847, v1793) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1848
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1849,) {}
output:  v1850
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1850, v1794) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1851
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1851, v1795) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1852
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1852, v1796) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1853
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1854,) {}
output:  v1855
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1855, v1797) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v1856
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1856, v1798) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v1857
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1857, v1799) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v1858
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1859,) {}
output:  v1860
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1860, v1800) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v1861
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1860, v1801) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v1862
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v1861, v1802) {}
256 256 (1, 256, 56, 56) (256, 16, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 16, 3, 3)
output:  v1863
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1863, v1803) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1864
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1865,) {}
output:  v1866
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1866, v1804) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1867
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1867, v1805) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1868
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1868, v1806) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1869
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1870,) {}
output:  v1871
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1871, v1807) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1872
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1872, v1808) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1873
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1873, v1809) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1874
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1875,) {}
output:  v1876
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1876, v1810) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v1877
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1877, v1811) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v1878
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1878, v1812) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v1879
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1880,) {}
output:  v1881
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1881, v1813) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v1882
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1881, v1814) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v1883
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1882, v1815) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v1884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1884, v1816) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1885
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1886,) {}
output:  v1887
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1887, v1817) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1888
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1888, v1818) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1889
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1889, v1819) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1890
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1891,) {}
output:  v1892
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1892, v1820) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1893
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1893, v1821) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1894
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1894, v1822) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1895
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1896,) {}
output:  v1897
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1897, v1823) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1898
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1898, v1824) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1899
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1899, v1825) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1900
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1901,) {}
output:  v1902
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1902, v1826) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1903
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1903, v1827) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1904
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1904, v1828) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
Compiled 800000 lines at Tue Jun 11 15:58:18 2024
output:  v1905
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1906,) {}
output:  v1907
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1907, v1829) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v1908
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1908, v1830) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v1909
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1909, v1831) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v1910
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1911,) {}
output:  v1912
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1912, v1832) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v1913
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1912, v1833) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1914
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1913, v1834) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v1915
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1915, v1835) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1916
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1917,) {}
output:  v1918
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1918, v1836) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1919
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1919, v1837) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1920
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1920, v1838) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1921
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1922,) {}
output:  v1923
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1923, v1839) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v1924
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1924, v1840) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v1925
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1925, v1841) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v1926
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1927,) {}
output:  v1928
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v1842, v1789) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v1843
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v1843,) {}
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v1844
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1844, v1790) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v1845
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1844, v1791) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v1846
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1845, v1792) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v1847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1847, v1793) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v1848
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1849,) {}
output:  v1850
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1850, v1794) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v1851
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1851, v1795) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v1852
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1852, v1796) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v1853
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1854,) {}
output:  v1855
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1855, v1797) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v1856
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1856, v1798) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v1857
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1857, v1799) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:58:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v1858
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1859,) {}
output:  v1860
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1860, v1800) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v1861
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1860, v1801) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v1862
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v1861, v1802) {}
256 16 (1, 256, 56, 56) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v1863
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1863, v1803) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v1864
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1865,) {}
output:  v1866
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1866, v1804) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v1867
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1867, v1805) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v1868
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1868, v1806) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v1869
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1870,) {}
output:  v1871
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1871, v1807) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v1872
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1872, v1808) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v1873
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1873, v1809) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v1874
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1875,) {}
output:  v1876
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1876, v1810) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v1877
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1877, v1811) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v1878
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1878, v1812) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v1879
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1880,) {}
output:  v1881
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1881, v1813) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v1882
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1881, v1814) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v1883
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1882, v1815) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v1884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1884, v1816) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v1885
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1886,) {}
output:  v1887
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1887, v1817) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v1888
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1888, v1818) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v1889
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1889, v1819) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v1890
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1891,) {}
output:  v1892
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1892, v1820) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v1893
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1893, v1821) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v1894
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1894, v1822) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v1895
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1896,) {}
output:  v1897
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1897, v1823) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v1898
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1898, v1824) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v1899
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1899, v1825) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v1900
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1901,) {}
output:  v1902
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1902, v1826) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v1903
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1903, v1827) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v1904
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1904, v1828) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v1905
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1906,) {}
output:  v1907
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1907, v1829) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v1908
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1908, v1830) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v1909
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1909, v1831) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v1910
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1911,) {}
output:  v1912
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1912, v1832) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v1913
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v1912, v1833) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v1914
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v1913, v1834) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v1915
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1915, v1835) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v1916
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1917,) {}
output:  v1918
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1918, v1836) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v1919
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1919, v1837) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:58:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v1920
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1920, v1838) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v1921
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1922,) {}
output:  v1923
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1923, v1839) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v1924
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v1924, v1840) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v1925
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v1925, v1841) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v1926
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v1927,) {}
output:  v1928
Processing basic block Tue Jun 11 15:58:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.393509 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:58:32 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv300_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv300_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2035, v1982) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v2036
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2036,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2037
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2037, v1983) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v2038
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2037, v1984) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v2039
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2038, v1985) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2040
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2040, v1986) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2041
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2042,) {}
output:  v2043
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2043, v1987) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2044
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2044, v1988) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2045
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2045, v1989) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2046
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2047,) {}
output:  v2048
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2048, v1990) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2049
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2049, v1991) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2050
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2050, v1992) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2051
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2052,) {}
output:  v2053
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2053, v1993) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v2054
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2053, v1994) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v2055
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2054, v1995) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v2056
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2056, v1996) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2057
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2058,) {}
output:  v2059
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2059, v1997) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2060
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2060, v1998) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2061
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2061, v1999) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2062
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2063,) {}
output:  v2064
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2064, v2000) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2065
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2065, v2001) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2066
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2066, v2002) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2067
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2068,) {}
output:  v2069
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2069, v2003) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2070
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2070, v2004) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2071
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2071, v2005) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2072
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2073,) {}
output:  v2074
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2074, v2006) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v2075
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2074, v2007) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v2076
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2075, v2008) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v2077
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2077, v2009) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2078
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2079,) {}
output:  v2080
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2080, v2010) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2081
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2081, v2011) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2082
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2082, v2012) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2083
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2084,) {}
output:  v2085
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2085, v2013) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2086
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2086, v2014) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2087
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2087, v2015) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2088
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2089,) {}
output:  v2090
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2090, v2016) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2091
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2091, v2017) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2092
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2092, v2018) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2093
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2094,) {}
output:  v2095
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2095, v2019) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2096
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2096, v2020) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2097
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2097, v2021) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2098
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2099,) {}
output:  v2100
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2100, v2022) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2101
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2101, v2023) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v2102
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2102, v2024) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2103
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2104,) {}
output:  v2105
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2105, v2025) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v2106
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2105, v2026) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2107
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2106, v2027) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v2108
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2108, v2028) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2109
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2110,) {}
output:  v2111
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2111, v2029) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2112
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2112, v2030) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2113
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2113, v2031) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2114
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2115,) {}
output:  v2116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2116, v2032) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2117, v2033) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2118
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2118, v2034) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2119
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2120,) {}
output:  v2121
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2035, v1982) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:58:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:58:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v2036
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2036,) {}
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2037
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2037, v1983) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v2038
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2037, v1984) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v2039
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2038, v1985) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v2040
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2040, v1986) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v2041
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2042,) {}
output:  v2043
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2043, v1987) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v2044
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2044, v1988) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v2045
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2045, v1989) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v2046
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2047,) {}
output:  v2048
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2048, v1990) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v2049
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2049, v1991) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v2050
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2050, v1992) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Compiled 900000 lines at Tue Jun 11 15:58:39 2024
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v2051
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2052,) {}
output:  v2053
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2053, v1993) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v2054
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2053, v1994) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v2055
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2054, v1995) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v2056
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2056, v1996) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v2057
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2058,) {}
output:  v2059
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2059, v1997) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:58:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v2060
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2060, v1998) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v2061
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2061, v1999) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v2062
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2063,) {}
output:  v2064
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2064, v2000) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v2065
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2065, v2001) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v2066
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2066, v2002) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v2067
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2068,) {}
output:  v2069
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2069, v2003) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v2070
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2070, v2004) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v2071
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2071, v2005) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v2072
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2073,) {}
output:  v2074
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2074, v2006) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v2075
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2074, v2007) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v2076
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2075, v2008) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v2077
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2077, v2009) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v2078
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2079,) {}
output:  v2080
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2080, v2010) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v2081
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2081, v2011) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v2082
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2082, v2012) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v2083
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2084,) {}
output:  v2085
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2085, v2013) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v2086
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2086, v2014) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:58:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v2087
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2087, v2015) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v2088
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2089,) {}
output:  v2090
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2090, v2016) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v2091
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2091, v2017) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v2092
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2092, v2018) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v2093
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2094,) {}
output:  v2095
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2095, v2019) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v2096
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2096, v2020) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v2097
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2097, v2021) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v2098
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2099,) {}
output:  v2100
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2100, v2022) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v2101
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2101, v2023) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v2102
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2102, v2024) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v2103
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2104,) {}
output:  v2105
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2105, v2025) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v2106
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2105, v2026) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v2107
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2106, v2027) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v2108
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2108, v2028) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v2109
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2110,) {}
output:  v2111
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2111, v2029) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v2112
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2112, v2030) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v2113
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2113, v2031) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v2114
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2115,) {}
output:  v2116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2116, v2032) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v2117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2117, v2033) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v2118
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2118, v2034) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:58:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v2119
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2120,) {}
output:  v2121
Processing basic block Tue Jun 11 15:58:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.838709 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:58:51 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv297_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv297_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2228, v2175) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v2229
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2229,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2230
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2230, v2176) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v2231
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2230, v2177) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v2232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2231, v2178) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2233, v2179) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2234
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2235,) {}
output:  v2236
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2236, v2180) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2237
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2237, v2181) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2238
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2238, v2182) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2239
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2240,) {}
output:  v2241
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2241, v2183) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2242
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2242, v2184) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2243
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2243, v2185) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2244
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2245,) {}
output:  v2246
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2246, v2186) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v2247
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2246, v2187) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v2248
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2247, v2188) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v2249
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2249, v2189) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2250
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2251,) {}
output:  v2252
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2252, v2190) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2253
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2253, v2191) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2254
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2254, v2192) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2255
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2256,) {}
output:  v2257
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2257, v2193) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2258
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2258, v2194) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2259
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2259, v2195) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2260
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2261,) {}
output:  v2262
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2262, v2196) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2263
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2263, v2197) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2264
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2264, v2198) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2265
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2266,) {}
output:  v2267
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2267, v2199) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v2268
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2267, v2200) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v2269
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2268, v2201) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v2270
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2270, v2202) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2271
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2272,) {}
output:  v2273
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2273, v2203) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2274
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2274, v2204) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2275, v2205) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2276
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2277,) {}
output:  v2278
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2278, v2206) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2279
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2279, v2207) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2280
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2280, v2208) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2281
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2282,) {}
output:  v2283
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2283, v2209) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2284
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2284, v2210) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2285
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2285, v2211) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2286
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2287,) {}
output:  v2288
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2288, v2212) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2289
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2289, v2213) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v2290
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2290, v2214) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2291
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2292,) {}
output:  v2293
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2293, v2215) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2294
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2294, v2216) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2295
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2295, v2217) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2296
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2297,) {}
output:  v2298
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2298, v2218) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v2299
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2298, v2219) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2300
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2299, v2220) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v2301
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2301, v2221) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2302
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2303,) {}
output:  v2304
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2304, v2222) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2305
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2305, v2223) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2306
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2306, v2224) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2307
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2308,) {}
output:  v2309
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2309, v2225) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2310
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2310, v2226) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2311
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2311, v2227) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2312
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2313,) {}
output:  v2314
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2228, v2175) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v2229
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2229,) {}
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2230
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2230, v2176) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v2231
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2230, v2177) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v2232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2231, v2178) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v2233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2233, v2179) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v2234
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2235,) {}
output:  v2236
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2236, v2180) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v2237
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2237, v2181) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v2238
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2238, v2182) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v2239
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2240,) {}
output:  v2241
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2241, v2183) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v2242
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2242, v2184) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v2243
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2243, v2185) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v2244
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2245,) {}
output:  v2246
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2246, v2186) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v2247
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2246, v2187) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v2248
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2247, v2188) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v2249
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2249, v2189) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v2250
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2251,) {}
output:  v2252
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2252, v2190) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v2253
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2253, v2191) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v2254
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2254, v2192) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v2255
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2256,) {}
output:  v2257
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2257, v2193) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v2258
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2258, v2194) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v2259
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2259, v2195) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v2260
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2261,) {}
output:  v2262
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2262, v2196) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v2263
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2263, v2197) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v2264
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2264, v2198) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v2265
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2266,) {}
output:  v2267
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2267, v2199) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v2268
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2267, v2200) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v2269
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2268, v2201) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v2270
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2270, v2202) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:58:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v2271
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2272,) {}
Compiled 1000000 lines at Tue Jun 11 15:59:00 2024
output:  v2273
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2273, v2203) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v2274
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2274, v2204) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v2275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2275, v2205) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v2276
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2277,) {}
output:  v2278
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2278, v2206) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v2279
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2279, v2207) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v2280
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2280, v2208) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v2281
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2282,) {}
output:  v2283
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2283, v2209) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v2284
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2284, v2210) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v2285
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2285, v2211) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v2286
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2287,) {}
output:  v2288
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2288, v2212) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v2289
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2289, v2213) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v2290
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2290, v2214) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v2291
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2292,) {}
output:  v2293
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2293, v2215) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v2294
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2294, v2216) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v2295
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2295, v2217) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v2296
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2297,) {}
output:  v2298
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2298, v2218) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:59:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v2299
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2298, v2219) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v2300
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2299, v2220) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v2301
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2301, v2221) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v2302
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2303,) {}
output:  v2304
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2304, v2222) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v2305
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2305, v2223) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v2306
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2306, v2224) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v2307
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2308,) {}
output:  v2309
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2309, v2225) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v2310
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2310, v2226) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v2311
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2311, v2227) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v2312
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2313,) {}
output:  v2314
Processing basic block Tue Jun 11 15:59:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.578833 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:59:11 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv294_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv294_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2421, v2368) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v2422
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2422,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2423
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2423, v2369) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v2424
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2423, v2370) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v2425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2424, v2371) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2426
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2426, v2372) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2427
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2428,) {}
output:  v2429
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2429, v2373) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2430
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2430, v2374) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2431
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2431, v2375) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2432
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2433,) {}
output:  v2434
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2434, v2376) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2435
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2435, v2377) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2436
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2436, v2378) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2437
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2438,) {}
output:  v2439
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2439, v2379) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v2440
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2439, v2380) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v2441
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2440, v2381) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v2442
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2442, v2382) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2443
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2444,) {}
output:  v2445
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2445, v2383) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2446
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2446, v2384) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2447
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2447, v2385) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2448
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2449,) {}
output:  v2450
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2450, v2386) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2451
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2451, v2387) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2452
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2452, v2388) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2453
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2454,) {}
output:  v2455
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2455, v2389) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2456
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2456, v2390) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2457
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2457, v2391) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2458
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2459,) {}
output:  v2460
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2460, v2392) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v2461
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2460, v2393) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v2462
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2461, v2394) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v2463
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2463, v2395) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2464
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2465,) {}
output:  v2466
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2466, v2396) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2467
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2467, v2397) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2468, v2398) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2469
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2470,) {}
output:  v2471
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2471, v2399) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2472
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2472, v2400) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2473
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2473, v2401) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2474
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2475,) {}
output:  v2476
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2476, v2402) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2477
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2477, v2403) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v2478
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2478, v2404) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2479
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2480,) {}
output:  v2481
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2481, v2405) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2482
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2482, v2406) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2483
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2483, v2407) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2484
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2485,) {}
output:  v2486
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2486, v2408) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2487
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2487, v2409) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2488
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2488, v2410) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2489
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2490,) {}
output:  v2491
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2491, v2411) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v2492
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2491, v2412) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2493
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2492, v2413) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v2494
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2494, v2414) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2495
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2496,) {}
output:  v2497
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2497, v2415) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2498
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2498, v2416) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2499
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2499, v2417) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2500
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2501,) {}
output:  v2502
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2502, v2418) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2503
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2503, v2419) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2504, v2420) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2505
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2506,) {}
output:  v2507
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2421, v2368) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v2422
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2422,) {}
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2423
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2423, v2369) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v2424
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2423, v2370) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v2425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2424, v2371) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v2426
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2426, v2372) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v2427
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2428,) {}
output:  v2429
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2429, v2373) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v2430
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2430, v2374) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v2431
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2431, v2375) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v2432
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2433,) {}
output:  v2434
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2434, v2376) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v2435
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2435, v2377) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v2436
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2436, v2378) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:59:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v2437
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2438,) {}
output:  v2439
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2439, v2379) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v2440
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2439, v2380) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v2441
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2440, v2381) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v2442
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2442, v2382) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v2443
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2444,) {}
output:  v2445
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2445, v2383) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v2446
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2446, v2384) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v2447
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2447, v2385) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v2448
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2449,) {}
output:  v2450
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2450, v2386) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v2451
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2451, v2387) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v2452
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2452, v2388) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v2453
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2454,) {}
output:  v2455
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2455, v2389) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v2456
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2456, v2390) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v2457
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2457, v2391) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v2458
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2459,) {}
output:  v2460
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2460, v2392) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v2461
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2460, v2393) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v2462
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2461, v2394) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v2463
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2463, v2395) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v2464
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2465,) {}
output:  v2466
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2466, v2396) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v2467
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2467, v2397) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v2468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2468, v2398) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v2469
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2470,) {}
output:  v2471
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2471, v2399) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v2472
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2472, v2400) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v2473
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2473, v2401) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v2474
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2475,) {}
output:  v2476
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2476, v2402) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v2477
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2477, v2403) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v2478
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2478, v2404) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v2479
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2480,) {}
output:  v2481
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2481, v2405) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v2482
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2482, v2406) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v2483
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2483, v2407) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v2484
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2485,) {}
output:  v2486
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2486, v2408) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v2487
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2487, v2409) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v2488
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2488, v2410) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v2489
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2490,) {}
output:  v2491
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2491, v2411) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v2492
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2491, v2412) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v2493
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2492, v2413) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v2494
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2494, v2414) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Compiled 1100000 lines at Tue Jun 11 15:59:20 2024
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v2495
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2496,) {}
output:  v2497
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2497, v2415) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v2498
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2498, v2416) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:59:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v2499
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2499, v2417) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v2500
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2501,) {}
output:  v2502
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2502, v2418) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v2503
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2503, v2419) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v2504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2504, v2420) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v2505
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2506,) {}
output:  v2507
Processing basic block Tue Jun 11 15:59:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.799847 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:59:31 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv291_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv291_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2614, v2561) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v2615
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2615,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2616
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2616, v2562) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v2617
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2616, v2563) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v2618
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2617, v2564) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2619
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2619, v2565) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2620
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2621,) {}
output:  v2622
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2622, v2566) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2623
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2623, v2567) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2624
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2624, v2568) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2625
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2626,) {}
output:  v2627
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2627, v2569) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2628
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2628, v2570) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2629
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2629, v2571) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2630
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2631,) {}
output:  v2632
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2632, v2572) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v2633
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2632, v2573) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v2634
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2633, v2574) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v2635
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2635, v2575) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2636
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2637,) {}
output:  v2638
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2638, v2576) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2639
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2639, v2577) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2640
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2640, v2578) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2641
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2642,) {}
output:  v2643
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2643, v2579) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2644
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2644, v2580) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2645
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2645, v2581) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2646
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2647,) {}
output:  v2648
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2648, v2582) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2649
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2649, v2583) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2650
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2650, v2584) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2651
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2652,) {}
output:  v2653
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2653, v2585) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v2654
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2653, v2586) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v2655
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2654, v2587) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v2656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2656, v2588) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2657
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2658,) {}
output:  v2659
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2659, v2589) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2660
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2660, v2590) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2661, v2591) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2662
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2663,) {}
output:  v2664
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2664, v2592) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2665
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2665, v2593) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v2666
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2666, v2594) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2667
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2668,) {}
output:  v2669
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2669, v2595) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2670
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2670, v2596) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2671
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2671, v2597) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2672
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2673,) {}
output:  v2674
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2674, v2598) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2675
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2675, v2599) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2676
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2676, v2600) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2677
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2678,) {}
output:  v2679
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2679, v2601) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2680
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2680, v2602) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2681
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2681, v2603) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2682
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2683,) {}
output:  v2684
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2684, v2604) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v2685
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2684, v2605) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2686
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2685, v2606) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v2687
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2687, v2607) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2688
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2689,) {}
output:  v2690
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2690, v2608) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2691
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2691, v2609) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2692, v2610) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2693
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2694,) {}
output:  v2695
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2695, v2611) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2696, v2612) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2697
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2697, v2613) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2698
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2699,) {}
output:  v2700
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2614, v2561) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:59:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:59:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v2615
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2615,) {}
Processing basic block Tue Jun 11 15:59:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2616
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2616, v2562) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v2617
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2616, v2563) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v2618
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2617, v2564) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v2619
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2619, v2565) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v2620
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2621,) {}
output:  v2622
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2622, v2566) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v2623
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2623, v2567) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v2624
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2624, v2568) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v2625
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2626,) {}
output:  v2627
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2627, v2569) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v2628
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2628, v2570) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v2629
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2629, v2571) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v2630
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2631,) {}
output:  v2632
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2632, v2572) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v2633
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2632, v2573) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v2634
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2633, v2574) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v2635
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2635, v2575) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v2636
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2637,) {}
output:  v2638
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2638, v2576) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v2639
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2639, v2577) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v2640
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2640, v2578) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v2641
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2642,) {}
output:  v2643
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2643, v2579) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v2644
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2644, v2580) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v2645
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2645, v2581) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v2646
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2647,) {}
output:  v2648
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2648, v2582) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v2649
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2649, v2583) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v2650
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2650, v2584) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v2651
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2652,) {}
output:  v2653
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2653, v2585) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v2654
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2653, v2586) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v2655
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2654, v2587) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v2656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2656, v2588) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v2657
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2658,) {}
output:  v2659
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2659, v2589) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v2660
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2660, v2590) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v2661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2661, v2591) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v2662
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2663,) {}
output:  v2664
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2664, v2592) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v2665
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2665, v2593) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v2666
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2666, v2594) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v2667
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2668,) {}
output:  v2669
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2669, v2595) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v2670
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2670, v2596) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v2671
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2671, v2597) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v2672
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2673,) {}
output:  v2674
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2674, v2598) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v2675
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2675, v2599) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:59:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v2676
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2676, v2600) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v2677
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2678,) {}
output:  v2679
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2679, v2601) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v2680
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2680, v2602) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v2681
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2681, v2603) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v2682
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2683,) {}
output:  v2684
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2684, v2604) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v2685
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2684, v2605) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v2686
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2685, v2606) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v2687
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2687, v2607) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v2688
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2689,) {}
output:  v2690
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2690, v2608) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v2691
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2691, v2609) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v2692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2692, v2610) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v2693
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2694,) {}
output:  v2695
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2695, v2611) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v2696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2696, v2612) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v2697
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2697, v2613) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v2698
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2699,) {}
output:  v2700
Processing basic block Tue Jun 11 15:59:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.863743 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 15:59:50 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv288_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv288_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
Compiled 1200000 lines at Tue Jun 11 15:59:51 2024
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2807, v2754) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v2808
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2808,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2809
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2809, v2755) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v2810
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2809, v2756) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v2811
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2810, v2757) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2812, v2758) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2813
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2814,) {}
output:  v2815
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2815, v2759) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2816
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2816, v2760) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2817
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2817, v2761) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2818
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2819,) {}
output:  v2820
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2820, v2762) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v2821
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2821, v2763) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v2822
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2822, v2764) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v2823
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2824,) {}
output:  v2825
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2825, v2765) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v2826
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2825, v2766) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v2827
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2826, v2767) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v2828
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2828, v2768) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2829
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2830,) {}
output:  v2831
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2831, v2769) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2832
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2832, v2770) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2833
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2833, v2771) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2834
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2835,) {}
output:  v2836
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2836, v2772) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2837
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2837, v2773) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2838
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2838, v2774) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2839
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2840,) {}
output:  v2841
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2841, v2775) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v2842
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2842, v2776) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v2843
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2843, v2777) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v2844
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2845,) {}
output:  v2846
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2846, v2778) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v2847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2846, v2779) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v2848
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2847, v2780) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v2849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2849, v2781) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2850
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2851,) {}
output:  v2852
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2852, v2782) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2853
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2853, v2783) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v2854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2854, v2784) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2855
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2856,) {}
output:  v2857
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2857, v2785) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2858
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2858, v2786) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2859
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2859, v2787) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2860
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2861,) {}
output:  v2862
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2862, v2788) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2863
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2863, v2789) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2864
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2864, v2790) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2865
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2866,) {}
output:  v2867
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2867, v2791) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2868
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2868, v2792) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2869
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2869, v2793) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2870
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2871,) {}
output:  v2872
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2872, v2794) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v2873
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2873, v2795) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v2874
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2874, v2796) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v2875
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2876,) {}
output:  v2877
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2877, v2797) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v2878
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2877, v2798) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2879
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2878, v2799) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v2880
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2880, v2800) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2881
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2882,) {}
output:  v2883
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2883, v2801) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2884, v2802) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2885
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2885, v2803) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2886
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2887,) {}
output:  v2888
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2888, v2804) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v2889
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2889, v2805) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v2890
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2890, v2806) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v2891
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2892,) {}
output:  v2893
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v2807, v2754) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v2808
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v2808,) {}
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v2809
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2809, v2755) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v2810
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2809, v2756) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v2811
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2810, v2757) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v2812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2812, v2758) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v2813
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2814,) {}
output:  v2815
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2815, v2759) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v2816
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2816, v2760) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v2817
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2817, v2761) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 15:59:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v2818
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2819,) {}
output:  v2820
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2820, v2762) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v2821
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2821, v2763) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v2822
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2822, v2764) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v2823
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2824,) {}
output:  v2825
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2825, v2765) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v2826
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2825, v2766) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v2827
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2826, v2767) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v2828
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2828, v2768) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v2829
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2830,) {}
output:  v2831
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2831, v2769) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v2832
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2832, v2770) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v2833
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2833, v2771) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v2834
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2835,) {}
output:  v2836
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2836, v2772) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v2837
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2837, v2773) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v2838
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2838, v2774) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v2839
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2840,) {}
output:  v2841
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2841, v2775) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v2842
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2842, v2776) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v2843
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2843, v2777) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v2844
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2845,) {}
output:  v2846
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2846, v2778) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 15:59:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v2847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2846, v2779) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v2848
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2847, v2780) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v2849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2849, v2781) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v2850
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2851,) {}
output:  v2852
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2852, v2782) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v2853
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v2853, v2783) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v2854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2854, v2784) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v2855
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2856,) {}
output:  v2857
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2857, v2785) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v2858
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2858, v2786) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v2859
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2859, v2787) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v2860
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2861,) {}
output:  v2862
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2862, v2788) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v2863
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2863, v2789) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v2864
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2864, v2790) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v2865
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2866,) {}
output:  v2867
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2867, v2791) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v2868
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2868, v2792) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v2869
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2869, v2793) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v2870
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2871,) {}
output:  v2872
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2872, v2794) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v2873
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2873, v2795) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v2874
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2874, v2796) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v2875
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2876,) {}
output:  v2877
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2877, v2797) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v2878
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v2877, v2798) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v2879
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v2878, v2799) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 15:59:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v2880
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2880, v2800) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v2881
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2882,) {}
output:  v2883
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2883, v2801) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v2884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2884, v2802) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v2885
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2885, v2803) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v2886
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2887,) {}
output:  v2888
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2888, v2804) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v2889
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v2889, v2805) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v2890
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v2890, v2806) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v2891
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v2892,) {}
output:  v2893
Processing basic block Tue Jun 11 16:00:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.996304 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:00:10 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv307_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv307_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3000, v2947) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v3001
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3001,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3002
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3002, v2948) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v3003
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3002, v2949) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v3004
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3003, v2950) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3005, v2951) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3006
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3007,) {}
output:  v3008
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3008, v2952) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3009
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3009, v2953) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3010
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3010, v2954) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3011
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3012,) {}
output:  v3013
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3013, v2955) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3014
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3014, v2956) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3015
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3015, v2957) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3016
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3017,) {}
output:  v3018
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3018, v2958) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v3019
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3018, v2959) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v3020
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3019, v2960) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v3021
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3021, v2961) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3022
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3023,) {}
output:  v3024
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3024, v2962) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3025
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3025, v2963) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3026
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3026, v2964) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3027
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3028,) {}
output:  v3029
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3029, v2965) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3030
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3030, v2966) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3031
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3031, v2967) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3032
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3033,) {}
output:  v3034
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3034, v2968) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3035
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3035, v2969) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3036
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3036, v2970) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3037
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3038,) {}
output:  v3039
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3039, v2971) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v3040
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3039, v2972) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v3041
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3040, v2973) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v3042
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3042, v2974) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
Compiled 1300000 lines at Tue Jun 11 16:00:16 2024
output:  v3043
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3044,) {}
output:  v3045
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3045, v2975) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3046
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3046, v2976) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3047
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3047, v2977) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3048
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3049,) {}
output:  v3050
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3050, v2978) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3051
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3051, v2979) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3052
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3052, v2980) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3053
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3054,) {}
output:  v3055
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3055, v2981) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3056
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3056, v2982) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3057
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3057, v2983) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3058
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3059,) {}
output:  v3060
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3060, v2984) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3061
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3061, v2985) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3062
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3062, v2986) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3063
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3064,) {}
output:  v3065
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3065, v2987) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3066
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3066, v2988) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3067
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3067, v2989) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3068
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3069,) {}
output:  v3070
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3070, v2990) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v3071
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3070, v2991) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3072
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3071, v2992) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v3073
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3073, v2993) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3074
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3075,) {}
output:  v3076
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3076, v2994) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3077
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3077, v2995) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v3078
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3078, v2996) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3079
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3080,) {}
output:  v3081
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3081, v2997) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3082
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v3082, v2998) {}
1024 1024 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 64, 3, 3)
output:  v3083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3083, v2999) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3084
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3085,) {}
output:  v3086
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3000, v2947) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:00:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:00:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v3001
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3001,) {}
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3002
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3002, v2948) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v3003
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3002, v2949) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v3004
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3003, v2950) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v3005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3005, v2951) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v3006
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3007,) {}
output:  v3008
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3008, v2952) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v3009
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3009, v2953) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v3010
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3010, v2954) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v3011
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3012,) {}
output:  v3013
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3013, v2955) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v3014
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3014, v2956) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v3015
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3015, v2957) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v3016
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3017,) {}
output:  v3018
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3018, v2958) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v3019
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3018, v2959) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v3020
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3019, v2960) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v3021
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3021, v2961) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v3022
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3023,) {}
output:  v3024
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3024, v2962) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v3025
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3025, v2963) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v3026
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3026, v2964) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v3027
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3028,) {}
output:  v3029
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3029, v2965) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v3030
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3030, v2966) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v3031
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3031, v2967) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v3032
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3033,) {}
output:  v3034
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3034, v2968) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v3035
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3035, v2969) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v3036
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3036, v2970) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v3037
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3038,) {}
output:  v3039
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3039, v2971) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v3040
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3039, v2972) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v3041
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3040, v2973) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v3042
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3042, v2974) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v3043
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3044,) {}
output:  v3045
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3045, v2975) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v3046
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3046, v2976) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v3047
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3047, v2977) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v3048
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3049,) {}
output:  v3050
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3050, v2978) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v3051
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3051, v2979) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v3052
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3052, v2980) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:00:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v3053
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3054,) {}
output:  v3055
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3055, v2981) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v3056
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3056, v2982) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v3057
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3057, v2983) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v3058
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3059,) {}
output:  v3060
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3060, v2984) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v3061
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3061, v2985) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v3062
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3062, v2986) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v3063
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3064,) {}
output:  v3065
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3065, v2987) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v3066
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3066, v2988) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v3067
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3067, v2989) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v3068
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3069,) {}
output:  v3070
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3070, v2990) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v3071
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3070, v2991) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v3072
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3071, v2992) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v3073
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3073, v2993) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v3074
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3075,) {}
output:  v3076
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3076, v2994) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v3077
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3077, v2995) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v3078
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3078, v2996) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v3079
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3080,) {}
output:  v3081
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3081, v2997) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v3082
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v3082, v2998) {}
1024 64 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v3083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3083, v2999) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:00:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v3084
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3085,) {}
output:  v3086
Processing basic block Tue Jun 11 16:00:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.811291 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:00:29 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv304_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv304_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3193, v3140) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v3194
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3194,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3195
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3195, v3141) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v3196
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3195, v3142) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v3197
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3196, v3143) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3198
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3198, v3144) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3199
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3200,) {}
output:  v3201
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3201, v3145) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3202
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3202, v3146) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3203
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3203, v3147) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3204
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3205,) {}
output:  v3206
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3206, v3148) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3207
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3207, v3149) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3208
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3208, v3150) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3209
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3210,) {}
output:  v3211
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3211, v3151) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v3212
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3211, v3152) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v3213
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3212, v3153) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v3214
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3214, v3154) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3215
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3216,) {}
output:  v3217
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3217, v3155) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3218
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3218, v3156) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3219
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3219, v3157) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3220
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3221,) {}
output:  v3222
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3222, v3158) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3223
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3223, v3159) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3224
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3224, v3160) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3225
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3226,) {}
output:  v3227
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3227, v3161) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3228
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3228, v3162) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3229
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3229, v3163) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3230
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3231,) {}
output:  v3232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3232, v3164) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v3233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3232, v3165) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v3234
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3233, v3166) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v3235
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3235, v3167) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3236
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3237,) {}
output:  v3238
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3238, v3168) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3239
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3239, v3169) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3240
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3240, v3170) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3241
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3242,) {}
output:  v3243
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3243, v3171) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3244
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3244, v3172) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3245
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3245, v3173) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3246
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3247,) {}
output:  v3248
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3248, v3174) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3249
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3249, v3175) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3250
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3250, v3176) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3251
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3252,) {}
output:  v3253
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3253, v3177) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3254
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3254, v3178) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3255
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3255, v3179) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3256
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3257,) {}
output:  v3258
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3258, v3180) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3259
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3259, v3181) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3260
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3260, v3182) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3261
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3262,) {}
output:  v3263
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3263, v3183) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v3264
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3263, v3184) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3265
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3264, v3185) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v3266
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3266, v3186) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3267
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3268,) {}
output:  v3269
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3269, v3187) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3270
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v3270, v3188) {}
1024 1024 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 64, 3, 3)
output:  v3271
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3271, v3189) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3272
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3273,) {}
output:  v3274
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3274, v3190) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3275, v3191) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v3276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3276, v3192) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3277
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3278,) {}
output:  v3279
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3193, v3140) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:00:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:00:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v3194
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3194,) {}
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3195
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3195, v3141) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v3196
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3195, v3142) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v3197
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3196, v3143) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v3198
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3198, v3144) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v3199
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3200,) {}
output:  v3201
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3201, v3145) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v3202
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3202, v3146) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Compiled 1400000 lines at Tue Jun 11 16:00:37 2024
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v3203
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3203, v3147) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v3204
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3205,) {}
output:  v3206
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3206, v3148) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v3207
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3207, v3149) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v3208
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3208, v3150) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v3209
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3210,) {}
output:  v3211
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3211, v3151) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v3212
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3211, v3152) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v3213
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3212, v3153) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v3214
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3214, v3154) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v3215
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3216,) {}
output:  v3217
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3217, v3155) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v3218
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3218, v3156) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v3219
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3219, v3157) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v3220
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3221,) {}
output:  v3222
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3222, v3158) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:00:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v3223
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3223, v3159) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v3224
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3224, v3160) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v3225
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3226,) {}
output:  v3227
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3227, v3161) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v3228
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3228, v3162) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v3229
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3229, v3163) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v3230
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3231,) {}
output:  v3232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3232, v3164) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v3233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3232, v3165) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v3234
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3233, v3166) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v3235
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3235, v3167) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v3236
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3237,) {}
output:  v3238
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3238, v3168) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v3239
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3239, v3169) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v3240
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3240, v3170) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v3241
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3242,) {}
output:  v3243
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3243, v3171) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v3244
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3244, v3172) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v3245
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3245, v3173) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v3246
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3247,) {}
output:  v3248
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3248, v3174) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v3249
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3249, v3175) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:00:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v3250
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3250, v3176) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v3251
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3252,) {}
output:  v3253
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3253, v3177) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v3254
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3254, v3178) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v3255
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3255, v3179) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v3256
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3257,) {}
output:  v3258
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3258, v3180) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v3259
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3259, v3181) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v3260
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3260, v3182) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v3261
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3262,) {}
output:  v3263
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3263, v3183) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v3264
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3263, v3184) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v3265
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3264, v3185) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v3266
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3266, v3186) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v3267
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3268,) {}
output:  v3269
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3269, v3187) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v3270
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v3270, v3188) {}
1024 64 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v3271
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3271, v3189) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v3272
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3273,) {}
output:  v3274
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3274, v3190) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v3275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3275, v3191) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v3276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3276, v3192) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:00:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v3277
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3278,) {}
output:  v3279
Processing basic block Tue Jun 11 16:00:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 53.088188 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:00:49 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv313_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv313_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3386, v3333) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v3387
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3387,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3388
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3388, v3334) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v3389
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3388, v3335) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v3390
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3389, v3336) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3391
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3391, v3337) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3392
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3393,) {}
output:  v3394
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3394, v3338) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3395
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3395, v3339) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3396
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3396, v3340) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3397
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3398,) {}
output:  v3399
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3399, v3341) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3400
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3400, v3342) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3401
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3401, v3343) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3402
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3403,) {}
output:  v3404
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3404, v3344) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v3405
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3404, v3345) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v3406
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3405, v3346) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v3407
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3407, v3347) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3408
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3409,) {}
output:  v3410
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3410, v3348) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3411
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3411, v3349) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3412
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3412, v3350) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3413
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3414,) {}
output:  v3415
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3415, v3351) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3416
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3416, v3352) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3417
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3417, v3353) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3418
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3419,) {}
output:  v3420
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3420, v3354) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3421
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3421, v3355) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3422
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3422, v3356) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3423
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3424,) {}
output:  v3425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3425, v3357) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v3426
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3425, v3358) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v3427
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v3426, v3359) {}
512 512 (1, 512, 28, 28) (512, 32, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 32, 3, 3)
output:  v3428
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3428, v3360) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3429
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3430,) {}
output:  v3431
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3431, v3361) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3432
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3432, v3362) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3433
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3433, v3363) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3434
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3435,) {}
output:  v3436
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3436, v3364) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3437
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3437, v3365) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3438
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3438, v3366) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3439
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3440,) {}
output:  v3441
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3441, v3367) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3442
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3442, v3368) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3443
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3443, v3369) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3444
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3445,) {}
output:  v3446
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3446, v3370) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3447
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3447, v3371) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3448
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3448, v3372) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3449
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3450,) {}
output:  v3451
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3451, v3373) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3452
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3452, v3374) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3453
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3453, v3375) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3454
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3455,) {}
output:  v3456
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3456, v3376) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v3457
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3456, v3377) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3458
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3457, v3378) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v3459
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3459, v3379) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3460
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3461,) {}
output:  v3462
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3462, v3380) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3463
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3463, v3381) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v3464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3464, v3382) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3465
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3466,) {}
output:  v3467
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3467, v3383) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3468, v3384) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v3469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3469, v3385) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3470
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3471,) {}
output:  v3472
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3386, v3333) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v3387
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3387,) {}
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3388
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3388, v3334) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v3389
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3388, v3335) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v3390
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3389, v3336) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v3391
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3391, v3337) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v3392
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3393,) {}
output:  v3394
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3394, v3338) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v3395
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3395, v3339) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v3396
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3396, v3340) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v3397
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3398,) {}
output:  v3399
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3399, v3341) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v3400
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3400, v3342) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:00:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v3401
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3401, v3343) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v3402
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3403,) {}
output:  v3404
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3404, v3344) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v3405
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3404, v3345) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v3406
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3405, v3346) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v3407
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3407, v3347) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v3408
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3409,) {}
output:  v3410
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3410, v3348) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v3411
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3411, v3349) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v3412
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3412, v3350) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v3413
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3414,) {}
output:  v3415
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3415, v3351) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v3416
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3416, v3352) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v3417
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3417, v3353) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v3418
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3419,) {}
output:  v3420
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3420, v3354) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v3421
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3421, v3355) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v3422
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3422, v3356) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v3423
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3424,) {}
Compiled 1500000 lines at Tue Jun 11 16:00:57 2024
output:  v3425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3425, v3357) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v3426
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3425, v3358) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v3427
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v3426, v3359) {}
512 32 (1, 512, 28, 28) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v3428
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3428, v3360) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v3429
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3430,) {}
output:  v3431
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3431, v3361) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v3432
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3432, v3362) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v3433
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3433, v3363) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:57 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v3434
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3435,) {}
output:  v3436
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3436, v3364) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v3437
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3437, v3365) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v3438
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3438, v3366) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v3439
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3440,) {}
output:  v3441
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3441, v3367) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v3442
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3442, v3368) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v3443
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3443, v3369) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v3444
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3445,) {}
output:  v3446
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3446, v3370) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v3447
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3447, v3371) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v3448
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3448, v3372) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v3449
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3450,) {}
output:  v3451
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3451, v3373) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v3452
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3452, v3374) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v3453
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3453, v3375) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v3454
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3455,) {}
output:  v3456
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3456, v3376) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v3457
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3456, v3377) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v3458
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3457, v3378) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v3459
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3459, v3379) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:00:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v3460
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3461,) {}
output:  v3462
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3462, v3380) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v3463
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3463, v3381) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v3464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3464, v3382) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v3465
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3466,) {}
output:  v3467
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3467, v3383) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v3468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3468, v3384) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v3469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3469, v3385) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v3470
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3471,) {}
output:  v3472
Processing basic block Tue Jun 11 16:00:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.997496 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:01:09 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv316_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv316_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3579, v3526) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v3580
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3580,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3581
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3581, v3527) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v3582
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3581, v3528) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v3583
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3582, v3529) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3584
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3584, v3530) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3585
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3586,) {}
output:  v3587
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3587, v3531) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3588
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3588, v3532) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3589
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3589, v3533) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3590
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3591,) {}
output:  v3592
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3592, v3534) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3593
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3593, v3535) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3594
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3594, v3536) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3595
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3596,) {}
output:  v3597
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3597, v3537) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v3598
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3597, v3538) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v3599
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3598, v3539) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v3600
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3600, v3540) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3601
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3602,) {}
output:  v3603
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3603, v3541) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3604
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3604, v3542) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3605
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3605, v3543) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3606
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3607,) {}
output:  v3608
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3608, v3544) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3609
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3609, v3545) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3610
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3610, v3546) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3611
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3612,) {}
output:  v3613
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3613, v3547) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3614
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3614, v3548) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3615
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3615, v3549) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3616
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3617,) {}
output:  v3618
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3618, v3550) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v3619
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3618, v3551) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v3620
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3619, v3552) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v3621
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3621, v3553) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3622
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3623,) {}
output:  v3624
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3624, v3554) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3625
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3625, v3555) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3626
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3626, v3556) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3627
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3628,) {}
output:  v3629
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3629, v3557) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3630
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3630, v3558) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3631
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3631, v3559) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3632
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3633,) {}
output:  v3634
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3634, v3560) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3635
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3635, v3561) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3636
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3636, v3562) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3637
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3638,) {}
output:  v3639
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3639, v3563) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3640
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3640, v3564) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3641
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3641, v3565) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3642
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3643,) {}
output:  v3644
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3644, v3566) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3645
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3645, v3567) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3646
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3646, v3568) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3647
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3648,) {}
output:  v3649
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3649, v3569) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v3650
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3649, v3570) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3651
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v3650, v3571) {}
1024 1024 (1, 1024, 14, 14) (1024, 64, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 64, 3, 3)
output:  v3652
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3652, v3572) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3653
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3654,) {}
output:  v3655
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3655, v3573) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3656, v3574) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v3657
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3657, v3575) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3658
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3659,) {}
output:  v3660
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3660, v3576) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3661, v3577) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v3662
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3662, v3578) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3663
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3664,) {}
output:  v3665
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3579, v3526) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v3580
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3580,) {}
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3581
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3581, v3527) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v3582
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3581, v3528) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v3583
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3582, v3529) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v3584
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3584, v3530) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v3585
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3586,) {}
output:  v3587
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3587, v3531) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v3588
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3588, v3532) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v3589
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3589, v3533) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v3590
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3591,) {}
output:  v3592
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3592, v3534) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v3593
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3593, v3535) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v3594
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3594, v3536) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v3595
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3596,) {}
output:  v3597
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3597, v3537) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v3598
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3597, v3538) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v3599
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3598, v3539) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v3600
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3600, v3540) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v3601
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3602,) {}
output:  v3603
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3603, v3541) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v3604
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3604, v3542) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v3605
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3605, v3543) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v3606
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3607,) {}
output:  v3608
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3608, v3544) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v3609
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3609, v3545) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v3610
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3610, v3546) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v3611
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3612,) {}
output:  v3613
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3613, v3547) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v3614
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3614, v3548) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v3615
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3615, v3549) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v3616
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3617,) {}
output:  v3618
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3618, v3550) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v3619
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3618, v3551) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v3620
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3619, v3552) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v3621
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3621, v3553) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v3622
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3623,) {}
output:  v3624
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3624, v3554) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v3625
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3625, v3555) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:01:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v3626
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3626, v3556) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v3627
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3628,) {}
output:  v3629
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3629, v3557) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v3630
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3630, v3558) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v3631
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3631, v3559) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v3632
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3633,) {}
output:  v3634
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3634, v3560) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v3635
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3635, v3561) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v3636
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3636, v3562) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v3637
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3638,) {}
output:  v3639
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3639, v3563) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v3640
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3640, v3564) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v3641
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3641, v3565) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v3642
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3643,) {}
output:  v3644
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3644, v3566) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v3645
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3645, v3567) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v3646
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3646, v3568) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Compiled 1600000 lines at Tue Jun 11 16:01:18 2024
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v3647
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3648,) {}
output:  v3649
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3649, v3569) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v3650
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3649, v3570) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v3651
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v3650, v3571) {}
1024 64 (1, 1024, 14, 14) (1024, 64, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v3652
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3652, v3572) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v3653
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3654,) {}
output:  v3655
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3655, v3573) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v3656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3656, v3574) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v3657
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3657, v3575) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:01:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v3658
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3659,) {}
output:  v3660
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3660, v3576) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:01:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v3661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3661, v3577) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:01:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:01:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v3662
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3662, v3578) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:01:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v3663
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3664,) {}
output:  v3665
Processing basic block Tue Jun 11 16:01:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.670147 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:01:29 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv797_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv797_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3770, v3718) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v3771
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3771,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3772
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3772, v3719) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v3773
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v3773,)
spilts:  (v3774, v3775)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3775, v3720) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3776
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3776, v3721) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3777
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3778,) {}
output:  v3779
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3779, v3722) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3780
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3780, v3723) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3781
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3781, v3724) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3782
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3783,) {}
output:  v3784
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3784, v3725) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3785
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3785, v3726) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3786
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3786, v3727) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3787
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3788,) {}
output:  v3789
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3789, v3728) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v3790
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3789, v3729) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v3791
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3790, v3730) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v3792
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3792, v3731) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3793
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3794,) {}
output:  v3795
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3795, v3732) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3796
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v3796, v3733) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v3797
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3797, v3734) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3798
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3799,) {}
output:  v3800
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3800, v3735) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3801
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3801, v3736) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3802
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3802, v3737) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3803
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3804,) {}
output:  v3805
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3805, v3738) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3806
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3806, v3739) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3807
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3807, v3740) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3808
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3809,) {}
output:  v3810
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3810, v3741) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v3811
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3810, v3742) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v3812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3811, v3743) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v3813
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3813, v3744) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3814
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3815,) {}
output:  v3816
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3816, v3745) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3817
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3817, v3746) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3818
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3818, v3747) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3819
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3820,) {}
output:  v3821
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3821, v3748) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3822
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3822, v3749) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3823
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3823, v3750) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3824
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3825,) {}
output:  v3826
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3826, v3751) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3827
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3827, v3752) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3828
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3828, v3753) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3829
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3830,) {}
output:  v3831
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3831, v3754) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3832
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3832, v3755) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3833
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3833, v3756) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3834
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3835,) {}
output:  v3836
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3836, v3757) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v3837
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3837, v3758) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v3838
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3838, v3759) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v3839
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3840,) {}
output:  v3841
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3841, v3760) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v3842
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3841, v3761) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3843
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3842, v3762) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v3844
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3844, v3763) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3845
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3846,) {}
output:  v3847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3847, v3764) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3848
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3848, v3765) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v3849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3849, v3766) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3850
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3851,) {}
output:  v3852
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3852, v3767) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v3853
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3853, v3768) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v3854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3854, v3769) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v3855
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3856,) {}
output:  v3857
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3770, v3718) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:01:35 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:01:35 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v3771
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3771,) {}
Processing basic block Tue Jun 11 16:01:35 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3772
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3772, v3719) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:01:35 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:01:35 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v3773
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v3773,)
spilts:  (v3774, v3775)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3775, v3720) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v3776
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3776, v3721) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v3777
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3778,) {}
output:  v3779
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3779, v3722) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v3780
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3780, v3723) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v3781
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3781, v3724) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v3782
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3783,) {}
output:  v3784
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3784, v3725) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v3785
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3785, v3726) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v3786
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3786, v3727) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v3787
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3788,) {}
output:  v3789
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3789, v3728) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v3790
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3789, v3729) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v3791
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3790, v3730) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v3792
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3792, v3731) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v3793
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3794,) {}
output:  v3795
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3795, v3732) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v3796
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v3796, v3733) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v3797
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3797, v3734) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v3798
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3799,) {}
output:  v3800
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3800, v3735) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v3801
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3801, v3736) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v3802
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3802, v3737) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v3803
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3804,) {}
output:  v3805
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3805, v3738) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v3806
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3806, v3739) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v3807
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3807, v3740) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v3808
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3809,) {}
output:  v3810
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3810, v3741) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v3811
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3810, v3742) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v3812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3811, v3743) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v3813
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3813, v3744) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v3814
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3815,) {}
output:  v3816
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3816, v3745) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v3817
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3817, v3746) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v3818
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3818, v3747) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v3819
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3820,) {}
output:  v3821
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3821, v3748) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v3822
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3822, v3749) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v3823
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3823, v3750) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v3824
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3825,) {}
output:  v3826
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3826, v3751) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v3827
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3827, v3752) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:01:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v3828
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3828, v3753) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v3829
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3830,) {}
output:  v3831
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3831, v3754) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v3832
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3832, v3755) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v3833
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3833, v3756) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v3834
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3835,) {}
output:  v3836
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3836, v3757) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v3837
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3837, v3758) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v3838
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3838, v3759) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v3839
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3840,) {}
output:  v3841
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3841, v3760) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v3842
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3841, v3761) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v3843
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3842, v3762) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v3844
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3844, v3763) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v3845
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3846,) {}
output:  v3847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3847, v3764) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v3848
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3848, v3765) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v3849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3849, v3766) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v3850
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3851,) {}
output:  v3852
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3852, v3767) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v3853
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3853, v3768) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Compiled 1700000 lines at Tue Jun 11 16:01:38 2024
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v3854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3854, v3769) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:01:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v3855
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3856,) {}
output:  v3857
Processing basic block Tue Jun 11 16:01:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.459074 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:01:49 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv803_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv803_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3962, v3910) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v3963
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3963,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3964
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3964, v3911) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v3965
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v3965,)
spilts:  (v3966, v3967)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3967, v3912) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3968
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3968, v3913) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3969
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3970,) {}
output:  v3971
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3971, v3914) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3972
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3972, v3915) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3973
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3973, v3916) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3974
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3975,) {}
output:  v3976
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3976, v3917) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v3977
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3977, v3918) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v3978
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3978, v3919) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v3979
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3980,) {}
output:  v3981
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3981, v3920) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v3982
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3981, v3921) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v3983
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3982, v3922) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v3984
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3984, v3923) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3985
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3986,) {}
output:  v3987
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3987, v3924) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3988
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3988, v3925) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3989
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3989, v3926) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3990
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3991,) {}
output:  v3992
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3992, v3927) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3993
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3993, v3928) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v3994
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3994, v3929) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v3995
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3996,) {}
output:  v3997
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3997, v3930) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v3998
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v3998, v3931) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v3999
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3999, v3932) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4000
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4001,) {}
output:  v4002
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4002, v3933) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v4003
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4002, v3934) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v4004
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4003, v3935) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v4005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4005, v3936) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4006
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4007,) {}
output:  v4008
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4008, v3937) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4009
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4009, v3938) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4010
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4010, v3939) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4011
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4012,) {}
output:  v4013
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4013, v3940) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4014
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4014, v3941) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4015
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4015, v3942) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4016
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4017,) {}
output:  v4018
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4018, v3943) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4019
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4019, v3944) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4020
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4020, v3945) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4021
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4022,) {}
output:  v4023
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4023, v3946) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4024
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4024, v3947) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4025
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4025, v3948) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4026
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4027,) {}
output:  v4028
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4028, v3949) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4029
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4029, v3950) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4030
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4030, v3951) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4031
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4032,) {}
output:  v4033
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4033, v3952) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v4034
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4033, v3953) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4035
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4034, v3954) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v4036
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4036, v3955) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4037
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4038,) {}
output:  v4039
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4039, v3956) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4040
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4040, v3957) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4041
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4041, v3958) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4042
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4043,) {}
output:  v4044
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4044, v3959) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4045
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4045, v3960) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4046
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4046, v3961) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4047
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4048,) {}
output:  v4049
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v3962, v3910) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:01:55 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:01:55 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v3963
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v3963,) {}
Processing basic block Tue Jun 11 16:01:55 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v3964
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3964, v3911) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:01:55 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:01:55 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v3965
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v3965,)
spilts:  (v3966, v3967)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3967, v3912) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v3968
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3968, v3913) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v3969
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3970,) {}
output:  v3971
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3971, v3914) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v3972
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3972, v3915) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v3973
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3973, v3916) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v3974
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3975,) {}
output:  v3976
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3976, v3917) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v3977
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3977, v3918) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v3978
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3978, v3919) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v3979
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3980,) {}
output:  v3981
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3981, v3920) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v3982
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v3981, v3921) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v3983
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v3982, v3922) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v3984
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3984, v3923) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v3985
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3986,) {}
output:  v3987
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3987, v3924) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v3988
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3988, v3925) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v3989
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3989, v3926) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v3990
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3991,) {}
output:  v3992
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3992, v3927) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:01:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v3993
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v3993, v3928) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v3994
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3994, v3929) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v3995
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v3996,) {}
output:  v3997
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3997, v3930) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v3998
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v3998, v3931) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v3999
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v3999, v3932) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v4000
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4001,) {}
output:  v4002
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4002, v3933) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v4003
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4002, v3934) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v4004
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4003, v3935) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v4005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4005, v3936) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v4006
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4007,) {}
output:  v4008
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4008, v3937) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v4009
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4009, v3938) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v4010
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4010, v3939) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v4011
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4012,) {}
output:  v4013
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4013, v3940) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v4014
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4014, v3941) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v4015
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4015, v3942) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v4016
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4017,) {}
output:  v4018
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4018, v3943) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v4019
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4019, v3944) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:01:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v4020
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4020, v3945) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v4021
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4022,) {}
output:  v4023
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4023, v3946) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v4024
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4024, v3947) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v4025
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4025, v3948) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v4026
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4027,) {}
output:  v4028
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4028, v3949) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v4029
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4029, v3950) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v4030
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4030, v3951) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v4031
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4032,) {}
output:  v4033
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4033, v3952) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v4034
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4033, v3953) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v4035
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4034, v3954) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v4036
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4036, v3955) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v4037
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4038,) {}
output:  v4039
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4039, v3956) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v4040
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4040, v3957) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v4041
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4041, v3958) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v4042
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4043,) {}
output:  v4044
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4044, v3959) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v4045
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4045, v3960) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v4046
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4046, v3961) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:01:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v4047
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4048,) {}
output:  v4049
Processing basic block Tue Jun 11 16:01:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.585197 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:02:09 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv800_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv800_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
Compiled 1800000 lines at Tue Jun 11 16:02:09 2024
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4154, v4102) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v4155
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4155,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4156
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4156, v4103) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v4157
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4157,)
spilts:  (v4158, v4159)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4159, v4104) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4160
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4160, v4105) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4161
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4162,) {}
output:  v4163
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4163, v4106) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4164
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4164, v4107) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4165
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4165, v4108) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4166
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4167,) {}
output:  v4168
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4168, v4109) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4169
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4169, v4110) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4170
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4170, v4111) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4171
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4172,) {}
output:  v4173
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4173, v4112) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v4174
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4173, v4113) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v4175
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4174, v4114) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v4176
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4176, v4115) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4177
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4178,) {}
output:  v4179
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4179, v4116) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4180
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4180, v4117) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4181
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4181, v4118) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4182
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4183,) {}
output:  v4184
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4184, v4119) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4185
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v4185, v4120) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v4186
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4186, v4121) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4187
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4188,) {}
output:  v4189
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4189, v4122) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4190
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4190, v4123) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4191
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4191, v4124) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4192
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4193,) {}
output:  v4194
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4194, v4125) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v4195
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4194, v4126) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v4196
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4195, v4127) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v4197
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4197, v4128) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4198
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4199,) {}
output:  v4200
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4200, v4129) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4201
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4201, v4130) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4202
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4202, v4131) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4203
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4204,) {}
output:  v4205
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4205, v4132) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4206
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4206, v4133) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4207
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4207, v4134) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4208
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4209,) {}
output:  v4210
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4210, v4135) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4211
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4211, v4136) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4212
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4212, v4137) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4213
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4214,) {}
output:  v4215
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4215, v4138) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4216
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4216, v4139) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4217
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4217, v4140) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4218
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4219,) {}
output:  v4220
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4220, v4141) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4221
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4221, v4142) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4222
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4222, v4143) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4223
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4224,) {}
output:  v4225
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4225, v4144) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v4226
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4225, v4145) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4227
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4226, v4146) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v4228
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4228, v4147) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4229
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4230,) {}
output:  v4231
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4231, v4148) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4232, v4149) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4233, v4150) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4234
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4235,) {}
output:  v4236
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4236, v4151) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4237
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4237, v4152) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4238
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4238, v4153) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4239
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4240,) {}
output:  v4241
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4154, v4102) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v4155
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4155,) {}
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4156
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4156, v4103) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v4157
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4157,)
spilts:  (v4158, v4159)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4159, v4104) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v4160
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4160, v4105) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v4161
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4162,) {}
output:  v4163
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4163, v4106) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v4164
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4164, v4107) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v4165
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4165, v4108) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:02:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v4166
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4167,) {}
output:  v4168
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4168, v4109) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v4169
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4169, v4110) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v4170
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4170, v4111) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v4171
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4172,) {}
output:  v4173
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4173, v4112) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v4174
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4173, v4113) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v4175
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4174, v4114) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v4176
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4176, v4115) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v4177
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4178,) {}
output:  v4179
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4179, v4116) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v4180
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4180, v4117) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v4181
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4181, v4118) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v4182
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4183,) {}
output:  v4184
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4184, v4119) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v4185
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v4185, v4120) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v4186
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4186, v4121) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v4187
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4188,) {}
output:  v4189
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4189, v4122) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v4190
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4190, v4123) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v4191
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4191, v4124) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v4192
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4193,) {}
output:  v4194
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4194, v4125) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v4195
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4194, v4126) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v4196
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4195, v4127) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v4197
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4197, v4128) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v4198
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4199,) {}
output:  v4200
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4200, v4129) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v4201
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4201, v4130) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v4202
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4202, v4131) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v4203
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4204,) {}
output:  v4205
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4205, v4132) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v4206
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4206, v4133) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v4207
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4207, v4134) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v4208
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4209,) {}
output:  v4210
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4210, v4135) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v4211
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4211, v4136) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v4212
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4212, v4137) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v4213
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4214,) {}
output:  v4215
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4215, v4138) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v4216
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4216, v4139) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v4217
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4217, v4140) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v4218
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4219,) {}
output:  v4220
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4220, v4141) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v4221
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4221, v4142) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v4222
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4222, v4143) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v4223
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4224,) {}
output:  v4225
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4225, v4144) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v4226
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4225, v4145) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v4227
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4226, v4146) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:02:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v4228
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4228, v4147) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v4229
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4230,) {}
output:  v4231
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4231, v4148) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v4232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4232, v4149) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v4233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4233, v4150) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v4234
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4235,) {}
output:  v4236
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4236, v4151) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v4237
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4237, v4152) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v4238
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4238, v4153) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v4239
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4240,) {}
output:  v4241
Processing basic block Tue Jun 11 16:02:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.698685 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:02:29 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv793_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv793_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4346, v4294) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
Compiled 1900000 lines at Tue Jun 11 16:02:35 2024
output:  v4347
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4347,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4348
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4348, v4295) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v4349
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4349,)
spilts:  (v4350, v4351)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4351, v4296) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4352
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4352, v4297) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4353
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4354,) {}
output:  v4355
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4355, v4298) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4356
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4356, v4299) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4357
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4357, v4300) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4358
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4359,) {}
output:  v4360
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4360, v4301) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4361
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v4361, v4302) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v4362
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4362, v4303) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4363
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4364,) {}
output:  v4365
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4365, v4304) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v4366
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4365, v4305) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v4367
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4366, v4306) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v4368
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4368, v4307) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4369
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4370,) {}
output:  v4371
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4371, v4308) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4372
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4372, v4309) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4373
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4373, v4310) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4374
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4375,) {}
output:  v4376
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4376, v4311) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4377
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4377, v4312) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4378
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4378, v4313) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4379
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4380,) {}
output:  v4381
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4381, v4314) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4382
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4382, v4315) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4383
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4383, v4316) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4384
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4385,) {}
output:  v4386
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4386, v4317) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v4387
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4386, v4318) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v4388
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4387, v4319) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v4389
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4389, v4320) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4390
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4391,) {}
output:  v4392
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4392, v4321) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4393
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4393, v4322) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4394
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4394, v4323) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4395
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4396,) {}
output:  v4397
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4397, v4324) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4398
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4398, v4325) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4399
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4399, v4326) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4400
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4401,) {}
output:  v4402
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4402, v4327) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4403
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4403, v4328) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4404
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4404, v4329) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4405
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4406,) {}
output:  v4407
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4407, v4330) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4408
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4408, v4331) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4409
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4409, v4332) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4410
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4411,) {}
output:  v4412
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4412, v4333) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4413
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4413, v4334) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4414
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4414, v4335) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4415
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4416,) {}
output:  v4417
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4417, v4336) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v4418
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4417, v4337) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4419
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4418, v4338) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v4420
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4420, v4339) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4421
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4422,) {}
output:  v4423
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4423, v4340) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4424
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4424, v4341) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4425, v4342) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4426
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4427,) {}
output:  v4428
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4428, v4343) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4429
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4429, v4344) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4430
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4430, v4345) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4431
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4432,) {}
output:  v4433
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4346, v4294) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:02:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:02:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v4347
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4347,) {}
Processing basic block Tue Jun 11 16:02:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4348
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4348, v4295) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:02:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:02:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v4349
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4349,)
spilts:  (v4350, v4351)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4351, v4296) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v4352
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4352, v4297) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v4353
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4354,) {}
output:  v4355
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4355, v4298) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v4356
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4356, v4299) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v4357
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4357, v4300) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v4358
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4359,) {}
output:  v4360
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4360, v4301) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v4361
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v4361, v4302) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v4362
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4362, v4303) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v4363
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4364,) {}
output:  v4365
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4365, v4304) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v4366
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4365, v4305) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v4367
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4366, v4306) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v4368
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4368, v4307) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v4369
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4370,) {}
output:  v4371
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4371, v4308) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v4372
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4372, v4309) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v4373
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4373, v4310) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v4374
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4375,) {}
output:  v4376
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4376, v4311) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v4377
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4377, v4312) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:02:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v4378
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4378, v4313) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v4379
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4380,) {}
output:  v4381
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4381, v4314) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v4382
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4382, v4315) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v4383
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4383, v4316) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v4384
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4385,) {}
output:  v4386
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4386, v4317) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v4387
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4386, v4318) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v4388
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4387, v4319) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v4389
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4389, v4320) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v4390
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4391,) {}
output:  v4392
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4392, v4321) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v4393
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4393, v4322) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v4394
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4394, v4323) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v4395
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4396,) {}
output:  v4397
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4397, v4324) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v4398
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4398, v4325) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v4399
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4399, v4326) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v4400
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4401,) {}
output:  v4402
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4402, v4327) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v4403
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4403, v4328) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v4404
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4404, v4329) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:02:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v4405
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4406,) {}
output:  v4407
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4407, v4330) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v4408
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4408, v4331) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v4409
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4409, v4332) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v4410
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4411,) {}
output:  v4412
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4412, v4333) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v4413
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4413, v4334) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v4414
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4414, v4335) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v4415
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4416,) {}
output:  v4417
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4417, v4336) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v4418
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4417, v4337) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v4419
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4418, v4338) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v4420
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4420, v4339) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v4421
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4422,) {}
output:  v4423
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4423, v4340) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v4424
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4424, v4341) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v4425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4425, v4342) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v4426
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4427,) {}
output:  v4428
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4428, v4343) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v4429
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4429, v4344) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v4430
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4430, v4345) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:02:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v4431
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4432,) {}
output:  v4433
Processing basic block Tue Jun 11 16:02:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 52.633524 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:02:50 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv790_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv790_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4538, v4486) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v4539
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4539,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4540
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4540, v4487) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v4541
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4541,)
spilts:  (v4542, v4543)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4543, v4488) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4544
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4544, v4489) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4545
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4546,) {}
output:  v4547
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4547, v4490) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4548
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v4548, v4491) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v4549
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4549, v4492) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4550
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4551,) {}
output:  v4552
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4552, v4493) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4553
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4553, v4494) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4554
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4554, v4495) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4555
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4556,) {}
output:  v4557
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4557, v4496) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v4558
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4557, v4497) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v4559
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4558, v4498) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v4560
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4560, v4499) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4561
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4562,) {}
output:  v4563
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4563, v4500) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4564
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4564, v4501) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4565
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4565, v4502) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4566
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4567,) {}
output:  v4568
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4568, v4503) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4569
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4569, v4504) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4570
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4570, v4505) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
Compiled 2000000 lines at Tue Jun 11 16:02:56 2024
output:  v4571
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4572,) {}
output:  v4573
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4573, v4506) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4574
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4574, v4507) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4575
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4575, v4508) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4576
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4577,) {}
output:  v4578
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4578, v4509) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v4579
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4578, v4510) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v4580
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4579, v4511) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v4581
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4581, v4512) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4582
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4583,) {}
output:  v4584
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4584, v4513) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4585
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4585, v4514) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4586
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4586, v4515) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4587
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4588,) {}
output:  v4589
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4589, v4516) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4590
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4590, v4517) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4591
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4591, v4518) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4592
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4593,) {}
output:  v4594
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4594, v4519) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4595
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4595, v4520) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4596
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4596, v4521) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4597
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4598,) {}
output:  v4599
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4599, v4522) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4600
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4600, v4523) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4601
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4601, v4524) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4602
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4603,) {}
output:  v4604
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4604, v4525) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4605
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4605, v4526) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4606
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4606, v4527) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4607
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4608,) {}
output:  v4609
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4609, v4528) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v4610
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4609, v4529) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4611
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4610, v4530) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v4612
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4612, v4531) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4613
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4614,) {}
output:  v4615
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4615, v4532) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4616
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4616, v4533) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4617
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4617, v4534) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4618
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4619,) {}
output:  v4620
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4620, v4535) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4621
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4621, v4536) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4622
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4622, v4537) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4623
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4624,) {}
output:  v4625
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4538, v4486) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:02:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:02:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v4539
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4539,) {}
Processing basic block Tue Jun 11 16:02:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4540
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4540, v4487) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v4541
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4541,)
spilts:  (v4542, v4543)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4543, v4488) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v4544
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4544, v4489) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v4545
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4546,) {}
output:  v4547
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4547, v4490) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v4548
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v4548, v4491) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v4549
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4549, v4492) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v4550
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4551,) {}
output:  v4552
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4552, v4493) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v4553
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4553, v4494) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v4554
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4554, v4495) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v4555
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4556,) {}
output:  v4557
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4557, v4496) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v4558
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4557, v4497) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v4559
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4558, v4498) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v4560
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4560, v4499) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:02:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v4561
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4562,) {}
output:  v4563
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4563, v4500) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v4564
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4564, v4501) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v4565
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4565, v4502) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v4566
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4567,) {}
output:  v4568
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4568, v4503) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v4569
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4569, v4504) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v4570
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4570, v4505) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v4571
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4572,) {}
output:  v4573
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4573, v4506) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v4574
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4574, v4507) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v4575
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4575, v4508) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v4576
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4577,) {}
output:  v4578
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4578, v4509) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v4579
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4578, v4510) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v4580
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4579, v4511) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v4581
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4581, v4512) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v4582
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4583,) {}
output:  v4584
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4584, v4513) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v4585
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4585, v4514) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v4586
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4586, v4515) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:02:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v4587
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4588,) {}
output:  v4589
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4589, v4516) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v4590
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4590, v4517) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v4591
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4591, v4518) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v4592
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4593,) {}
output:  v4594
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4594, v4519) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v4595
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4595, v4520) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v4596
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4596, v4521) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v4597
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4598,) {}
output:  v4599
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4599, v4522) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v4600
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4600, v4523) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v4601
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4601, v4524) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v4602
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4603,) {}
output:  v4604
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4604, v4525) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v4605
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4605, v4526) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v4606
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4606, v4527) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v4607
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4608,) {}
output:  v4609
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4609, v4528) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v4610
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4609, v4529) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v4611
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4610, v4530) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v4612
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4612, v4531) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v4613
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4614,) {}
output:  v4615
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4615, v4532) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v4616
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4616, v4533) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v4617
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4617, v4534) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v4618
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4619,) {}
output:  v4620
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4620, v4535) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v4621
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4621, v4536) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:02:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:03:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:03:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v4622
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4622, v4537) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:03:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v4623
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4624,) {}
output:  v4625
Processing basic block Tue Jun 11 16:03:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.864147 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:03:10 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv787_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv787_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4730, v4678) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v4731
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4731,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4732
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4732, v4679) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v4733
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4733,)
spilts:  (v4734, v4735)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v4735, v4680) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v4736
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4736, v4681) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4737
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4738,) {}
output:  v4739
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4739, v4682) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4740
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4740, v4683) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4741
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4741, v4684) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4742
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4743,) {}
output:  v4744
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4744, v4685) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4745
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4745, v4686) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4746
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4746, v4687) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4747
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4748,) {}
output:  v4749
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4749, v4688) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v4750
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4749, v4689) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v4751
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4750, v4690) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v4752
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4752, v4691) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4753
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4754,) {}
output:  v4755
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4755, v4692) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4756
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4756, v4693) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4757
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4757, v4694) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4758
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4759,) {}
output:  v4760
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4760, v4695) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4761
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4761, v4696) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4762
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4762, v4697) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4763
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4764,) {}
output:  v4765
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4765, v4698) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4766
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4766, v4699) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4767
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4767, v4700) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4768
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4769,) {}
output:  v4770
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4770, v4701) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v4771
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4770, v4702) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v4772
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4771, v4703) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v4773
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4773, v4704) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4774
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4775,) {}
output:  v4776
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4776, v4705) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4777
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4777, v4706) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4778
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4778, v4707) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4779
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4780,) {}
output:  v4781
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4781, v4708) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4782
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4782, v4709) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4783
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4783, v4710) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4784
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4785,) {}
output:  v4786
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4786, v4711) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4787
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4787, v4712) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4788
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4788, v4713) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4789
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4790,) {}
output:  v4791
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4791, v4714) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4792
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4792, v4715) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4793
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4793, v4716) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4794
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4795,) {}
output:  v4796
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4796, v4717) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4797
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4797, v4718) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4798
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4798, v4719) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4799
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4800,) {}
output:  v4801
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4801, v4720) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v4802
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4801, v4721) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4803
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4802, v4722) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v4804
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4804, v4723) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4805
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4806,) {}
output:  v4807
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4807, v4724) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4808
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4808, v4725) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4809
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4809, v4726) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
Compiled 2100000 lines at Tue Jun 11 16:03:16 2024
output:  v4810
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4811,) {}
output:  v4812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4812, v4727) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v4813
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4813, v4728) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v4814
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4814, v4729) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4815
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4816,) {}
output:  v4817
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4730, v4678) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:03:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:03:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v4731
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4731,) {}
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4732
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4732, v4679) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v4733
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4733,)
spilts:  (v4734, v4735)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v4735, v4680) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v4736
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4736, v4681) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v4737
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4738,) {}
output:  v4739
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4739, v4682) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v4740
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4740, v4683) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v4741
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4741, v4684) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v4742
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4743,) {}
output:  v4744
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4744, v4685) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v4745
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4745, v4686) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v4746
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4746, v4687) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v4747
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4748,) {}
output:  v4749
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4749, v4688) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:03:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v4750
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4749, v4689) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v4751
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4750, v4690) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v4752
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4752, v4691) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v4753
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4754,) {}
output:  v4755
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4755, v4692) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v4756
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4756, v4693) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v4757
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4757, v4694) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v4758
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4759,) {}
output:  v4760
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4760, v4695) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v4761
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4761, v4696) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v4762
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4762, v4697) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v4763
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4764,) {}
output:  v4765
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4765, v4698) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v4766
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4766, v4699) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v4767
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4767, v4700) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v4768
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4769,) {}
output:  v4770
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4770, v4701) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v4771
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4770, v4702) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v4772
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4771, v4703) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v4773
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4773, v4704) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v4774
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4775,) {}
output:  v4776
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4776, v4705) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v4777
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4777, v4706) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v4778
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4778, v4707) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v4779
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4780,) {}
output:  v4781
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4781, v4708) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v4782
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4782, v4709) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:03:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v4783
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4783, v4710) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v4784
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4785,) {}
output:  v4786
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4786, v4711) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v4787
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4787, v4712) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v4788
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4788, v4713) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v4789
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4790,) {}
output:  v4791
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4791, v4714) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v4792
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4792, v4715) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v4793
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4793, v4716) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v4794
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4795,) {}
output:  v4796
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4796, v4717) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v4797
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4797, v4718) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v4798
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4798, v4719) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v4799
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4800,) {}
output:  v4801
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4801, v4720) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v4802
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4801, v4721) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v4803
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4802, v4722) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v4804
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4804, v4723) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v4805
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4806,) {}
output:  v4807
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4807, v4724) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v4808
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4808, v4725) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v4809
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4809, v4726) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v4810
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4811,) {}
output:  v4812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4812, v4727) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v4813
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4813, v4728) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v4814
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4814, v4729) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v4815
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4816,) {}
output:  v4817
Processing basic block Tue Jun 11 16:03:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.816225 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:03:30 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv830_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv830_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4922, v4870) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v4923
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4923,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4924
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4924, v4871) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v4925
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4925,)
spilts:  (v4926, v4927)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4927, v4872) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4928
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4928, v4873) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4929
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4930,) {}
output:  v4931
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4931, v4874) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4932
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4932, v4875) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4933
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4933, v4876) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4934
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4935,) {}
output:  v4936
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4936, v4877) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v4937
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4937, v4878) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v4938
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4938, v4879) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v4939
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4940,) {}
output:  v4941
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4941, v4880) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v4942
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4941, v4881) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v4943
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v4942, v4882) {}
256 256 (1, 256, 56, 56) (256, 16, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 16, 3, 3)
output:  v4944
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4944, v4883) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4945
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4946,) {}
output:  v4947
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4947, v4884) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4948
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4948, v4885) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4949
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4949, v4886) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4950
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4951,) {}
output:  v4952
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4952, v4887) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4953
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4953, v4888) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4954
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4954, v4889) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4955
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4956,) {}
output:  v4957
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4957, v4890) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v4958
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4958, v4891) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v4959
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4959, v4892) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v4960
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4961,) {}
output:  v4962
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4962, v4893) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v4963
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4962, v4894) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v4964
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4963, v4895) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v4965
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4965, v4896) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4966
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4967,) {}
output:  v4968
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4968, v4897) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4969
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4969, v4898) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4970
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4970, v4899) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4971
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4972,) {}
output:  v4973
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4973, v4900) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4974
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4974, v4901) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4975
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4975, v4902) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4976
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4977,) {}
output:  v4978
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4978, v4903) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4979
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4979, v4904) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4980
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4980, v4905) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4981
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4982,) {}
output:  v4983
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4983, v4906) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4984
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4984, v4907) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4985
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4985, v4908) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4986
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4987,) {}
output:  v4988
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4988, v4909) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v4989
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4989, v4910) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v4990
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4990, v4911) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v4991
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4992,) {}
output:  v4993
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4993, v4912) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v4994
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4993, v4913) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4995
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4994, v4914) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v4996
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4996, v4915) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v4997
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4998,) {}
output:  v4999
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4999, v4916) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5000
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5000, v4917) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5001
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5001, v4918) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5002
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5003,) {}
output:  v5004
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5004, v4919) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5005, v4920) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5006
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5006, v4921) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5007
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5008,) {}
output:  v5009
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v4922, v4870) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:03:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:03:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v4923
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v4923,) {}
Processing basic block Tue Jun 11 16:03:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v4924
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4924, v4871) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:03:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:03:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v4925
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v4925,)
Compiled 2200000 lines at Tue Jun 11 16:03:37 2024
spilts:  (v4926, v4927)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4927, v4872) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v4928
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4928, v4873) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v4929
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4930,) {}
output:  v4931
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4931, v4874) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v4932
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4932, v4875) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v4933
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4933, v4876) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v4934
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4935,) {}
output:  v4936
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4936, v4877) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v4937
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4937, v4878) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v4938
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4938, v4879) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v4939
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4940,) {}
output:  v4941
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4941, v4880) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v4942
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4941, v4881) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v4943
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v4942, v4882) {}
256 16 (1, 256, 56, 56) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v4944
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4944, v4883) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v4945
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4946,) {}
output:  v4947
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4947, v4884) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v4948
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4948, v4885) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v4949
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4949, v4886) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v4950
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4951,) {}
output:  v4952
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4952, v4887) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v4953
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4953, v4888) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v4954
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4954, v4889) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v4955
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4956,) {}
output:  v4957
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4957, v4890) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:03:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v4958
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4958, v4891) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v4959
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4959, v4892) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v4960
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4961,) {}
output:  v4962
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4962, v4893) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v4963
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4962, v4894) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v4964
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4963, v4895) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v4965
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4965, v4896) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v4966
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4967,) {}
output:  v4968
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4968, v4897) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v4969
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4969, v4898) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v4970
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4970, v4899) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v4971
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4972,) {}
output:  v4973
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4973, v4900) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v4974
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4974, v4901) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v4975
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4975, v4902) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v4976
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4977,) {}
output:  v4978
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4978, v4903) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v4979
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4979, v4904) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v4980
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4980, v4905) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v4981
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4982,) {}
output:  v4983
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4983, v4906) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v4984
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4984, v4907) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:03:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v4985
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4985, v4908) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v4986
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4987,) {}
output:  v4988
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4988, v4909) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v4989
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v4989, v4910) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v4990
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4990, v4911) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v4991
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4992,) {}
output:  v4993
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4993, v4912) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v4994
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v4993, v4913) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v4995
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v4994, v4914) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v4996
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4996, v4915) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v4997
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v4998,) {}
output:  v4999
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v4999, v4916) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v5000
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5000, v4917) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v5001
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5001, v4918) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v5002
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5003,) {}
output:  v5004
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5004, v4919) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v5005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5005, v4920) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v5006
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5006, v4921) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:03:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v5007
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5008,) {}
output:  v5009
Processing basic block Tue Jun 11 16:03:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.776886 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:03:50 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv807_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv807_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5114, v5062) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v5115
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5115,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5116, v5063) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v5117
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5117,)
spilts:  (v5118, v5119)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5119, v5064) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5120
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5120, v5065) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5121
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5122,) {}
output:  v5123
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5123, v5066) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5124
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5124, v5067) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5125
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5125, v5068) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5126
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5127,) {}
output:  v5128
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5128, v5069) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5129
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5129, v5070) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5130
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5130, v5071) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5131
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5132,) {}
output:  v5133
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5133, v5072) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v5134
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5133, v5073) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v5135
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5134, v5074) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v5136
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5136, v5075) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5137
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5138,) {}
output:  v5139
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5139, v5076) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5140
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5140, v5077) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5141
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5141, v5078) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5142
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5143,) {}
output:  v5144
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5144, v5079) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5145
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5145, v5080) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5146
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5146, v5081) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5147
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5148,) {}
output:  v5149
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5149, v5082) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5150
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5150, v5083) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5151
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5151, v5084) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5152
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5153,) {}
output:  v5154
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5154, v5085) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v5155
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5154, v5086) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v5156
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5155, v5087) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v5157
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5157, v5088) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5158
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5159,) {}
output:  v5160
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5160, v5089) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5161
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5161, v5090) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v5162
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5162, v5091) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5163
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5164,) {}
output:  v5165
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5165, v5092) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5166
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5166, v5093) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5167
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5167, v5094) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5168
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5169,) {}
output:  v5170
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5170, v5095) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5171
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5171, v5096) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5172
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5172, v5097) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5173
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5174,) {}
output:  v5175
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5175, v5098) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5176
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5176, v5099) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5177
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5177, v5100) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5178
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5179,) {}
output:  v5180
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5180, v5101) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5181
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5181, v5102) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5182
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5182, v5103) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5183
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5184,) {}
output:  v5185
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5185, v5104) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v5186
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5185, v5105) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5187
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5186, v5106) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v5188
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5188, v5107) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5189
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5190,) {}
output:  v5191
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5191, v5108) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5192
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5192, v5109) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5193
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5193, v5110) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5194
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5195,) {}
output:  v5196
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5196, v5111) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5197
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5197, v5112) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5198
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5198, v5113) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5199
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5200,) {}
output:  v5201
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5114, v5062) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:03:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:03:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v5115
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5115,) {}
Processing basic block Tue Jun 11 16:03:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5116, v5063) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:03:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:03:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v5117
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5117,)
spilts:  (v5118, v5119)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5119, v5064) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v5120
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5120, v5065) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v5121
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5122,) {}
Compiled 2300000 lines at Tue Jun 11 16:03:58 2024
output:  v5123
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5123, v5066) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v5124
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5124, v5067) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v5125
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5125, v5068) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v5126
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5127,) {}
output:  v5128
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5128, v5069) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v5129
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5129, v5070) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v5130
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5130, v5071) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v5131
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5132,) {}
output:  v5133
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5133, v5072) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v5134
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5133, v5073) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v5135
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5134, v5074) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v5136
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5136, v5075) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v5137
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5138,) {}
output:  v5139
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5139, v5076) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v5140
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5140, v5077) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v5141
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5141, v5078) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v5142
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5143,) {}
output:  v5144
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5144, v5079) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:03:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v5145
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5145, v5080) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v5146
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5146, v5081) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v5147
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5148,) {}
output:  v5149
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5149, v5082) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v5150
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5150, v5083) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v5151
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5151, v5084) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v5152
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5153,) {}
output:  v5154
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5154, v5085) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v5155
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5154, v5086) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v5156
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5155, v5087) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v5157
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5157, v5088) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v5158
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5159,) {}
output:  v5160
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5160, v5089) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v5161
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5161, v5090) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v5162
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5162, v5091) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v5163
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5164,) {}
output:  v5165
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5165, v5092) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v5166
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5166, v5093) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v5167
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5167, v5094) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v5168
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5169,) {}
output:  v5170
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5170, v5095) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v5171
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5171, v5096) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:03:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v5172
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5172, v5097) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v5173
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5174,) {}
output:  v5175
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5175, v5098) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v5176
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5176, v5099) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v5177
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5177, v5100) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v5178
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5179,) {}
output:  v5180
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5180, v5101) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v5181
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5181, v5102) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v5182
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5182, v5103) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v5183
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5184,) {}
output:  v5185
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5185, v5104) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v5186
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5185, v5105) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v5187
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5186, v5106) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v5188
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5188, v5107) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v5189
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5190,) {}
output:  v5191
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5191, v5108) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v5192
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5192, v5109) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v5193
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5193, v5110) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v5194
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5195,) {}
output:  v5196
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5196, v5111) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v5197
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5197, v5112) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v5198
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5198, v5113) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:04:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v5199
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5200,) {}
output:  v5201
Processing basic block Tue Jun 11 16:04:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 52.139044 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:04:11 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv819_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv819_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5306, v5254) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v5307
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5307,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5308
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5308, v5255) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v5309
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5309,)
spilts:  (v5310, v5311)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5311, v5256) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5312
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5312, v5257) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5313
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5314,) {}
output:  v5315
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5315, v5258) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5316
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5316, v5259) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5317
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5317, v5260) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5318
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5319,) {}
output:  v5320
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5320, v5261) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5321
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5321, v5262) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5322
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5322, v5263) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5323
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5324,) {}
output:  v5325
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5325, v5264) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v5326
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5325, v5265) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v5327
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5326, v5266) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v5328
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5328, v5267) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5329
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5330,) {}
output:  v5331
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5331, v5268) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5332
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5332, v5269) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5333
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5333, v5270) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5334
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5335,) {}
output:  v5336
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5336, v5271) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5337
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5337, v5272) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5338
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5338, v5273) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5339
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5340,) {}
output:  v5341
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5341, v5274) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5342
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5342, v5275) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5343
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5343, v5276) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5344
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5345,) {}
output:  v5346
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5346, v5277) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v5347
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5346, v5278) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v5348
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5347, v5279) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v5349
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5349, v5280) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5350
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5351,) {}
output:  v5352
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5352, v5281) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5353
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5353, v5282) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5354
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5354, v5283) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5355
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5356,) {}
output:  v5357
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5357, v5284) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5358
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5358, v5285) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5359
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5359, v5286) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5360
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5361,) {}
output:  v5362
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5362, v5287) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5363
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5363, v5288) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5364
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5364, v5289) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5365
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5366,) {}
output:  v5367
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5367, v5290) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5368
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5368, v5291) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5369
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5369, v5292) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5370
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5371,) {}
output:  v5372
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5372, v5293) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5373
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5373, v5294) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v5374
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5374, v5295) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5375
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5376,) {}
output:  v5377
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5377, v5296) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v5378
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5377, v5297) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5379
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5378, v5298) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v5380
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5380, v5299) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5381
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5382,) {}
output:  v5383
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5383, v5300) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5384
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5384, v5301) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5385
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5385, v5302) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5386
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5387,) {}
output:  v5388
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5388, v5303) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5389
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5389, v5304) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5390
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5390, v5305) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5391
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5392,) {}
output:  v5393
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5306, v5254) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:04:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:04:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v5307
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5307,) {}
Processing basic block Tue Jun 11 16:04:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5308
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5308, v5255) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:04:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:04:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v5309
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5309,)
spilts:  (v5310, v5311)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5311, v5256) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v5312
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5312, v5257) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v5313
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5314,) {}
output:  v5315
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5315, v5258) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v5316
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5316, v5259) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v5317
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5317, v5260) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v5318
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5319,) {}
output:  v5320
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5320, v5261) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v5321
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5321, v5262) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v5322
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5322, v5263) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v5323
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5324,) {}
output:  v5325
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5325, v5264) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v5326
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5325, v5265) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v5327
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5326, v5266) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v5328
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5328, v5267) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Compiled 2400000 lines at Tue Jun 11 16:04:18 2024
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v5329
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5330,) {}
output:  v5331
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5331, v5268) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v5332
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5332, v5269) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v5333
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5333, v5270) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v5334
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5335,) {}
output:  v5336
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5336, v5271) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v5337
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5337, v5272) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v5338
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5338, v5273) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v5339
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5340,) {}
output:  v5341
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5341, v5274) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v5342
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5342, v5275) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v5343
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5343, v5276) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v5344
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5345,) {}
output:  v5346
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5346, v5277) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v5347
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5346, v5278) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v5348
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5347, v5279) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v5349
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5349, v5280) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v5350
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5351,) {}
output:  v5352
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5352, v5281) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v5353
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5353, v5282) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v5354
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5354, v5283) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v5355
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5356,) {}
output:  v5357
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5357, v5284) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v5358
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5358, v5285) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v5359
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5359, v5286) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v5360
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5361,) {}
output:  v5362
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5362, v5287) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v5363
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5363, v5288) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v5364
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5364, v5289) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v5365
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5366,) {}
output:  v5367
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5367, v5290) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v5368
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5368, v5291) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v5369
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5369, v5292) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v5370
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5371,) {}
output:  v5372
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5372, v5293) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v5373
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5373, v5294) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v5374
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5374, v5295) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v5375
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5376,) {}
output:  v5377
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5377, v5296) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v5378
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5377, v5297) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v5379
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5378, v5298) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v5380
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5380, v5299) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v5381
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5382,) {}
output:  v5383
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5383, v5300) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v5384
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5384, v5301) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v5385
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5385, v5302) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v5386
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5387,) {}
output:  v5388
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5388, v5303) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v5389
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5389, v5304) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v5390
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5390, v5305) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:04:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v5391
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5392,) {}
output:  v5393
Processing basic block Tue Jun 11 16:04:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.707029 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:04:31 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv816_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv816_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5498, v5446) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v5499
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5499,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5500
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5500, v5447) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v5501
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5501,)
spilts:  (v5502, v5503)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5503, v5448) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5504, v5449) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5505
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5506,) {}
output:  v5507
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5507, v5450) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5508
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5508, v5451) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5509
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5509, v5452) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5510
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5511,) {}
output:  v5512
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5512, v5453) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5513
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5513, v5454) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5514
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5514, v5455) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5515
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5516,) {}
output:  v5517
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5517, v5456) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v5518
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5517, v5457) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v5519
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5518, v5458) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v5520
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5520, v5459) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5521
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5522,) {}
output:  v5523
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5523, v5460) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5524
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5524, v5461) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5525
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5525, v5462) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5526
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5527,) {}
output:  v5528
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5528, v5463) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5529
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5529, v5464) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5530
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5530, v5465) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5531
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5532,) {}
output:  v5533
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5533, v5466) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5534
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5534, v5467) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5535
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5535, v5468) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5536
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5537,) {}
output:  v5538
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5538, v5469) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v5539
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5538, v5470) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v5540
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5539, v5471) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v5541
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5541, v5472) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5542
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5543,) {}
output:  v5544
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5544, v5473) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5545
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5545, v5474) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5546
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5546, v5475) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5547
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5548,) {}
output:  v5549
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5549, v5476) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5550
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5550, v5477) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5551
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5551, v5478) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5552
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5553,) {}
output:  v5554
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5554, v5479) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5555
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5555, v5480) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5556
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5556, v5481) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5557
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5558,) {}
output:  v5559
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5559, v5482) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5560
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5560, v5483) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v5561
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5561, v5484) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5562
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5563,) {}
output:  v5564
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5564, v5485) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5565
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5565, v5486) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5566
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5566, v5487) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5567
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5568,) {}
output:  v5569
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5569, v5488) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v5570
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5569, v5489) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5571
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5570, v5490) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v5572
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5572, v5491) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5573
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5574,) {}
output:  v5575
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5575, v5492) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5576
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5576, v5493) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5577
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5577, v5494) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5578
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5579,) {}
output:  v5580
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5580, v5495) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5581
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5581, v5496) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5582
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5582, v5497) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5583
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5584,) {}
output:  v5585
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5498, v5446) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v5499
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5499,) {}
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5500
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5500, v5447) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v5501
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5501,)
spilts:  (v5502, v5503)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5503, v5448) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v5504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5504, v5449) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:04:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v5505
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5506,) {}
output:  v5507
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5507, v5450) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v5508
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5508, v5451) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v5509
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5509, v5452) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v5510
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5511,) {}
output:  v5512
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5512, v5453) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v5513
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5513, v5454) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v5514
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5514, v5455) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v5515
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5516,) {}
output:  v5517
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5517, v5456) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v5518
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5517, v5457) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v5519
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5518, v5458) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v5520
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5520, v5459) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v5521
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5522,) {}
output:  v5523
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5523, v5460) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v5524
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5524, v5461) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v5525
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5525, v5462) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v5526
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5527,) {}
output:  v5528
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5528, v5463) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v5529
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5529, v5464) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v5530
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5530, v5465) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v5531
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5532,) {}
output:  v5533
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5533, v5466) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v5534
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5534, v5467) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v5535
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5535, v5468) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v5536
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
Compiled 2500000 lines at Tue Jun 11 16:04:39 2024
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5537,) {}
output:  v5538
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5538, v5469) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v5539
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5538, v5470) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:04:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v5540
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5539, v5471) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v5541
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5541, v5472) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v5542
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5543,) {}
output:  v5544
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5544, v5473) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v5545
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5545, v5474) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v5546
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5546, v5475) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v5547
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5548,) {}
output:  v5549
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5549, v5476) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v5550
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5550, v5477) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v5551
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5551, v5478) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v5552
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5553,) {}
output:  v5554
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5554, v5479) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v5555
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5555, v5480) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v5556
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5556, v5481) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v5557
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5558,) {}
output:  v5559
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5559, v5482) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v5560
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5560, v5483) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v5561
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5561, v5484) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v5562
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5563,) {}
output:  v5564
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5564, v5485) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v5565
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5565, v5486) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v5566
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5566, v5487) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:04:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v5567
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5568,) {}
output:  v5569
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5569, v5488) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v5570
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5569, v5489) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v5571
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5570, v5490) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v5572
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5572, v5491) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v5573
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5574,) {}
output:  v5575
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5575, v5492) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v5576
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5576, v5493) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v5577
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5577, v5494) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v5578
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5579,) {}
output:  v5580
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5580, v5495) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v5581
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5581, v5496) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v5582
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5582, v5497) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v5583
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5584,) {}
output:  v5585
Processing basic block Tue Jun 11 16:04:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 52.496195 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:04:51 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv813_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv813_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5690, v5638) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v5691
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5691,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5692, v5639) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v5693
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5693,)
spilts:  (v5694, v5695)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5695, v5640) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5696, v5641) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5697
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5698,) {}
output:  v5699
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5699, v5642) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5700
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5700, v5643) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5701
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5701, v5644) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5702
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5703,) {}
output:  v5704
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5704, v5645) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5705
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5705, v5646) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5706
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5706, v5647) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5707
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5708,) {}
output:  v5709
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5709, v5648) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v5710
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5709, v5649) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v5711
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5710, v5650) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v5712
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5712, v5651) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5713
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5714,) {}
output:  v5715
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5715, v5652) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5716
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5716, v5653) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5717
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5717, v5654) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5718
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5719,) {}
output:  v5720
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5720, v5655) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5721
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5721, v5656) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5722
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5722, v5657) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5723
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5724,) {}
output:  v5725
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5725, v5658) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5726
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5726, v5659) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5727
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5727, v5660) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5728
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5729,) {}
output:  v5730
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5730, v5661) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v5731
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5730, v5662) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v5732
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5731, v5663) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v5733
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5733, v5664) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5734
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5735,) {}
output:  v5736
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5736, v5665) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5737
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5737, v5666) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5738
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5738, v5667) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5739
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5740,) {}
output:  v5741
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5741, v5668) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5742
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5742, v5669) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5743
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5743, v5670) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5744
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5745,) {}
output:  v5746
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5746, v5671) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5747
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5747, v5672) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v5748
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5748, v5673) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5749
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5750,) {}
output:  v5751
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5751, v5674) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5752
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5752, v5675) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5753
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5753, v5676) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5754
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5755,) {}
output:  v5756
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5756, v5677) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5757
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5757, v5678) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5758
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5758, v5679) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5759
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5760,) {}
output:  v5761
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5761, v5680) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v5762
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5761, v5681) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5763
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5762, v5682) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v5764
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5764, v5683) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5765
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5766,) {}
output:  v5767
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5767, v5684) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5768
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5768, v5685) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5769
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5769, v5686) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5770
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5771,) {}
output:  v5772
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5772, v5687) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5773
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5773, v5688) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5774
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5774, v5689) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5775
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5776,) {}
output:  v5777
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5690, v5638) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:04:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:04:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v5691
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5691,) {}
Processing basic block Tue Jun 11 16:04:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5692, v5639) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:04:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:04:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v5693
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5693,)
spilts:  (v5694, v5695)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5695, v5640) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v5696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5696, v5641) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v5697
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5698,) {}
output:  v5699
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5699, v5642) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v5700
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5700, v5643) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v5701
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5701, v5644) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v5702
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5703,) {}
output:  v5704
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5704, v5645) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v5705
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5705, v5646) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v5706
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5706, v5647) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v5707
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5708,) {}
output:  v5709
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5709, v5648) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v5710
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5709, v5649) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v5711
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5710, v5650) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v5712
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5712, v5651) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v5713
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5714,) {}
output:  v5715
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5715, v5652) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v5716
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5716, v5653) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v5717
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5717, v5654) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v5718
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5719,) {}
output:  v5720
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5720, v5655) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v5721
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5721, v5656) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:04:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v5722
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5722, v5657) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v5723
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5724,) {}
output:  v5725
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5725, v5658) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v5726
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5726, v5659) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v5727
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5727, v5660) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v5728
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5729,) {}
output:  v5730
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5730, v5661) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v5731
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5730, v5662) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v5732
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5731, v5663) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v5733
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5733, v5664) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v5734
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5735,) {}
output:  v5736
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5736, v5665) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v5737
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5737, v5666) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v5738
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5738, v5667) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v5739
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5740,) {}
output:  v5741
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5741, v5668) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v5742
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5742, v5669) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v5743
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5743, v5670) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Compiled 2600000 lines at Tue Jun 11 16:05:00 2024
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v5744
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5745,) {}
output:  v5746
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5746, v5671) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v5747
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5747, v5672) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v5748
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5748, v5673) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:05:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v5749
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5750,) {}
output:  v5751
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5751, v5674) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v5752
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5752, v5675) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v5753
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5753, v5676) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v5754
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5755,) {}
output:  v5756
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5756, v5677) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v5757
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5757, v5678) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v5758
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5758, v5679) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v5759
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5760,) {}
output:  v5761
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5761, v5680) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v5762
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5761, v5681) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v5763
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5762, v5682) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v5764
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5764, v5683) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v5765
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5766,) {}
output:  v5767
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5767, v5684) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v5768
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5768, v5685) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v5769
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5769, v5686) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v5770
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5771,) {}
output:  v5772
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5772, v5687) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v5773
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5773, v5688) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v5774
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5774, v5689) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:05:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v5775
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5776,) {}
output:  v5777
Processing basic block Tue Jun 11 16:05:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.829576 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:05:12 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv810_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv810_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5882, v5830) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v5883
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5883,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5884, v5831) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v5885
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5885,)
spilts:  (v5886, v5887)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5887, v5832) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5888
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5888, v5833) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5889
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5890,) {}
output:  v5891
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5891, v5834) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5892
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5892, v5835) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5893
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5893, v5836) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5894
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5895,) {}
output:  v5896
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5896, v5837) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v5897
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5897, v5838) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v5898
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5898, v5839) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v5899
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5900,) {}
output:  v5901
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5901, v5840) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v5902
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5901, v5841) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v5903
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5902, v5842) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v5904
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5904, v5843) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5905
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5906,) {}
output:  v5907
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5907, v5844) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5908
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5908, v5845) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5909
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5909, v5846) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5910
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5911,) {}
output:  v5912
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5912, v5847) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5913
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5913, v5848) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5914
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5914, v5849) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5915
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5916,) {}
output:  v5917
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5917, v5850) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v5918
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5918, v5851) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v5919
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5919, v5852) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v5920
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5921,) {}
output:  v5922
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5922, v5853) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v5923
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5922, v5854) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v5924
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5923, v5855) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v5925
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5925, v5856) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5926
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5927,) {}
output:  v5928
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5928, v5857) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5929
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5929, v5858) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5930
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5930, v5859) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5931
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5932,) {}
output:  v5933
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5933, v5860) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5934
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5934, v5861) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v5935
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5935, v5862) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5936
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5937,) {}
output:  v5938
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5938, v5863) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5939
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5939, v5864) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5940
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5940, v5865) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5941
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5942,) {}
output:  v5943
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5943, v5866) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5944
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5944, v5867) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5945
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5945, v5868) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5946
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5947,) {}
output:  v5948
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5948, v5869) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v5949
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5949, v5870) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v5950
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5950, v5871) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v5951
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5952,) {}
output:  v5953
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5953, v5872) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v5954
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5953, v5873) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5955
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5954, v5874) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v5956
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5956, v5875) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5957
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5958,) {}
output:  v5959
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5959, v5876) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5960
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5960, v5877) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5961
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5961, v5878) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5962
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5963,) {}
output:  v5964
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5964, v5879) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v5965
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5965, v5880) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v5966
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5966, v5881) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v5967
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5968,) {}
output:  v5969
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v5882, v5830) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:05:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:05:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v5883
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v5883,) {}
Processing basic block Tue Jun 11 16:05:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v5884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5884, v5831) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:05:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:05:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v5885
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v5885,)
spilts:  (v5886, v5887)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5887, v5832) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v5888
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5888, v5833) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v5889
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5890,) {}
output:  v5891
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5891, v5834) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v5892
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5892, v5835) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v5893
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5893, v5836) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v5894
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5895,) {}
output:  v5896
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5896, v5837) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v5897
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5897, v5838) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v5898
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5898, v5839) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v5899
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5900,) {}
output:  v5901
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5901, v5840) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v5902
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5901, v5841) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v5903
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5902, v5842) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v5904
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5904, v5843) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v5905
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5906,) {}
output:  v5907
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5907, v5844) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v5908
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5908, v5845) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v5909
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5909, v5846) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v5910
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5911,) {}
output:  v5912
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5912, v5847) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v5913
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5913, v5848) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v5914
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5914, v5849) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v5915
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5916,) {}
output:  v5917
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5917, v5850) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v5918
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5918, v5851) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v5919
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5919, v5852) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v5920
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5921,) {}
output:  v5922
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5922, v5853) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v5923
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5922, v5854) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v5924
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5923, v5855) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v5925
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5925, v5856) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v5926
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5927,) {}
output:  v5928
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5928, v5857) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v5929
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5929, v5858) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v5930
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5930, v5859) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v5931
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5932,) {}
output:  v5933
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5933, v5860) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v5934
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v5934, v5861) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v5935
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5935, v5862) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v5936
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5937,) {}
output:  v5938
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5938, v5863) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v5939
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5939, v5864) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v5940
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5940, v5865) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:05:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v5941
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5942,) {}
output:  v5943
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5943, v5866) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v5944
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5944, v5867) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v5945
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5945, v5868) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v5946
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5947,) {}
output:  v5948
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5948, v5869) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v5949
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5949, v5870) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v5950
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5950, v5871) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Compiled 2700000 lines at Tue Jun 11 16:05:21 2024
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v5951
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5952,) {}
output:  v5953
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5953, v5872) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v5954
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v5953, v5873) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v5955
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v5954, v5874) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v5956
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5956, v5875) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v5957
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5958,) {}
output:  v5959
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5959, v5876) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v5960
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5960, v5877) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v5961
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5961, v5878) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v5962
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5963,) {}
output:  v5964
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5964, v5879) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v5965
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v5965, v5880) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v5966
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v5966, v5881) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:05:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v5967
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v5968,) {}
output:  v5969
Processing basic block Tue Jun 11 16:05:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.694870 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:05:32 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv826_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv826_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6074, v6022) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v6075
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6075,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6076
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6076, v6023) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v6077
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v6077,)
spilts:  (v6078, v6079)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6079, v6024) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6080
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6080, v6025) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6081
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6082,) {}
output:  v6083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6083, v6026) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6084
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6084, v6027) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6085
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6085, v6028) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6086
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6087,) {}
output:  v6088
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6088, v6029) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6089
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6089, v6030) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6090
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6090, v6031) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6091
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6092,) {}
output:  v6093
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6093, v6032) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v6094
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6093, v6033) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v6095
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6094, v6034) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v6096
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6096, v6035) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6097
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6098,) {}
output:  v6099
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6099, v6036) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6100
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6100, v6037) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6101
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6101, v6038) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6102
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6103,) {}
output:  v6104
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6104, v6039) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6105
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6105, v6040) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6106
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6106, v6041) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6107
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6108,) {}
output:  v6109
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6109, v6042) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6110
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6110, v6043) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6111
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6111, v6044) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6112
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6113,) {}
output:  v6114
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6114, v6045) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v6115
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6114, v6046) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v6116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6115, v6047) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v6117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6117, v6048) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6118
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6119,) {}
output:  v6120
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6120, v6049) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6121
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6121, v6050) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6122
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6122, v6051) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6123
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6124,) {}
output:  v6125
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6125, v6052) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6126
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6126, v6053) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6127
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6127, v6054) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6128
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6129,) {}
output:  v6130
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6130, v6055) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6131
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6131, v6056) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6132
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6132, v6057) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6133
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6134,) {}
output:  v6135
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6135, v6058) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6136
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6136, v6059) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6137
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6137, v6060) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6138
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6139,) {}
output:  v6140
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6140, v6061) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6141
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6141, v6062) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6142
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6142, v6063) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6143
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6144,) {}
output:  v6145
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6145, v6064) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v6146
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6145, v6065) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6147
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6146, v6066) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v6148
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6148, v6067) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6149
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6150,) {}
output:  v6151
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6151, v6068) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6152
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6152, v6069) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v6153
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6153, v6070) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6154
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6155,) {}
output:  v6156
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6156, v6071) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6157
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v6157, v6072) {}
1024 1024 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 64, 3, 3)
output:  v6158
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6158, v6073) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6159
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6160,) {}
output:  v6161
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6074, v6022) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v6075
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6075,) {}
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6076
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6076, v6023) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v6077
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v6077,)
spilts:  (v6078, v6079)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6079, v6024) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v6080
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6080, v6025) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:05:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v6081
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6082,) {}
output:  v6083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6083, v6026) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v6084
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6084, v6027) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v6085
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6085, v6028) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v6086
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6087,) {}
output:  v6088
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6088, v6029) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v6089
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6089, v6030) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v6090
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6090, v6031) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v6091
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6092,) {}
output:  v6093
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6093, v6032) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v6094
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6093, v6033) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v6095
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6094, v6034) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v6096
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6096, v6035) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v6097
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6098,) {}
output:  v6099
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6099, v6036) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v6100
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6100, v6037) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v6101
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6101, v6038) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v6102
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6103,) {}
output:  v6104
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6104, v6039) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v6105
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6105, v6040) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v6106
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6106, v6041) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v6107
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6108,) {}
output:  v6109
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6109, v6042) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v6110
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6110, v6043) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v6111
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6111, v6044) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v6112
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6113,) {}
output:  v6114
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6114, v6045) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v6115
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6114, v6046) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v6116
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6115, v6047) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v6117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6117, v6048) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v6118
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6119,) {}
output:  v6120
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6120, v6049) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v6121
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6121, v6050) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v6122
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6122, v6051) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v6123
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6124,) {}
output:  v6125
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6125, v6052) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v6126
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6126, v6053) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v6127
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6127, v6054) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v6128
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6129,) {}
output:  v6130
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6130, v6055) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v6131
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6131, v6056) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v6132
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6132, v6057) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v6133
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6134,) {}
output:  v6135
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6135, v6058) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v6136
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6136, v6059) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v6137
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6137, v6060) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v6138
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6139,) {}
output:  v6140
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6140, v6061) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v6141
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6141, v6062) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:05:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v6142
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6142, v6063) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v6143
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6144,) {}
output:  v6145
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6145, v6064) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v6146
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6145, v6065) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v6147
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6146, v6066) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v6148
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6148, v6067) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v6149
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6150,) {}
output:  v6151
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6151, v6068) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v6152
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6152, v6069) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v6153
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6153, v6070) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v6154
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6155,) {}
output:  v6156
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6156, v6071) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v6157
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v6157, v6072) {}
1024 64 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-118-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Compiled 2800000 lines at Tue Jun 11 16:05:42 2024
output:  v6158
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6158, v6073) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v6159
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6160,) {}
output:  v6161
Processing basic block Tue Jun 11 16:05:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-118-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.827669 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:05:52 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv823_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv823_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6266, v6214) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v6267
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6267,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6268
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6268, v6215) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v6269
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v6269,)
spilts:  (v6270, v6271)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6271, v6216) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6272
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6272, v6217) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6273
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6274,) {}
output:  v6275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6275, v6218) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6276, v6219) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6277
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6277, v6220) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6278
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6279,) {}
output:  v6280
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6280, v6221) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6281
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6281, v6222) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6282
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6282, v6223) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6283
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6284,) {}
output:  v6285
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6285, v6224) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v6286
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6285, v6225) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v6287
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6286, v6226) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v6288
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6288, v6227) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6289
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6290,) {}
output:  v6291
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6291, v6228) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6292
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6292, v6229) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6293
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6293, v6230) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6294
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6295,) {}
output:  v6296
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6296, v6231) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6297
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6297, v6232) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6298
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6298, v6233) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6299
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6300,) {}
output:  v6301
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6301, v6234) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6302
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6302, v6235) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6303
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6303, v6236) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6304
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6305,) {}
output:  v6306
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6306, v6237) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v6307
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6306, v6238) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v6308
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6307, v6239) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v6309
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6309, v6240) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6310
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6311,) {}
output:  v6312
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6312, v6241) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6313
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6313, v6242) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6314
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6314, v6243) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6315
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6316,) {}
output:  v6317
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6317, v6244) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6318
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6318, v6245) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6319
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6319, v6246) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6320
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6321,) {}
output:  v6322
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6322, v6247) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6323
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6323, v6248) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6324
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6324, v6249) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6325
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6326,) {}
output:  v6327
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6327, v6250) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6328
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6328, v6251) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6329
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6329, v6252) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6330
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6331,) {}
output:  v6332
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6332, v6253) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6333
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6333, v6254) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6334
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6334, v6255) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6335
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6336,) {}
output:  v6337
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6337, v6256) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v6338
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6337, v6257) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6339
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6338, v6258) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v6340
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6340, v6259) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6341
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6342,) {}
output:  v6343
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6343, v6260) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6344
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v6344, v6261) {}
1024 1024 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 64, 3, 3)
output:  v6345
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6345, v6262) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6346
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6347,) {}
output:  v6348
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6348, v6263) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6349
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6349, v6264) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v6350
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6350, v6265) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6351
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6352,) {}
output:  v6353
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6266, v6214) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:05:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:05:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v6267
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6267,) {}
Processing basic block Tue Jun 11 16:05:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6268
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6268, v6215) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:05:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:05:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v6269
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v6269,)
spilts:  (v6270, v6271)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6271, v6216) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v6272
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6272, v6217) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v6273
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6274,) {}
output:  v6275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6275, v6218) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v6276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6276, v6219) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v6277
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6277, v6220) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v6278
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6279,) {}
output:  v6280
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6280, v6221) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v6281
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6281, v6222) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v6282
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6282, v6223) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v6283
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6284,) {}
output:  v6285
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6285, v6224) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v6286
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6285, v6225) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v6287
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6286, v6226) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v6288
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6288, v6227) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v6289
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6290,) {}
output:  v6291
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6291, v6228) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v6292
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6292, v6229) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v6293
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6293, v6230) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v6294
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6295,) {}
output:  v6296
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6296, v6231) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v6297
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6297, v6232) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v6298
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6298, v6233) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:06:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v6299
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6300,) {}
output:  v6301
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6301, v6234) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v6302
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6302, v6235) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v6303
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6303, v6236) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v6304
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6305,) {}
output:  v6306
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6306, v6237) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v6307
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6306, v6238) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v6308
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6307, v6239) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v6309
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6309, v6240) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v6310
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6311,) {}
output:  v6312
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6312, v6241) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v6313
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6313, v6242) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v6314
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6314, v6243) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v6315
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6316,) {}
output:  v6317
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6317, v6244) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v6318
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6318, v6245) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v6319
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6319, v6246) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v6320
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6321,) {}
output:  v6322
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6322, v6247) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v6323
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6323, v6248) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v6324
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6324, v6249) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v6325
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6326,) {}
output:  v6327
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6327, v6250) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v6328
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6328, v6251) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:06:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v6329
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6329, v6252) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v6330
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6331,) {}
output:  v6332
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6332, v6253) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v6333
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6333, v6254) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v6334
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6334, v6255) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v6335
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6336,) {}
output:  v6337
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6337, v6256) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v6338
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6337, v6257) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v6339
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6338, v6258) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v6340
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6340, v6259) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v6341
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6342,) {}
output:  v6343
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6343, v6260) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v6344
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v6344, v6261) {}
1024 64 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-111-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v6345
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6345, v6262) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v6346
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6347,) {}
output:  v6348
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6348, v6263) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v6349
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6349, v6264) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v6350
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6350, v6265) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:06:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v6351
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6352,) {}
output:  v6353
Processing basic block Tue Jun 11 16:06:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-111-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.751375 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:06:12 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv833_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv833_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
Compiled 2900000 lines at Tue Jun 11 16:06:13 2024
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6458, v6406) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v6459
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6459,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6460
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6460, v6407) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v6461
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v6461,)
spilts:  (v6462, v6463)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6463, v6408) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6464, v6409) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6465
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6466,) {}
output:  v6467
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6467, v6410) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6468, v6411) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6469, v6412) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6470
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6471,) {}
output:  v6472
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6472, v6413) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6473
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6473, v6414) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6474
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6474, v6415) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6475
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6476,) {}
output:  v6477
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6477, v6416) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v6478
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6477, v6417) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v6479
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6478, v6418) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v6480
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6480, v6419) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6481
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6482,) {}
output:  v6483
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6483, v6420) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6484
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6484, v6421) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6485
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6485, v6422) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6486
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6487,) {}
output:  v6488
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6488, v6423) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6489
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6489, v6424) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6490
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6490, v6425) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6491
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6492,) {}
output:  v6493
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6493, v6426) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6494
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6494, v6427) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6495
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6495, v6428) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6496
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6497,) {}
output:  v6498
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6498, v6429) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v6499
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6498, v6430) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v6500
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v6499, v6431) {}
512 512 (1, 512, 28, 28) (512, 32, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 32, 3, 3)
output:  v6501
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6501, v6432) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6502
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6503,) {}
output:  v6504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6504, v6433) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6505
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6505, v6434) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6506
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6506, v6435) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6507
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6508,) {}
output:  v6509
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6509, v6436) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6510
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6510, v6437) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6511
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6511, v6438) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6512
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6513,) {}
output:  v6514
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6514, v6439) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6515
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6515, v6440) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6516
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6516, v6441) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6517
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6518,) {}
output:  v6519
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6519, v6442) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6520
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6520, v6443) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6521
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6521, v6444) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6522
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6523,) {}
output:  v6524
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6524, v6445) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6525
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6525, v6446) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6526
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6526, v6447) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6527
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6528,) {}
output:  v6529
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6529, v6448) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v6530
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6529, v6449) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6531
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6530, v6450) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v6532
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6532, v6451) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6533
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6534,) {}
output:  v6535
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6535, v6452) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6536
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6536, v6453) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v6537
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6537, v6454) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6538
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6539,) {}
output:  v6540
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6540, v6455) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6541
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6541, v6456) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v6542
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6542, v6457) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6543
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6544,) {}
output:  v6545
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6458, v6406) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:06:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:06:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v6459
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6459,) {}
Processing basic block Tue Jun 11 16:06:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6460
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6460, v6407) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:06:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:06:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v6461
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v6461,)
spilts:  (v6462, v6463)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6463, v6408) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v6464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6464, v6409) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v6465
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6466,) {}
output:  v6467
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6467, v6410) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v6468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6468, v6411) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v6469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6469, v6412) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v6470
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6471,) {}
output:  v6472
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6472, v6413) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v6473
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6473, v6414) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v6474
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6474, v6415) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v6475
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6476,) {}
output:  v6477
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6477, v6416) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v6478
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6477, v6417) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v6479
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6478, v6418) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v6480
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6480, v6419) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v6481
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6482,) {}
output:  v6483
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6483, v6420) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v6484
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6484, v6421) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v6485
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6485, v6422) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v6486
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6487,) {}
output:  v6488
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6488, v6423) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v6489
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6489, v6424) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v6490
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6490, v6425) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v6491
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6492,) {}
output:  v6493
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6493, v6426) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:06:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v6494
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6494, v6427) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v6495
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6495, v6428) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v6496
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6497,) {}
output:  v6498
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6498, v6429) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v6499
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6498, v6430) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v6500
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v6499, v6431) {}
512 32 (1, 512, 28, 28) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v6501
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6501, v6432) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v6502
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6503,) {}
output:  v6504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6504, v6433) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v6505
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6505, v6434) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v6506
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6506, v6435) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v6507
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6508,) {}
output:  v6509
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6509, v6436) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v6510
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6510, v6437) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v6511
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6511, v6438) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v6512
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6513,) {}
output:  v6514
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6514, v6439) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v6515
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6515, v6440) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v6516
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6516, v6441) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v6517
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6518,) {}
output:  v6519
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6519, v6442) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v6520
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6520, v6443) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:06:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v6521
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6521, v6444) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v6522
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6523,) {}
output:  v6524
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6524, v6445) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v6525
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6525, v6446) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v6526
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6526, v6447) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v6527
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6528,) {}
output:  v6529
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6529, v6448) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v6530
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6529, v6449) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v6531
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6530, v6450) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v6532
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6532, v6451) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v6533
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6534,) {}
output:  v6535
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6535, v6452) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v6536
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6536, v6453) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v6537
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6537, v6454) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v6538
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6539,) {}
output:  v6540
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6540, v6455) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v6541
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6541, v6456) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v6542
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6542, v6457) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:06:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v6543
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6544,) {}
output:  v6545
Processing basic block Tue Jun 11 16:06:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.609039 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:06:33 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv247_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split248_fwd1', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv144_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv144_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv836_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv836_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6650, v6598) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v6651
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6651,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6652
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6652, v6599) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
Compiled 3000000 lines at Tue Jun 11 16:06:39 2024
output:  v6653
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v6653,)
spilts:  (v6654, v6655)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6655, v6600) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6656, v6601) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6657
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6658,) {}
output:  v6659
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6659, v6602) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6660
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6660, v6603) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6661, v6604) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6662
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6663,) {}
output:  v6664
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6664, v6605) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6665
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6665, v6606) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6666
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6666, v6607) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6667
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6668,) {}
output:  v6669
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6669, v6608) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v6670
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6669, v6609) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v6671
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6670, v6610) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v6672
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6672, v6611) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6673
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6674,) {}
output:  v6675
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6675, v6612) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6676
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6676, v6613) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6677
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6677, v6614) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6678
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6679,) {}
output:  v6680
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6680, v6615) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6681
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6681, v6616) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6682
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6682, v6617) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6683
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6684,) {}
output:  v6685
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6685, v6618) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6686
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6686, v6619) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6687
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6687, v6620) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6688
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6689,) {}
output:  v6690
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6690, v6621) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v6691
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6690, v6622) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v6692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6691, v6623) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v6693
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6693, v6624) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6694
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6695,) {}
output:  v6696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6696, v6625) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6697
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6697, v6626) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6698
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6698, v6627) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6699
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6700,) {}
output:  v6701
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6701, v6628) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6702
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6702, v6629) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6703
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6703, v6630) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6704
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6705,) {}
output:  v6706
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6706, v6631) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6707
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6707, v6632) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6708
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6708, v6633) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6709
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6710,) {}
output:  v6711
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6711, v6634) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6712
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6712, v6635) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6713
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6713, v6636) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6714
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6715,) {}
output:  v6716
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6716, v6637) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6717
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6717, v6638) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6718
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6718, v6639) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6719
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6720,) {}
output:  v6721
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6721, v6640) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v6722
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6721, v6641) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6723
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v6722, v6642) {}
1024 1024 (1, 1024, 14, 14) (1024, 64, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 64, 3, 3)
output:  v6724
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6724, v6643) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6725
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6726,) {}
output:  v6727
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6727, v6644) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6728
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6728, v6645) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v6729
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6729, v6646) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6730
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6731,) {}
output:  v6732
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6732, v6647) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6733
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6733, v6648) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v6734
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6734, v6649) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6735
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6736,) {}
output:  v6737
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6650, v6598) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v6651
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6651,) {}
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6652
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6652, v6599) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v6653
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v6653,)
spilts:  (v6654, v6655)
MULTIOUTPUT size:  (1, 256, 56, 56)
MULTIOUTPUT size:  (1, 128, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6655, v6600) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v6656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6656, v6601) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v6657
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6658,) {}
output:  v6659
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6659, v6602) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v6660
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6660, v6603) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v6661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6661, v6604) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:06:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v6662
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6663,) {}
output:  v6664
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6664, v6605) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v6665
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6665, v6606) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v6666
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6666, v6607) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v6667
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6668,) {}
output:  v6669
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6669, v6608) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v6670
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6669, v6609) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v6671
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6670, v6610) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v6672
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6672, v6611) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v6673
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6674,) {}
output:  v6675
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6675, v6612) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v6676
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6676, v6613) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v6677
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6677, v6614) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v6678
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6679,) {}
output:  v6680
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6680, v6615) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v6681
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6681, v6616) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v6682
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6682, v6617) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v6683
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6684,) {}
output:  v6685
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6685, v6618) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v6686
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6686, v6619) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v6687
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6687, v6620) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v6688
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6689,) {}
output:  v6690
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6690, v6621) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v6691
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6690, v6622) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v6692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6691, v6623) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v6693
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6693, v6624) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v6694
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6695,) {}
output:  v6696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6696, v6625) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v6697
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6697, v6626) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v6698
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6698, v6627) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v6699
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6700,) {}
output:  v6701
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6701, v6628) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v6702
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6702, v6629) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v6703
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6703, v6630) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v6704
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6705,) {}
output:  v6706
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6706, v6631) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v6707
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6707, v6632) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v6708
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6708, v6633) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v6709
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6710,) {}
output:  v6711
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6711, v6634) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v6712
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6712, v6635) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v6713
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6713, v6636) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v6714
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6715,) {}
output:  v6716
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6716, v6637) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v6717
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6717, v6638) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v6718
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6718, v6639) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v6719
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6720,) {}
output:  v6721
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6721, v6640) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v6722
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6721, v6641) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v6723
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v6722, v6642) {}
1024 64 (1, 1024, 14, 14) (1024, 64, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-104-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:06:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v6724
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6724, v6643) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v6725
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6726,) {}
output:  v6727
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6727, v6644) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v6728
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6728, v6645) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v6729
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6729, v6646) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v6730
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6731,) {}
output:  v6732
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6732, v6647) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v6733
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6733, v6648) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v6734
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6734, v6649) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v6735
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6736,) {}
output:  v6737
Processing basic block Tue Jun 11 16:06:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-104-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 52.346706 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:06:53 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv1384_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8, bias=False)
node:  Conv
node input:  ['Conv1384_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6844, v6791) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v6845
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6845,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6846
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6846, v6792) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v6847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6846, v6793) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v6848
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6847, v6794) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6849, v6795) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6850
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6851,) {}
output:  v6852
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6852, v6796) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6853
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6853, v6797) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6854, v6798) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6855
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6856,) {}
output:  v6857
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6857, v6799) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v6858
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6858, v6800) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v6859
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6859, v6801) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v6860
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6861,) {}
output:  v6862
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6862, v6802) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v6863
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6862, v6803) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v6864
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6863, v6804) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v6865
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6865, v6805) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6866
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6867,) {}
output:  v6868
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6868, v6806) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6869
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8, bias=False)>
args:  (v6869, v6807) {}
256 256 (1, 256, 28, 28) (256, 32, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 32, 3, 3)
output:  v6870
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6870, v6808) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6871
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6872,) {}
output:  v6873
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6873, v6809) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6874
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6874, v6810) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6875
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6875, v6811) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6876
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6877,) {}
Compiled 3100000 lines at Tue Jun 11 16:06:59 2024
output:  v6878
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6878, v6812) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v6879
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6879, v6813) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v6880
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6880, v6814) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v6881
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6882,) {}
output:  v6883
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6883, v6815) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v6884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6883, v6816) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v6885
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6884, v6817) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v6886
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6886, v6818) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6887
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6888,) {}
output:  v6889
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6889, v6819) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6890
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6890, v6820) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6891
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6891, v6821) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6892
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6893,) {}
output:  v6894
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6894, v6822) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6895
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6895, v6823) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6896
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6896, v6824) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6897
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6898,) {}
output:  v6899
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6899, v6825) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6900
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6900, v6826) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6901
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6901, v6827) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6902
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6903,) {}
output:  v6904
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6904, v6828) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6905
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6905, v6829) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6906
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6906, v6830) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6907
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6908,) {}
output:  v6909
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6909, v6831) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v6910
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6910, v6832) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v6911
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6911, v6833) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v6912
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6913,) {}
output:  v6914
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6914, v6834) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v6915
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6914, v6835) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6916
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6915, v6836) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v6917
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6917, v6837) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6918
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6919,) {}
output:  v6920
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6920, v6838) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6921
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6921, v6839) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v6922
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6922, v6840) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6923
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6924,) {}
output:  v6925
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6925, v6841) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v6926
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6926, v6842) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v6927
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6927, v6843) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v6928
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6929,) {}
output:  v6930
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v6844, v6791) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v6845
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v6845,) {}
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v6846
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6846, v6792) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v6847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6846, v6793) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v6848
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6847, v6794) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v6849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6849, v6795) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v6850
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6851,) {}
output:  v6852
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6852, v6796) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v6853
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6853, v6797) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:07:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v6854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6854, v6798) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v6855
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6856,) {}
output:  v6857
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6857, v6799) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v6858
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6858, v6800) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v6859
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6859, v6801) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v6860
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6861,) {}
output:  v6862
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6862, v6802) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v6863
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6862, v6803) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v6864
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6863, v6804) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v6865
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6865, v6805) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v6866
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6867,) {}
output:  v6868
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6868, v6806) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v6869
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8, bias=False)>
args:  (v6869, v6807) {}
256 32 (1, 256, 28, 28) (256, 32, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v6870
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6870, v6808) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v6871
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6872,) {}
output:  v6873
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6873, v6809) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v6874
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6874, v6810) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v6875
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6875, v6811) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v6876
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6877,) {}
output:  v6878
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6878, v6812) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v6879
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6879, v6813) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v6880
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6880, v6814) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v6881
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6882,) {}
output:  v6883
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6883, v6815) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v6884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6883, v6816) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v6885
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6884, v6817) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:07:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v6886
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6886, v6818) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v6887
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6888,) {}
output:  v6889
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6889, v6819) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v6890
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6890, v6820) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v6891
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6891, v6821) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v6892
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6893,) {}
output:  v6894
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6894, v6822) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v6895
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6895, v6823) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v6896
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6896, v6824) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v6897
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6898,) {}
output:  v6899
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6899, v6825) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v6900
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6900, v6826) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v6901
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6901, v6827) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v6902
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6903,) {}
output:  v6904
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6904, v6828) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v6905
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6905, v6829) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v6906
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6906, v6830) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v6907
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6908,) {}
output:  v6909
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6909, v6831) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v6910
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6910, v6832) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v6911
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6911, v6833) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v6912
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6913,) {}
output:  v6914
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6914, v6834) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:07:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v6915
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v6914, v6835) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v6916
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v6915, v6836) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v6917
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6917, v6837) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v6918
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6919,) {}
output:  v6920
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6920, v6838) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v6921
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6921, v6839) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v6922
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6922, v6840) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v6923
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6924,) {}
output:  v6925
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6925, v6841) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v6926
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v6926, v6842) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v6927
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v6927, v6843) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v6928
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v6929,) {}
output:  v6930
Processing basic block Tue Jun 11 16:07:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.912857 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:07:13 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv1320_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Split
node:  Conv
node input:  ['Split1321_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7035, v6983) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v7036
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7036,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7037
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7037, v6984) {}
64 384 (1, 64, 56, 56) (384, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (384, 64, 1, 1)
output:  v7038
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v7038,)
spilts:  (v7039, v7040)
MULTIOUTPUT size:  (1, 128, 56, 56)
MULTIOUTPUT size:  (1, 256, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7039, v6985) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7041
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7041, v6986) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7042
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7043,) {}
output:  v7044
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7044, v6987) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7045
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7045, v6988) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7046
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7046, v6989) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7047
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7048,) {}
output:  v7049
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7049, v6990) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7050
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7050, v6991) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7051
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7051, v6992) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7052
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7053,) {}
output:  v7054
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7054, v6993) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v7055
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7054, v6994) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v7056
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7055, v6995) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v7057
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7057, v6996) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7058
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7059,) {}
output:  v7060
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7060, v6997) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7061
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7061, v6998) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v7062
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7062, v6999) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7063
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7064,) {}
output:  v7065
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7065, v7000) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7066
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7066, v7001) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v7067
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7067, v7002) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7068
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7069,) {}
output:  v7070
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7070, v7003) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7071
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7071, v7004) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v7072
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7072, v7005) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7073
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7074,) {}
output:  v7075
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7075, v7006) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v7076
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7075, v7007) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v7077
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7076, v7008) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v7078
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7078, v7009) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7079
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7080,) {}
output:  v7081
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7081, v7010) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7082
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7082, v7011) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7083, v7012) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7084
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7085,) {}
output:  v7086
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7086, v7013) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7087
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7087, v7014) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7088
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7088, v7015) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7089
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7090,) {}
output:  v7091
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7091, v7016) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7092
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7092, v7017) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7093
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7093, v7018) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7094
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7095,) {}
output:  v7096
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7096, v7019) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7097
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7097, v7020) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7098
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7098, v7021) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7099
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7100,) {}
output:  v7101
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7101, v7022) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7102
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7102, v7023) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7103
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7103, v7024) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7104
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7105,) {}
output:  v7106
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7106, v7025) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v7107
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7106, v7026) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7108
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7107, v7027) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v7109
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7109, v7028) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7110
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7111,) {}
output:  v7112
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7112, v7029) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7113
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7113, v7030) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7114
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7114, v7031) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7115
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7116,) {}
output:  v7117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7117, v7032) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7118
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7118, v7033) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7119
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7119, v7034) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7120
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7121,) {}
output:  v7122
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7035, v6983) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:07:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:07:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v7036
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7036,) {}
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7037
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7037, v6984) {}
384 64 (1, 64, 56, 56) (384, 64, 1, 1)
conv-forward
(1, 384, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v7038
NOSTAND
MULTIOUTPUT op:  Split(dim=1)
spilt input:  (v7038,)
Compiled 3200000 lines at Tue Jun 11 16:07:20 2024
spilts:  (v7039, v7040)
MULTIOUTPUT size:  (1, 128, 56, 56)
MULTIOUTPUT size:  (1, 256, 56, 56)
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7039, v6985) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
output:  v7041
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7041, v6986) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v7042
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7043,) {}
output:  v7044
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7044, v6987) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v7045
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7045, v6988) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
output:  v7046
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7046, v6989) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v7047
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7048,) {}
output:  v7049
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7049, v6990) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v7050
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7050, v6991) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
output:  v7051
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7051, v6992) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v7052
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7053,) {}
output:  v7054
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7054, v6993) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v7055
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7054, v6994) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v7056
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7055, v6995) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
output:  v7057
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7057, v6996) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v7058
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7059,) {}
output:  v7060
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7060, v6997) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v7061
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7061, v6998) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
output:  v7062
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7062, v6999) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v7063
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7064,) {}
output:  v7065
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7065, v7000) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v7066
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7066, v7001) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
output:  v7067
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7067, v7002) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v7068
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7069,) {}
output:  v7070
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7070, v7003) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v7071
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7071, v7004) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
output:  v7072
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7072, v7005) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v7073
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7074,) {}
output:  v7075
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7075, v7006) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v7076
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7075, v7007) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v7077
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7076, v7008) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
output:  v7078
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7078, v7009) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:07:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v7079
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7080,) {}
output:  v7081
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7081, v7010) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v7082
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7082, v7011) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
output:  v7083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7083, v7012) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v7084
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7085,) {}
output:  v7086
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7086, v7013) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v7087
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7087, v7014) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
output:  v7088
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7088, v7015) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v7089
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7090,) {}
output:  v7091
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7091, v7016) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v7092
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7092, v7017) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
output:  v7093
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7093, v7018) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v7094
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7095,) {}
output:  v7096
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7096, v7019) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v7097
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7097, v7020) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
output:  v7098
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7098, v7021) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v7099
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7100,) {}
output:  v7101
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7101, v7022) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v7102
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7102, v7023) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
output:  v7103
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7103, v7024) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v7104
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7105,) {}
output:  v7106
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7106, v7025) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v7107
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7106, v7026) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v7108
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7107, v7027) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
output:  v7109
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7109, v7028) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v7110
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7111,) {}
output:  v7112
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7112, v7029) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v7113
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7113, v7030) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
output:  v7114
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7114, v7031) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v7115
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7116,) {}
output:  v7117
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7117, v7032) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v7118
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7118, v7033) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
output:  v7119
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7119, v7034) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v7120
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7121,) {}
output:  v7122
Processing basic block Tue Jun 11 16:07:23 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-57-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-62-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-69-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-76-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-83-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-90-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-97-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-106-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.562548 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:07:33 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv1359_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1359_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7229, v7176) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v7230
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7230,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7231
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7231, v7177) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v7232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7231, v7178) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v7233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7232, v7179) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7234
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7234, v7180) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7235
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7236,) {}
output:  v7237
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7237, v7181) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7238
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7238, v7182) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7239
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7239, v7183) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7240
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7241,) {}
output:  v7242
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7242, v7184) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7243
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7243, v7185) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7244
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7244, v7186) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7245
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7246,) {}
output:  v7247
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7247, v7187) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v7248
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7247, v7188) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v7249
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7248, v7189) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v7250
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7250, v7190) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7251
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7252,) {}
output:  v7253
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7253, v7191) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7254
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7254, v7192) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v7255
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7255, v7193) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7256
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7257,) {}
output:  v7258
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7258, v7194) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7259
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7259, v7195) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v7260
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7260, v7196) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7261
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7262,) {}
output:  v7263
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7263, v7197) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7264
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7264, v7198) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v7265
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7265, v7199) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7266
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7267,) {}
output:  v7268
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7268, v7200) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v7269
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7268, v7201) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v7270
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7269, v7202) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v7271
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7271, v7203) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7272
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7273,) {}
output:  v7274
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7274, v7204) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7275, v7205) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7276, v7206) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7277
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7278,) {}
output:  v7279
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7279, v7207) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7280
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7280, v7208) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7281
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7281, v7209) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7282
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7283,) {}
output:  v7284
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7284, v7210) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7285
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7285, v7211) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7286
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7286, v7212) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7287
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7288,) {}
output:  v7289
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7289, v7213) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7290
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7290, v7214) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7291
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7291, v7215) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7292
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7293,) {}
output:  v7294
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7294, v7216) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7295
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7295, v7217) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7296
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7296, v7218) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7297
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7298,) {}
output:  v7299
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7299, v7219) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v7300
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7299, v7220) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7301
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7300, v7221) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v7302
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7302, v7222) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7303
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7304,) {}
output:  v7305
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7305, v7223) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7306
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7306, v7224) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7307
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7307, v7225) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7308
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7309,) {}
output:  v7310
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7310, v7226) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7311
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7311, v7227) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7312
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7312, v7228) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7313
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7314,) {}
output:  v7315
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7229, v7176) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:07:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:07:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v7230
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7230,) {}
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7231
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7231, v7177) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v7232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7231, v7178) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v7233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7232, v7179) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v7234
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7234, v7180) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v7235
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7236,) {}
output:  v7237
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7237, v7181) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v7238
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7238, v7182) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v7239
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7239, v7183) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v7240
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7241,) {}
output:  v7242
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7242, v7184) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v7243
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7243, v7185) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v7244
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7244, v7186) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v7245
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7246,) {}
output:  v7247
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7247, v7187) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v7248
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7247, v7188) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v7249
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7248, v7189) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:07:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Compiled 3300000 lines at Tue Jun 11 16:07:40 2024
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v7250
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7250, v7190) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v7251
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7252,) {}
output:  v7253
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7253, v7191) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v7254
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7254, v7192) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v7255
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7255, v7193) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v7256
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7257,) {}
output:  v7258
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7258, v7194) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v7259
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7259, v7195) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v7260
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7260, v7196) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v7261
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7262,) {}
output:  v7263
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7263, v7197) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v7264
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7264, v7198) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v7265
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7265, v7199) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v7266
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7267,) {}
output:  v7268
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7268, v7200) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v7269
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7268, v7201) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v7270
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7269, v7202) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v7271
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7271, v7203) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v7272
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7273,) {}
output:  v7274
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7274, v7204) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v7275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7275, v7205) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v7276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7276, v7206) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v7277
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7278,) {}
output:  v7279
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7279, v7207) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v7280
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7280, v7208) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v7281
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7281, v7209) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:07:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v7282
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7283,) {}
output:  v7284
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7284, v7210) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v7285
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7285, v7211) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v7286
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7286, v7212) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v7287
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7288,) {}
output:  v7289
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7289, v7213) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v7290
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7290, v7214) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v7291
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7291, v7215) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v7292
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7293,) {}
output:  v7294
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7294, v7216) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v7295
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7295, v7217) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v7296
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7296, v7218) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v7297
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7298,) {}
output:  v7299
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7299, v7219) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v7300
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7299, v7220) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v7301
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7300, v7221) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v7302
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7302, v7222) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v7303
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7304,) {}
output:  v7305
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7305, v7223) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v7306
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7306, v7224) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v7307
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7307, v7225) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v7308
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7309,) {}
output:  v7310
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7310, v7226) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:07:42 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v7311
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7311, v7227) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:07:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:07:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:07:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v7312
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7312, v7228) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:07:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:07:43 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v7313
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7314,) {}
output:  v7315
Processing basic block Tue Jun 11 16:07:43 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.500393 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:07:52 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv1356_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1356_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7422, v7369) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v7423
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7423,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7424
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7424, v7370) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v7425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7424, v7371) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v7426
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7425, v7372) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7427
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7427, v7373) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7428
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7429,) {}
output:  v7430
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7430, v7374) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7431
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7431, v7375) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7432
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7432, v7376) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7433
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7434,) {}
output:  v7435
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7435, v7377) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7436
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7436, v7378) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7437
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7437, v7379) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7438
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7439,) {}
output:  v7440
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7440, v7380) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v7441
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7440, v7381) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v7442
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7441, v7382) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v7443
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7443, v7383) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7444
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7445,) {}
output:  v7446
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7446, v7384) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7447
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7447, v7385) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v7448
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7448, v7386) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7449
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7450,) {}
output:  v7451
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7451, v7387) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7452
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7452, v7388) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v7453
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7453, v7389) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7454
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7455,) {}
output:  v7456
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7456, v7390) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7457
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7457, v7391) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v7458
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7458, v7392) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7459
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7460,) {}
output:  v7461
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7461, v7393) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v7462
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7461, v7394) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v7463
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7462, v7395) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v7464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7464, v7396) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7465
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7466,) {}
output:  v7467
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7467, v7397) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7468, v7398) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7469, v7399) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7470
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7471,) {}
output:  v7472
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7472, v7400) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7473
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7473, v7401) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7474
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7474, v7402) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7475
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7476,) {}
output:  v7477
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7477, v7403) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7478
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7478, v7404) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7479
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7479, v7405) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7480
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7481,) {}
output:  v7482
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7482, v7406) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7483
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7483, v7407) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7484
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7484, v7408) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7485
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7486,) {}
output:  v7487
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7487, v7409) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7488
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7488, v7410) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7489
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7489, v7411) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7490
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7491,) {}
output:  v7492
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7492, v7412) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v7493
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7492, v7413) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7494
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7493, v7414) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v7495
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7495, v7415) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7496
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7497,) {}
output:  v7498
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7498, v7416) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7499
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7499, v7417) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7500
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7500, v7418) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7501
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7502,) {}
output:  v7503
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7503, v7419) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7504, v7420) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7505
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7505, v7421) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7506
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7507,) {}
output:  v7508
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7422, v7369) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:07:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:07:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v7423
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7423,) {}
Processing basic block Tue Jun 11 16:07:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7424
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7424, v7370) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:07:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:07:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v7425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7424, v7371) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:07:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v7426
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7425, v7372) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v7427
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7427, v7373) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v7428
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7429,) {}
output:  v7430
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7430, v7374) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v7431
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7431, v7375) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v7432
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7432, v7376) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v7433
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7434,) {}
output:  v7435
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7435, v7377) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v7436
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7436, v7378) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v7437
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7437, v7379) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v7438
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7439,) {}
output:  v7440
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7440, v7380) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v7441
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7440, v7381) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v7442
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7441, v7382) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v7443
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7443, v7383) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v7444
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7445,) {}
output:  v7446
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7446, v7384) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v7447
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7447, v7385) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v7448
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7448, v7386) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v7449
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7450,) {}
output:  v7451
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7451, v7387) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v7452
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7452, v7388) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v7453
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7453, v7389) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v7454
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7455,) {}
output:  v7456
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7456, v7390) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v7457
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7457, v7391) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v7458
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7458, v7392) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v7459
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7460,) {}
output:  v7461
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7461, v7393) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v7462
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7461, v7394) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v7463
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7462, v7395) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v7464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7464, v7396) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v7465
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7466,) {}
output:  v7467
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7467, v7397) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v7468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7468, v7398) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v7469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7469, v7399) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v7470
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7471,) {}
output:  v7472
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7472, v7400) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Compiled 3400000 lines at Tue Jun 11 16:08:01 2024
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v7473
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7473, v7401) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v7474
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7474, v7402) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v7475
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7476,) {}
output:  v7477
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7477, v7403) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v7478
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7478, v7404) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v7479
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7479, v7405) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v7480
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7481,) {}
output:  v7482
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7482, v7406) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v7483
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7483, v7407) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v7484
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7484, v7408) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v7485
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7486,) {}
output:  v7487
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7487, v7409) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v7488
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7488, v7410) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v7489
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7489, v7411) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v7490
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7491,) {}
output:  v7492
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7492, v7412) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v7493
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7492, v7413) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v7494
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7493, v7414) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v7495
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7495, v7415) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v7496
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7497,) {}
output:  v7498
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7498, v7416) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v7499
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7499, v7417) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v7500
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7500, v7418) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v7501
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7502,) {}
output:  v7503
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7503, v7419) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v7504
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7504, v7420) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v7505
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7505, v7421) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:08:02 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v7506
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7507,) {}
output:  v7508
Processing basic block Tue Jun 11 16:08:03 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.743269 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:08:12 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv1348_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1348_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7615, v7562) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v7616
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7616,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7617
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7617, v7563) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v7618
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7617, v7564) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v7619
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7618, v7565) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7620
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7620, v7566) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7621
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7622,) {}
output:  v7623
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7623, v7567) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7624
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7624, v7568) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v7625
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7625, v7569) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7626
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7627,) {}
output:  v7628
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7628, v7570) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7629
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7629, v7571) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7630
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7630, v7572) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7631
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7632,) {}
output:  v7633
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7633, v7573) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v7634
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7633, v7574) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v7635
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7634, v7575) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v7636
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7636, v7576) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7637
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7638,) {}
output:  v7639
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7639, v7577) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7640
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7640, v7578) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v7641
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7641, v7579) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7642
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7643,) {}
output:  v7644
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7644, v7580) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7645
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7645, v7581) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v7646
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7646, v7582) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7647
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7648,) {}
output:  v7649
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7649, v7583) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7650
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7650, v7584) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v7651
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7651, v7585) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7652
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7653,) {}
output:  v7654
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7654, v7586) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v7655
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7654, v7587) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v7656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7655, v7588) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v7657
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7657, v7589) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7658
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7659,) {}
output:  v7660
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7660, v7590) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7661, v7591) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7662
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7662, v7592) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7663
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7664,) {}
output:  v7665
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7665, v7593) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7666
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7666, v7594) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7667
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7667, v7595) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7668
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7669,) {}
output:  v7670
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7670, v7596) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7671
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7671, v7597) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7672
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7672, v7598) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7673
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7674,) {}
output:  v7675
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7675, v7599) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7676
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7676, v7600) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7677
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7677, v7601) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7678
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7679,) {}
output:  v7680
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7680, v7602) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7681
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7681, v7603) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7682
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7682, v7604) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7683
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7684,) {}
output:  v7685
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7685, v7605) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v7686
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7685, v7606) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7687
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7686, v7607) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v7688
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7688, v7608) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7689
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7690,) {}
output:  v7691
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7691, v7609) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7692, v7610) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7693
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7693, v7611) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7694
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7695,) {}
output:  v7696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7696, v7612) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7697
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7697, v7613) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7698
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7698, v7614) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7699
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7700,) {}
output:  v7701
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7615, v7562) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v7616
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7616,) {}
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7617
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7617, v7563) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v7618
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7617, v7564) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v7619
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7618, v7565) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v7620
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7620, v7566) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v7621
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7622,) {}
output:  v7623
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7623, v7567) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:08:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v7624
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7624, v7568) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v7625
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7625, v7569) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v7626
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7627,) {}
output:  v7628
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7628, v7570) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v7629
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7629, v7571) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v7630
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7630, v7572) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v7631
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7632,) {}
output:  v7633
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7633, v7573) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v7634
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7633, v7574) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v7635
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7634, v7575) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v7636
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7636, v7576) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v7637
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7638,) {}
output:  v7639
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7639, v7577) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v7640
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7640, v7578) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v7641
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7641, v7579) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v7642
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7643,) {}
output:  v7644
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7644, v7580) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v7645
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7645, v7581) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v7646
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7646, v7582) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v7647
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7648,) {}
output:  v7649
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7649, v7583) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v7650
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7650, v7584) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v7651
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7651, v7585) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v7652
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7653,) {}
output:  v7654
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7654, v7586) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v7655
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7654, v7587) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v7656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7655, v7588) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v7657
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7657, v7589) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v7658
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7659,) {}
output:  v7660
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7660, v7590) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v7661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7661, v7591) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v7662
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7662, v7592) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v7663
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7664,) {}
output:  v7665
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7665, v7593) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v7666
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7666, v7594) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v7667
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7667, v7595) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v7668
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7669,) {}
output:  v7670
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7670, v7596) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v7671
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7671, v7597) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v7672
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7672, v7598) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v7673
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7674,) {}
output:  v7675
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7675, v7599) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v7676
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7676, v7600) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v7677
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7677, v7601) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v7678
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7679,) {}
output:  v7680
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7680, v7602) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v7681
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7681, v7603) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v7682
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7682, v7604) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v7683
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7684,) {}
output:  v7685
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7685, v7605) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v7686
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7685, v7606) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v7687
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7686, v7607) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v7688
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7688, v7608) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v7689
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7690,) {}
output:  v7691
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7691, v7609) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v7692
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7692, v7610) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v7693
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7693, v7611) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Compiled 3500000 lines at Tue Jun 11 16:08:22 2024
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v7694
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7695,) {}
output:  v7696
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7696, v7612) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v7697
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7697, v7613) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v7698
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7698, v7614) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v7699
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7700,) {}
output:  v7701
Processing basic block Tue Jun 11 16:08:22 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.582813 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:08:32 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv1344_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1344_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7808, v7755) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v7809
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7809,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7810
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7810, v7756) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v7811
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7810, v7757) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v7812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7811, v7758) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v7813
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7813, v7759) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7814
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7815,) {}
output:  v7816
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7816, v7760) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7817
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7817, v7761) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7818
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7818, v7762) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7819
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7820,) {}
output:  v7821
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7821, v7763) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v7822
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7822, v7764) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v7823
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7823, v7765) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v7824
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7825,) {}
output:  v7826
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7826, v7766) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v7827
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7826, v7767) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v7828
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7827, v7768) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v7829
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7829, v7769) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7830
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7831,) {}
output:  v7832
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7832, v7770) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7833
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7833, v7771) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v7834
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7834, v7772) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7835
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7836,) {}
output:  v7837
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7837, v7773) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7838
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7838, v7774) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v7839
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7839, v7775) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7840
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7841,) {}
output:  v7842
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7842, v7776) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v7843
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7843, v7777) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v7844
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7844, v7778) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v7845
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7846,) {}
output:  v7847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7847, v7779) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v7848
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7847, v7780) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v7849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7848, v7781) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v7850
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7850, v7782) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7851
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7852,) {}
output:  v7853
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7853, v7783) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7854, v7784) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7855
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7855, v7785) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7856
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7857,) {}
output:  v7858
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7858, v7786) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7859
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7859, v7787) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7860
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7860, v7788) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7861
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7862,) {}
output:  v7863
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7863, v7789) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7864
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7864, v7790) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7865
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7865, v7791) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7866
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7867,) {}
output:  v7868
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7868, v7792) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7869
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7869, v7793) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7870
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7870, v7794) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7871
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7872,) {}
output:  v7873
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7873, v7795) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v7874
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7874, v7796) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v7875
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7875, v7797) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v7876
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7877,) {}
output:  v7878
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7878, v7798) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v7879
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7878, v7799) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7880
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7879, v7800) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v7881
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7881, v7801) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7882
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7883,) {}
output:  v7884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7884, v7802) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7885
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7885, v7803) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7886
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7886, v7804) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7887
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7888,) {}
output:  v7889
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7889, v7805) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v7890
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7890, v7806) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v7891
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7891, v7807) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v7892
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7893,) {}
output:  v7894
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v7808, v7755) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:08:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:08:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v7809
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v7809,) {}
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v7810
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7810, v7756) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v7811
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7810, v7757) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v7812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7811, v7758) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v7813
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7813, v7759) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v7814
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7815,) {}
output:  v7816
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7816, v7760) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v7817
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7817, v7761) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v7818
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7818, v7762) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v7819
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7820,) {}
output:  v7821
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7821, v7763) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v7822
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7822, v7764) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v7823
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7823, v7765) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v7824
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7825,) {}
output:  v7826
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7826, v7766) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v7827
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7826, v7767) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v7828
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7827, v7768) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v7829
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7829, v7769) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v7830
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7831,) {}
output:  v7832
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7832, v7770) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v7833
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v7833, v7771) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:08:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v7834
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7834, v7772) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v7835
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7836,) {}
output:  v7837
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7837, v7773) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v7838
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7838, v7774) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v7839
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7839, v7775) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v7840
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7841,) {}
output:  v7842
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7842, v7776) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v7843
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7843, v7777) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v7844
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7844, v7778) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v7845
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7846,) {}
output:  v7847
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7847, v7779) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v7848
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7847, v7780) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v7849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7848, v7781) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v7850
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7850, v7782) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v7851
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7852,) {}
output:  v7853
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7853, v7783) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v7854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7854, v7784) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v7855
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7855, v7785) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v7856
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7857,) {}
output:  v7858
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7858, v7786) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v7859
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7859, v7787) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v7860
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7860, v7788) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:08:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v7861
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7862,) {}
output:  v7863
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7863, v7789) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v7864
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7864, v7790) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v7865
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7865, v7791) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v7866
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7867,) {}
output:  v7868
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7868, v7792) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v7869
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7869, v7793) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v7870
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7870, v7794) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v7871
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7872,) {}
output:  v7873
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7873, v7795) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v7874
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7874, v7796) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v7875
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7875, v7797) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v7876
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7877,) {}
output:  v7878
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7878, v7798) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v7879
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v7878, v7799) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v7880
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v7879, v7800) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v7881
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7881, v7801) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v7882
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7883,) {}
output:  v7884
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7884, v7802) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v7885
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7885, v7803) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v7886
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7886, v7804) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v7887
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7888,) {}
output:  v7889
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7889, v7805) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v7890
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v7890, v7806) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v7891
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v7891, v7807) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:08:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v7892
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v7893,) {}
output:  v7894
Processing basic block Tue Jun 11 16:08:42 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.745726 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:08:51 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv1351_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1351_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
Compiled 3600000 lines at Tue Jun 11 16:08:53 2024
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8001, v7948) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v8002
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8002,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8003
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8003, v7949) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v8004
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8003, v7950) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v8005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8004, v7951) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8006
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8006, v7952) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8007
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8008,) {}
output:  v8009
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8009, v7953) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8010
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8010, v7954) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8011
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8011, v7955) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8012
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8013,) {}
output:  v8014
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8014, v7956) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8015
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8015, v7957) {}
128 128 (1, 128, 56, 56) (128, 8, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 8, 3, 3)
output:  v8016
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8016, v7958) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8017
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8018,) {}
output:  v8019
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8019, v7959) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v8020
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8019, v7960) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v8021
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8020, v7961) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v8022
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8022, v7962) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8023
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8024,) {}
output:  v8025
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8025, v7963) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8026
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8026, v7964) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v8027
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8027, v7965) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8028
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8029,) {}
output:  v8030
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8030, v7966) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8031
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8031, v7967) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8032
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8032, v7968) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8033
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8034,) {}
output:  v8035
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8035, v7969) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8036
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8036, v7970) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8037
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8037, v7971) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8038
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8039,) {}
output:  v8040
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8040, v7972) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v8041
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8040, v7973) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v8042
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8041, v7974) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v8043
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8043, v7975) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8044
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8045,) {}
output:  v8046
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8046, v7976) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8047
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8047, v7977) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8048
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8048, v7978) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8049
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8050,) {}
output:  v8051
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8051, v7979) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8052
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8052, v7980) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8053
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8053, v7981) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8054
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8055,) {}
output:  v8056
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8056, v7982) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8057
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8057, v7983) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8058
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8058, v7984) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8059
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8060,) {}
output:  v8061
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8061, v7985) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8062
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8062, v7986) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8063
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8063, v7987) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8064
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8065,) {}
output:  v8066
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8066, v7988) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8067
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8067, v7989) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8068
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8068, v7990) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8069
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8070,) {}
output:  v8071
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8071, v7991) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v8072
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8071, v7992) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8073
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8072, v7993) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v8074
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8074, v7994) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8075
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8076,) {}
output:  v8077
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8077, v7995) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8078
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8078, v7996) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8079
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8079, v7997) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8080
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8081,) {}
output:  v8082
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8082, v7998) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8083, v7999) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8084
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8084, v8000) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8085
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8086,) {}
output:  v8087
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8001, v7948) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v8002
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8002,) {}
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8003
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8003, v7949) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v8004
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8003, v7950) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v8005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8004, v7951) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v8006
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8006, v7952) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v8007
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8008,) {}
output:  v8009
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8009, v7953) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v8010
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8010, v7954) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v8011
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8011, v7955) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v8012
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8013,) {}
output:  v8014
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8014, v7956) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v8015
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8015, v7957) {}
128 8 (1, 128, 56, 56) (128, 8, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v8016
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8016, v7958) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v8017
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8018,) {}
output:  v8019
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8019, v7959) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v8020
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8019, v7960) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v8021
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8020, v7961) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v8022
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8022, v7962) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v8023
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8024,) {}
output:  v8025
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8025, v7963) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v8026
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8026, v7964) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v8027
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8027, v7965) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v8028
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8029,) {}
output:  v8030
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8030, v7966) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v8031
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8031, v7967) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v8032
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8032, v7968) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v8033
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8034,) {}
output:  v8035
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8035, v7969) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v8036
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8036, v7970) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v8037
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8037, v7971) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v8038
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8039,) {}
output:  v8040
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8040, v7972) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v8041
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8040, v7973) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:08:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v8042
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8041, v7974) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v8043
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8043, v7975) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v8044
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8045,) {}
output:  v8046
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8046, v7976) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v8047
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8047, v7977) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v8048
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8048, v7978) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v8049
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8050,) {}
output:  v8051
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8051, v7979) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v8052
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8052, v7980) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v8053
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8053, v7981) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v8054
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8055,) {}
output:  v8056
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8056, v7982) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v8057
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8057, v7983) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v8058
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8058, v7984) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v8059
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8060,) {}
output:  v8061
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8061, v7985) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v8062
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8062, v7986) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v8063
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8063, v7987) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v8064
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8065,) {}
output:  v8066
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8066, v7988) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v8067
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8067, v7989) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:09:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v8068
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8068, v7990) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v8069
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8070,) {}
output:  v8071
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8071, v7991) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v8072
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8071, v7992) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v8073
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8072, v7993) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v8074
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8074, v7994) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v8075
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8076,) {}
output:  v8077
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8077, v7995) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v8078
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8078, v7996) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v8079
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8079, v7997) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v8080
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8081,) {}
output:  v8082
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8082, v7998) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v8083
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8083, v7999) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v8084
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8084, v8000) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v8085
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8086,) {}
output:  v8087
Processing basic block Tue Jun 11 16:09:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.002979 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:09:11 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv1387_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1387_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8194, v8141) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v8195
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8195,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8196
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8196, v8142) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v8197
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8196, v8143) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v8198
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8197, v8144) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8199
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8199, v8145) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8200
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8201,) {}
output:  v8202
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8202, v8146) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8203
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8203, v8147) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8204
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8204, v8148) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8205
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8206,) {}
output:  v8207
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8207, v8149) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8208
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8208, v8150) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8209
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8209, v8151) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8210
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8211,) {}
output:  v8212
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8212, v8152) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v8213
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8212, v8153) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v8214
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v8213, v8154) {}
256 256 (1, 256, 56, 56) (256, 16, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 16, 3, 3)
output:  v8215
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8215, v8155) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8216
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8217,) {}
output:  v8218
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8218, v8156) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8219
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8219, v8157) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v8220
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8220, v8158) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8221
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8222,) {}
output:  v8223
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8223, v8159) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8224
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8224, v8160) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8225
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8225, v8161) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8226
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8227,) {}
output:  v8228
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8228, v8162) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8229
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8229, v8163) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8230
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8230, v8164) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8231
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8232,) {}
output:  v8233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8233, v8165) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v8234
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8233, v8166) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v8235
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8234, v8167) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v8236
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8236, v8168) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8237
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8238,) {}
output:  v8239
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8239, v8169) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8240
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8240, v8170) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8241
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8241, v8171) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8242
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8243,) {}
output:  v8244
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8244, v8172) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8245
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8245, v8173) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8246
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8246, v8174) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8247
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8248,) {}
output:  v8249
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8249, v8175) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8250
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8250, v8176) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8251
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8251, v8177) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8252
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8253,) {}
Compiled 3700000 lines at Tue Jun 11 16:09:18 2024
output:  v8254
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8254, v8178) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8255
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8255, v8179) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8256
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8256, v8180) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8257
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8258,) {}
output:  v8259
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8259, v8181) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8260
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8260, v8182) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8261
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8261, v8183) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8262
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8263,) {}
output:  v8264
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8264, v8184) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v8265
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8264, v8185) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8266
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8265, v8186) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v8267
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8267, v8187) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8268
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8269,) {}
output:  v8270
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8270, v8188) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8271
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8271, v8189) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8272
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8272, v8190) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8273
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8274,) {}
output:  v8275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8275, v8191) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8276, v8192) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8277
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8277, v8193) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8278
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8279,) {}
output:  v8280
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8194, v8141) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v8195
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8195,) {}
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8196
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8196, v8142) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v8197
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8196, v8143) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v8198
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8197, v8144) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v8199
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8199, v8145) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v8200
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8201,) {}
output:  v8202
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8202, v8146) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v8203
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8203, v8147) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v8204
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8204, v8148) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:09:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v8205
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8206,) {}
output:  v8207
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8207, v8149) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v8208
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8208, v8150) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v8209
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8209, v8151) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v8210
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8211,) {}
output:  v8212
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8212, v8152) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v8213
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8212, v8153) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v8214
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v8213, v8154) {}
256 16 (1, 256, 56, 56) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v8215
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8215, v8155) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v8216
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8217,) {}
output:  v8218
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8218, v8156) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v8219
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8219, v8157) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v8220
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8220, v8158) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v8221
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8222,) {}
output:  v8223
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8223, v8159) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v8224
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8224, v8160) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v8225
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8225, v8161) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v8226
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8227,) {}
output:  v8228
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8228, v8162) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v8229
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8229, v8163) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v8230
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8230, v8164) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v8231
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8232,) {}
output:  v8233
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8233, v8165) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v8234
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8233, v8166) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v8235
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8234, v8167) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:09:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v8236
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8236, v8168) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v8237
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8238,) {}
output:  v8239
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8239, v8169) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v8240
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8240, v8170) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v8241
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8241, v8171) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v8242
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8243,) {}
output:  v8244
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8244, v8172) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v8245
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8245, v8173) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v8246
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8246, v8174) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v8247
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8248,) {}
output:  v8249
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8249, v8175) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v8250
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8250, v8176) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v8251
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8251, v8177) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v8252
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8253,) {}
output:  v8254
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8254, v8178) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v8255
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8255, v8179) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v8256
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8256, v8180) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v8257
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8258,) {}
output:  v8259
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8259, v8181) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v8260
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8260, v8182) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v8261
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8261, v8183) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v8262
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8263,) {}
output:  v8264
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8264, v8184) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v8265
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8264, v8185) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v8266
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8265, v8186) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:09:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v8267
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8267, v8187) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v8268
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8269,) {}
output:  v8270
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8270, v8188) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v8271
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8271, v8189) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v8272
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8272, v8190) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v8273
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8274,) {}
output:  v8275
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8275, v8191) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v8276
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8276, v8192) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v8277
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8277, v8193) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v8278
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8279,) {}
output:  v8280
Processing basic block Tue Jun 11 16:09:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.020622 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:09:31 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv1363_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1363_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8387, v8334) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v8388
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8388,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8389
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8389, v8335) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v8390
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8389, v8336) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v8391
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8390, v8337) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8392
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8392, v8338) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8393
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8394,) {}
output:  v8395
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8395, v8339) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8396
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8396, v8340) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8397
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8397, v8341) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8398
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8399,) {}
output:  v8400
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8400, v8342) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8401
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8401, v8343) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8402
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8402, v8344) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8403
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8404,) {}
output:  v8405
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8405, v8345) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v8406
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8405, v8346) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v8407
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8406, v8347) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v8408
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8408, v8348) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8409
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8410,) {}
output:  v8411
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8411, v8349) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8412
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8412, v8350) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v8413
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8413, v8351) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8414
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8415,) {}
output:  v8416
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8416, v8352) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8417
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8417, v8353) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8418
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8418, v8354) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8419
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8420,) {}
output:  v8421
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8421, v8355) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8422
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8422, v8356) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8423
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8423, v8357) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8424
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8425,) {}
output:  v8426
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8426, v8358) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v8427
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8426, v8359) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v8428
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8427, v8360) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v8429
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8429, v8361) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8430
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8431,) {}
output:  v8432
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8432, v8362) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8433
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8433, v8363) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v8434
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8434, v8364) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8435
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8436,) {}
output:  v8437
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8437, v8365) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8438
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8438, v8366) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8439
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8439, v8367) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8440
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8441,) {}
output:  v8442
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8442, v8368) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8443
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8443, v8369) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8444
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8444, v8370) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8445
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8446,) {}
output:  v8447
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8447, v8371) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8448
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8448, v8372) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8449
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8449, v8373) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8450
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8451,) {}
output:  v8452
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8452, v8374) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8453
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8453, v8375) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8454
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8454, v8376) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8455
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8456,) {}
output:  v8457
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8457, v8377) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v8458
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8457, v8378) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8459
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8458, v8379) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v8460
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8460, v8380) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8461
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8462,) {}
output:  v8463
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8463, v8381) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8464, v8382) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8465
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8465, v8383) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8466
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8467,) {}
output:  v8468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8468, v8384) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8469, v8385) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8470
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8470, v8386) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8471
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8472,) {}
output:  v8473
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8387, v8334) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v8388
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8388,) {}
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8389
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8389, v8335) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v8390
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8389, v8336) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v8391
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8390, v8337) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v8392
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8392, v8338) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v8393
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8394,) {}
output:  v8395
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8395, v8339) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v8396
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8396, v8340) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v8397
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8397, v8341) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v8398
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8399,) {}
output:  v8400
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8400, v8342) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v8401
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8401, v8343) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Compiled 3800000 lines at Tue Jun 11 16:09:38 2024
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v8402
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8402, v8344) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:09:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v8403
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8404,) {}
output:  v8405
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8405, v8345) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v8406
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8405, v8346) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v8407
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8406, v8347) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v8408
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8408, v8348) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v8409
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8410,) {}
output:  v8411
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8411, v8349) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v8412
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8412, v8350) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v8413
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8413, v8351) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v8414
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8415,) {}
output:  v8416
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8416, v8352) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v8417
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8417, v8353) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v8418
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8418, v8354) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v8419
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8420,) {}
output:  v8421
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8421, v8355) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v8422
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8422, v8356) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v8423
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8423, v8357) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v8424
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8425,) {}
output:  v8426
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8426, v8358) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v8427
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8426, v8359) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v8428
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8427, v8360) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v8429
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8429, v8361) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v8430
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8431,) {}
output:  v8432
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8432, v8362) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v8433
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8433, v8363) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v8434
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8434, v8364) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:09:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v8435
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8436,) {}
output:  v8437
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8437, v8365) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v8438
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8438, v8366) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v8439
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8439, v8367) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v8440
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8441,) {}
output:  v8442
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8442, v8368) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v8443
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8443, v8369) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v8444
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8444, v8370) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v8445
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8446,) {}
output:  v8447
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8447, v8371) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v8448
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8448, v8372) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v8449
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8449, v8373) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v8450
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8451,) {}
output:  v8452
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8452, v8374) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v8453
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8453, v8375) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v8454
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8454, v8376) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v8455
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8456,) {}
output:  v8457
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8457, v8377) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v8458
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8457, v8378) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v8459
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8458, v8379) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v8460
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8460, v8380) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v8461
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8462,) {}
output:  v8463
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8463, v8381) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:09:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v8464
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8464, v8382) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v8465
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8465, v8383) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v8466
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8467,) {}
output:  v8468
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8468, v8384) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v8469
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8469, v8385) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v8470
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8470, v8386) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v8471
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8472,) {}
output:  v8473
Processing basic block Tue Jun 11 16:09:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.406860 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:09:51 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv1375_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1375_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8580, v8527) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v8581
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8581,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8582
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8582, v8528) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v8583
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8582, v8529) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v8584
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8583, v8530) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8585
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8585, v8531) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8586
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8587,) {}
output:  v8588
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8588, v8532) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8589
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8589, v8533) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8590
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8590, v8534) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8591
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8592,) {}
output:  v8593
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8593, v8535) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8594
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8594, v8536) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8595
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8595, v8537) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8596
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8597,) {}
output:  v8598
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8598, v8538) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v8599
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8598, v8539) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v8600
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8599, v8540) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v8601
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8601, v8541) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8602
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8603,) {}
output:  v8604
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8604, v8542) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8605
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8605, v8543) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v8606
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8606, v8544) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8607
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8608,) {}
output:  v8609
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8609, v8545) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8610
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8610, v8546) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8611
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8611, v8547) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8612
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8613,) {}
output:  v8614
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8614, v8548) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8615
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8615, v8549) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8616
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8616, v8550) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8617
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8618,) {}
output:  v8619
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8619, v8551) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v8620
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8619, v8552) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v8621
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8620, v8553) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v8622
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8622, v8554) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8623
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8624,) {}
output:  v8625
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8625, v8555) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8626
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8626, v8556) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8627
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8627, v8557) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8628
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8629,) {}
output:  v8630
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8630, v8558) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8631
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8631, v8559) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8632
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8632, v8560) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8633
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8634,) {}
output:  v8635
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8635, v8561) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8636
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8636, v8562) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8637
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8637, v8563) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8638
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8639,) {}
output:  v8640
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8640, v8564) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8641
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8641, v8565) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8642
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8642, v8566) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8643
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8644,) {}
output:  v8645
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8645, v8567) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8646
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8646, v8568) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v8647
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8647, v8569) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8648
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8649,) {}
output:  v8650
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8650, v8570) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v8651
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8650, v8571) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8652
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8651, v8572) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v8653
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8653, v8573) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8654
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8655,) {}
output:  v8656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8656, v8574) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8657
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8657, v8575) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8658
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8658, v8576) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8659
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8660,) {}
output:  v8661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8661, v8577) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8662
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8662, v8578) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8663
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8663, v8579) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8664
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8665,) {}
output:  v8666
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8580, v8527) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:09:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:09:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v8581
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8581,) {}
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8582
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8582, v8528) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v8583
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8582, v8529) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v8584
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8583, v8530) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v8585
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8585, v8531) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v8586
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8587,) {}
output:  v8588
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8588, v8532) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v8589
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8589, v8533) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v8590
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8590, v8534) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v8591
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8592,) {}
output:  v8593
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8593, v8535) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v8594
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8594, v8536) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v8595
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8595, v8537) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v8596
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8597,) {}
output:  v8598
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8598, v8538) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v8599
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8598, v8539) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v8600
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8599, v8540) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v8601
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8601, v8541) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:09:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v8602
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8603,) {}
output:  v8604
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8604, v8542) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v8605
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8605, v8543) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v8606
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8606, v8544) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v8607
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8608,) {}
output:  v8609
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8609, v8545) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v8610
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8610, v8546) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v8611
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8611, v8547) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v8612
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8613,) {}
output:  v8614
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8614, v8548) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v8615
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8615, v8549) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v8616
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8616, v8550) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v8617
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8618,) {}
output:  v8619
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8619, v8551) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v8620
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8619, v8552) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v8621
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8620, v8553) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v8622
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8622, v8554) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Compiled 3900000 lines at Tue Jun 11 16:09:59 2024
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v8623
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8624,) {}
output:  v8625
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8625, v8555) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v8626
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8626, v8556) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v8627
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8627, v8557) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v8628
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8629,) {}
output:  v8630
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8630, v8558) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v8631
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8631, v8559) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v8632
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8632, v8560) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v8633
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8634,) {}
output:  v8635
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8635, v8561) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v8636
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8636, v8562) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:09:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v8637
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8637, v8563) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v8638
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8639,) {}
output:  v8640
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8640, v8564) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v8641
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8641, v8565) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v8642
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8642, v8566) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v8643
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8644,) {}
output:  v8645
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8645, v8567) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v8646
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8646, v8568) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v8647
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8647, v8569) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v8648
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8649,) {}
output:  v8650
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8650, v8570) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v8651
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8650, v8571) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v8652
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8651, v8572) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v8653
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8653, v8573) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v8654
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8655,) {}
output:  v8656
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8656, v8574) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v8657
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8657, v8575) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v8658
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8658, v8576) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v8659
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8660,) {}
output:  v8661
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8661, v8577) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v8662
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8662, v8578) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v8663
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8663, v8579) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:10:01 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v8664
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8665,) {}
output:  v8666
Processing basic block Tue Jun 11 16:10:01 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.793886 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:10:10 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv1372_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1372_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8773, v8720) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v8774
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8774,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8775
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8775, v8721) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v8776
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8775, v8722) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v8777
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8776, v8723) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8778
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8778, v8724) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8779
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8780,) {}
output:  v8781
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8781, v8725) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8782
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8782, v8726) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8783
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8783, v8727) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8784
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8785,) {}
output:  v8786
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8786, v8728) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8787
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8787, v8729) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8788
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8788, v8730) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8789
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8790,) {}
output:  v8791
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8791, v8731) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v8792
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8791, v8732) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v8793
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8792, v8733) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v8794
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8794, v8734) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8795
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8796,) {}
output:  v8797
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8797, v8735) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8798
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8798, v8736) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v8799
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8799, v8737) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8800
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8801,) {}
output:  v8802
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8802, v8738) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8803
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8803, v8739) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8804
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8804, v8740) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8805
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8806,) {}
output:  v8807
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8807, v8741) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8808
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8808, v8742) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8809
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8809, v8743) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8810
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8811,) {}
output:  v8812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8812, v8744) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v8813
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8812, v8745) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v8814
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8813, v8746) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v8815
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8815, v8747) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8816
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8817,) {}
output:  v8818
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8818, v8748) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8819
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8819, v8749) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8820
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8820, v8750) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8821
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8822,) {}
output:  v8823
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8823, v8751) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8824
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8824, v8752) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8825
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8825, v8753) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8826
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8827,) {}
output:  v8828
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8828, v8754) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8829
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8829, v8755) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8830
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8830, v8756) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8831
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8832,) {}
output:  v8833
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8833, v8757) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8834
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8834, v8758) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v8835
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8835, v8759) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8836
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8837,) {}
output:  v8838
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8838, v8760) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v8839
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8839, v8761) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v8840
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8840, v8762) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v8841
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8842,) {}
output:  v8843
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8843, v8763) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v8844
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8843, v8764) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8845
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8844, v8765) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v8846
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8846, v8766) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8847
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8848,) {}
output:  v8849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8849, v8767) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8850
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8850, v8768) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8851
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8851, v8769) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8852
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8853,) {}
output:  v8854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8854, v8770) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v8855
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8855, v8771) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v8856
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8856, v8772) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v8857
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8858,) {}
output:  v8859
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8773, v8720) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:10:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:10:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v8774
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8774,) {}
Processing basic block Tue Jun 11 16:10:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8775
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8775, v8721) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:10:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v8776
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8775, v8722) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v8777
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8776, v8723) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v8778
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8778, v8724) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v8779
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8780,) {}
output:  v8781
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8781, v8725) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v8782
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8782, v8726) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v8783
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8783, v8727) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v8784
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8785,) {}
output:  v8786
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8786, v8728) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v8787
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8787, v8729) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v8788
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8788, v8730) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v8789
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8790,) {}
output:  v8791
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8791, v8731) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v8792
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8791, v8732) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v8793
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8792, v8733) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v8794
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8794, v8734) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v8795
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8796,) {}
output:  v8797
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8797, v8735) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v8798
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8798, v8736) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v8799
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8799, v8737) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v8800
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8801,) {}
output:  v8802
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8802, v8738) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v8803
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8803, v8739) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v8804
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8804, v8740) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v8805
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8806,) {}
output:  v8807
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8807, v8741) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v8808
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8808, v8742) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v8809
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8809, v8743) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v8810
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8811,) {}
output:  v8812
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8812, v8744) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v8813
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8812, v8745) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v8814
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8813, v8746) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v8815
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8815, v8747) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v8816
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8817,) {}
output:  v8818
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8818, v8748) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v8819
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8819, v8749) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v8820
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8820, v8750) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v8821
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8822,) {}
output:  v8823
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8823, v8751) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v8824
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8824, v8752) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v8825
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8825, v8753) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v8826
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8827,) {}
output:  v8828
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8828, v8754) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v8829
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8829, v8755) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v8830
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8830, v8756) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v8831
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8832,) {}
output:  v8833
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8833, v8757) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v8834
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8834, v8758) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v8835
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8835, v8759) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v8836
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8837,) {}
output:  v8838
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8838, v8760) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v8839
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8839, v8761) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v8840
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8840, v8762) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v8841
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8842,) {}
output:  v8843
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8843, v8763) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v8844
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8843, v8764) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v8845
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8844, v8765) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Compiled 4000000 lines at Tue Jun 11 16:10:20 2024
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v8846
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8846, v8766) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v8847
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8848,) {}
output:  v8849
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8849, v8767) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v8850
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8850, v8768) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v8851
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8851, v8769) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v8852
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8853,) {}
output:  v8854
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8854, v8770) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v8855
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8855, v8771) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v8856
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8856, v8772) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:10:20 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v8857
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8858,) {}
output:  v8859
Processing basic block Tue Jun 11 16:10:21 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 52.209616 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:10:30 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv1369_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1369_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8966, v8913) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v8967
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8967,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8968
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8968, v8914) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v8969
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8968, v8915) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v8970
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8969, v8916) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8971
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8971, v8917) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8972
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8973,) {}
output:  v8974
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8974, v8918) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8975
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8975, v8919) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8976
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8976, v8920) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8977
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8978,) {}
output:  v8979
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8979, v8921) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v8980
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8980, v8922) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v8981
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8981, v8923) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v8982
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8983,) {}
output:  v8984
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8984, v8924) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v8985
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8984, v8925) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v8986
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8985, v8926) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v8987
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8987, v8927) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8988
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8989,) {}
output:  v8990
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8990, v8928) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8991
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8991, v8929) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v8992
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8992, v8930) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8993
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8994,) {}
output:  v8995
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8995, v8931) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v8996
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8996, v8932) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v8997
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8997, v8933) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v8998
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8999,) {}
output:  v9000
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9000, v8934) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9001
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9001, v8935) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9002
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9002, v8936) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9003
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9004,) {}
output:  v9005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9005, v8937) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v9006
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9005, v8938) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v9007
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9006, v8939) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v9008
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9008, v8940) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9009
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9010,) {}
output:  v9011
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9011, v8941) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9012
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9012, v8942) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9013
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9013, v8943) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9014
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9015,) {}
output:  v9016
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9016, v8944) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9017
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9017, v8945) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9018
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9018, v8946) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9019
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9020,) {}
output:  v9021
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9021, v8947) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9022
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9022, v8948) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v9023
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9023, v8949) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9024
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9025,) {}
output:  v9026
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9026, v8950) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9027
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9027, v8951) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9028
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9028, v8952) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9029
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9030,) {}
output:  v9031
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9031, v8953) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9032
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9032, v8954) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9033
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9033, v8955) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9034
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9035,) {}
output:  v9036
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9036, v8956) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v9037
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9036, v8957) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9038
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9037, v8958) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v9039
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9039, v8959) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9040
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9041,) {}
output:  v9042
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9042, v8960) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9043
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9043, v8961) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v9044
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9044, v8962) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9045
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9046,) {}
output:  v9047
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9047, v8963) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9048
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9048, v8964) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v9049
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9049, v8965) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9050
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9051,) {}
output:  v9052
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v8966, v8913) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v8967
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v8967,) {}
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v8968
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8968, v8914) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v8969
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8968, v8915) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v8970
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8969, v8916) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v8971
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8971, v8917) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:10:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v8972
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8973,) {}
output:  v8974
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8974, v8918) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v8975
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8975, v8919) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v8976
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8976, v8920) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v8977
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8978,) {}
output:  v8979
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8979, v8921) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v8980
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8980, v8922) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v8981
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8981, v8923) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v8982
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8983,) {}
output:  v8984
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8984, v8924) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v8985
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v8984, v8925) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v8986
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v8985, v8926) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v8987
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8987, v8927) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v8988
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8989,) {}
output:  v8990
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8990, v8928) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v8991
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v8991, v8929) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v8992
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8992, v8930) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v8993
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8994,) {}
output:  v8995
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8995, v8931) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v8996
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v8996, v8932) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v8997
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v8997, v8933) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v8998
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v8999,) {}
output:  v9000
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9000, v8934) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:10:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v9001
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9001, v8935) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v9002
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9002, v8936) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v9003
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9004,) {}
output:  v9005
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9005, v8937) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v9006
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9005, v8938) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v9007
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9006, v8939) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v9008
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9008, v8940) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v9009
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9010,) {}
output:  v9011
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9011, v8941) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v9012
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9012, v8942) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v9013
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9013, v8943) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v9014
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9015,) {}
output:  v9016
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9016, v8944) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v9017
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9017, v8945) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v9018
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9018, v8946) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v9019
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9020,) {}
output:  v9021
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9021, v8947) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v9022
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9022, v8948) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v9023
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9023, v8949) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v9024
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9025,) {}
output:  v9026
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9026, v8950) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v9027
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9027, v8951) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v9028
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9028, v8952) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v9029
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9030,) {}
output:  v9031
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9031, v8953) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v9032
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9032, v8954) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v9033
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9033, v8955) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:10:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v9034
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9035,) {}
output:  v9036
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9036, v8956) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v9037
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9036, v8957) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v9038
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9037, v8958) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v9039
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9039, v8959) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v9040
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9041,) {}
output:  v9042
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9042, v8960) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v9043
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9043, v8961) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v9044
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9044, v8962) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v9045
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9046,) {}
output:  v9047
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9047, v8963) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v9048
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9048, v8964) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v9049
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9049, v8965) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:10:40 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v9050
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9051,) {}
output:  v9052
Processing basic block Tue Jun 11 16:10:41 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 56.304216 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:10:50 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv1366_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1366_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
Compiled 4100000 lines at Tue Jun 11 16:10:51 2024
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v9159, v9106) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v9160
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v9160,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v9161
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9161, v9107) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v9162
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9161, v9108) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v9163
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9162, v9109) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9164
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9164, v9110) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9165
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9166,) {}
output:  v9167
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9167, v9111) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v9168
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9168, v9112) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9169
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9169, v9113) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9170
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9171,) {}
output:  v9172
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9172, v9114) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v9173
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9173, v9115) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9174
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9174, v9116) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9175
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9176,) {}
output:  v9177
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9177, v9117) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v9178
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9177, v9118) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v9179
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9178, v9119) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v9180
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9180, v9120) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9181
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9182,) {}
output:  v9183
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9183, v9121) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9184
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9184, v9122) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v9185
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9185, v9123) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9186
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9187,) {}
output:  v9188
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9188, v9124) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9189
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9189, v9125) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9190
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9190, v9126) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9191
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9192,) {}
output:  v9193
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9193, v9127) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9194
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9194, v9128) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9195
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9195, v9129) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9196
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9197,) {}
output:  v9198
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9198, v9130) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v9199
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9198, v9131) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v9200
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9199, v9132) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v9201
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9201, v9133) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9202
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9203,) {}
output:  v9204
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9204, v9134) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9205
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9205, v9135) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9206
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9206, v9136) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9207
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9208,) {}
output:  v9209
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9209, v9137) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9210
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9210, v9138) {}
512 512 (1, 512, 14, 14) (512, 32, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 32, 3, 3)
output:  v9211
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9211, v9139) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9212
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9213,) {}
output:  v9214
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9214, v9140) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9215
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9215, v9141) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9216
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9216, v9142) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9217
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9218,) {}
output:  v9219
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9219, v9143) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9220
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9220, v9144) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9221
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9221, v9145) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9222
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9223,) {}
output:  v9224
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9224, v9146) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9225
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9225, v9147) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9226
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9226, v9148) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9227
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9228,) {}
output:  v9229
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9229, v9149) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v9230
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9229, v9150) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9231
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9230, v9151) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v9232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9232, v9152) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9233
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9234,) {}
output:  v9235
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9235, v9153) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9236
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9236, v9154) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v9237
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9237, v9155) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9238
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9239,) {}
output:  v9240
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9240, v9156) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9241
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9241, v9157) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v9242
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9242, v9158) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9243
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9244,) {}
output:  v9245
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v9159, v9106) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:10:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:10:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v9160
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v9160,) {}
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v9161
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9161, v9107) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v9162
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9161, v9108) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v9163
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9162, v9109) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v9164
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9164, v9110) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v9165
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9166,) {}
output:  v9167
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9167, v9111) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v9168
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9168, v9112) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v9169
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9169, v9113) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v9170
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9171,) {}
output:  v9172
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9172, v9114) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v9173
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9173, v9115) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v9174
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9174, v9116) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v9175
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9176,) {}
output:  v9177
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9177, v9117) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v9178
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9177, v9118) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v9179
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9178, v9119) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:10:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v9180
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9180, v9120) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v9181
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9182,) {}
output:  v9183
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9183, v9121) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v9184
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9184, v9122) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v9185
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9185, v9123) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v9186
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9187,) {}
output:  v9188
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9188, v9124) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v9189
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9189, v9125) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v9190
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9190, v9126) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v9191
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9192,) {}
output:  v9193
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9193, v9127) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v9194
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9194, v9128) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v9195
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9195, v9129) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v9196
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9197,) {}
output:  v9198
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9198, v9130) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v9199
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9198, v9131) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v9200
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9199, v9132) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v9201
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9201, v9133) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v9202
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9203,) {}
output:  v9204
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9204, v9134) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v9205
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9205, v9135) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v9206
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9206, v9136) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v9207
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9208,) {}
output:  v9209
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9209, v9137) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v9210
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9210, v9138) {}
512 32 (1, 512, 14, 14) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v9211
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9211, v9139) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v9212
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9213,) {}
output:  v9214
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9214, v9140) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v9215
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9215, v9141) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v9216
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9216, v9142) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v9217
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9218,) {}
output:  v9219
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9219, v9143) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v9220
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9220, v9144) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v9221
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9221, v9145) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v9222
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9223,) {}
output:  v9224
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9224, v9146) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v9225
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9225, v9147) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v9226
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9226, v9148) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v9227
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9228,) {}
output:  v9229
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9229, v9149) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v9230
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9229, v9150) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v9231
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9230, v9151) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v9232
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9232, v9152) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v9233
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9234,) {}
output:  v9235
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9235, v9153) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v9236
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9236, v9154) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v9237
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9237, v9155) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v9238
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9239,) {}
output:  v9240
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9240, v9156) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:10:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v9241
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9241, v9157) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:11:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:11:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v9242
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9242, v9158) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:11:00 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v9243
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9244,) {}
output:  v9245
Processing basic block Tue Jun 11 16:11:00 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.045656 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:11:10 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv1382_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1382_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v9352, v9299) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v9353
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v9353,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v9354
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9354, v9300) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v9355
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9354, v9301) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v9356
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9355, v9302) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9357
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9357, v9303) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9358
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9359,) {}
output:  v9360
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9360, v9304) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v9361
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9361, v9305) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9362
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9362, v9306) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9363
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9364,) {}
output:  v9365
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9365, v9307) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v9366
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9366, v9308) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9367
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9367, v9309) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9368
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9369,) {}
output:  v9370
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9370, v9310) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v9371
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9370, v9311) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v9372
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9371, v9312) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v9373
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9373, v9313) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9374
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9375,) {}
output:  v9376
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9376, v9314) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9377
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9377, v9315) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v9378
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9378, v9316) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9379
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9380,) {}
output:  v9381
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9381, v9317) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9382
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9382, v9318) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9383
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9383, v9319) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9384
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9385,) {}
output:  v9386
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9386, v9320) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9387
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9387, v9321) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9388
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9388, v9322) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9389
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9390,) {}
Compiled 4200000 lines at Tue Jun 11 16:11:16 2024
output:  v9391
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9391, v9323) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v9392
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9391, v9324) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v9393
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9392, v9325) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v9394
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9394, v9326) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9395
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9396,) {}
output:  v9397
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9397, v9327) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9398
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9398, v9328) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9399
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9399, v9329) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9400
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9401,) {}
output:  v9402
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9402, v9330) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9403
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9403, v9331) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9404
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9404, v9332) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9405
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9406,) {}
output:  v9407
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9407, v9333) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9408
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9408, v9334) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9409
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9409, v9335) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9410
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9411,) {}
output:  v9412
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9412, v9336) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9413
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9413, v9337) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9414
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9414, v9338) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9415
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9416,) {}
output:  v9417
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9417, v9339) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9418
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9418, v9340) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9419
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9419, v9341) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9420
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9421,) {}
output:  v9422
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9422, v9342) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v9423
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9422, v9343) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9424
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9423, v9344) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v9425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9425, v9345) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9426
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9427,) {}
output:  v9428
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9428, v9346) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9429
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9429, v9347) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v9430
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9430, v9348) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9431
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9432,) {}
output:  v9433
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9433, v9349) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9434
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9434, v9350) {}
1024 1024 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 64, 3, 3)
output:  v9435
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9435, v9351) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9436
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9437,) {}
output:  v9438
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v9352, v9299) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:11:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:11:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v9353
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v9353,) {}
Processing basic block Tue Jun 11 16:11:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v9354
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9354, v9300) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:16 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v9355
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9354, v9301) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v9356
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9355, v9302) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v9357
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9357, v9303) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v9358
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9359,) {}
output:  v9360
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9360, v9304) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v9361
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9361, v9305) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v9362
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9362, v9306) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v9363
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9364,) {}
output:  v9365
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9365, v9307) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v9366
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9366, v9308) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v9367
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9367, v9309) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v9368
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9369,) {}
output:  v9370
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9370, v9310) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v9371
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9370, v9311) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v9372
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9371, v9312) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v9373
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9373, v9313) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v9374
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9375,) {}
output:  v9376
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9376, v9314) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v9377
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9377, v9315) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v9378
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9378, v9316) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v9379
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9380,) {}
output:  v9381
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9381, v9317) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v9382
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9382, v9318) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:11:17 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v9383
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9383, v9319) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v9384
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9385,) {}
output:  v9386
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9386, v9320) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v9387
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9387, v9321) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v9388
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9388, v9322) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v9389
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9390,) {}
output:  v9391
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9391, v9323) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v9392
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9391, v9324) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v9393
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9392, v9325) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v9394
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9394, v9326) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v9395
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9396,) {}
output:  v9397
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9397, v9327) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v9398
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9398, v9328) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v9399
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9399, v9329) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v9400
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9401,) {}
output:  v9402
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9402, v9330) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v9403
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9403, v9331) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v9404
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9404, v9332) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v9405
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9406,) {}
output:  v9407
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9407, v9333) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v9408
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9408, v9334) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v9409
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9409, v9335) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:11:18 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v9410
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9411,) {}
output:  v9412
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9412, v9336) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v9413
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9413, v9337) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v9414
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9414, v9338) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v9415
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9416,) {}
output:  v9417
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9417, v9339) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v9418
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9418, v9340) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v9419
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9419, v9341) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v9420
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9421,) {}
output:  v9422
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9422, v9342) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v9423
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9422, v9343) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v9424
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9423, v9344) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v9425
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9425, v9345) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v9426
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9427,) {}
output:  v9428
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9428, v9346) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v9429
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9429, v9347) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v9430
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9430, v9348) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v9431
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9432,) {}
output:  v9433
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9433, v9349) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v9434
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9434, v9350) {}
1024 64 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v9435
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9435, v9351) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:11:19 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v9436
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9437,) {}
output:  v9438
Processing basic block Tue Jun 11 16:11:20 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-120-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.246166 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:11:29 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv168_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv168_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv1379_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1379_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v9545, v9492) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v9546
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v9546,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v9547
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9547, v9493) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v9548
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9547, v9494) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v9549
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9548, v9495) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9550
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9550, v9496) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9551
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9552,) {}
output:  v9553
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9553, v9497) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v9554
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9554, v9498) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9555
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9555, v9499) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9556
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9557,) {}
output:  v9558
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9558, v9500) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v9559
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9559, v9501) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9560
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9560, v9502) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9561
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9562,) {}
output:  v9563
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9563, v9503) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v9564
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9563, v9504) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v9565
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9564, v9505) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v9566
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9566, v9506) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9567
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9568,) {}
output:  v9569
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9569, v9507) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9570
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9570, v9508) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v9571
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9571, v9509) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9572
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9573,) {}
output:  v9574
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9574, v9510) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9575
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9575, v9511) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9576
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9576, v9512) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9577
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9578,) {}
output:  v9579
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9579, v9513) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9580
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9580, v9514) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9581
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9581, v9515) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9582
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9583,) {}
output:  v9584
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9584, v9516) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v9585
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9584, v9517) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v9586
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9585, v9518) {}
512 512 (1, 512, 28, 28) (512, 16, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 16, 3, 3)
output:  v9587
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9587, v9519) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9588
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9589,) {}
output:  v9590
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9590, v9520) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9591
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9591, v9521) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9592
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9592, v9522) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9593
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9594,) {}
output:  v9595
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9595, v9523) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9596
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9596, v9524) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9597
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9597, v9525) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9598
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9599,) {}
output:  v9600
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9600, v9526) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9601
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9601, v9527) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9602
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9602, v9528) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9603
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9604,) {}
output:  v9605
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9605, v9529) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9606
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9606, v9530) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9607
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9607, v9531) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9608
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9609,) {}
output:  v9610
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9610, v9532) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9611
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9611, v9533) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9612
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9612, v9534) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9613
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9614,) {}
output:  v9615
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9615, v9535) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v9616
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9615, v9536) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9617
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9616, v9537) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v9618
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9618, v9538) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9619
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9620,) {}
output:  v9621
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9621, v9539) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9622
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9622, v9540) {}
1024 1024 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 64, 3, 3)
output:  v9623
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9623, v9541) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9624
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9625,) {}
output:  v9626
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9626, v9542) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9627
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9627, v9543) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v9628
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9628, v9544) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9629
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9630,) {}
output:  v9631
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v9545, v9492) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:11:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:11:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v9546
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v9546,) {}
Processing basic block Tue Jun 11 16:11:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v9547
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9547, v9493) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:36 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v9548
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9547, v9494) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v9549
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9548, v9495) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v9550
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9550, v9496) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v9551
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9552,) {}
output:  v9553
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9553, v9497) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Compiled 4300000 lines at Tue Jun 11 16:11:37 2024
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v9554
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9554, v9498) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v9555
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9555, v9499) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v9556
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9557,) {}
output:  v9558
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9558, v9500) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v9559
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9559, v9501) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v9560
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9560, v9502) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v9561
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9562,) {}
output:  v9563
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9563, v9503) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v9564
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9563, v9504) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v9565
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9564, v9505) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v9566
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9566, v9506) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v9567
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9568,) {}
output:  v9569
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9569, v9507) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v9570
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9570, v9508) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v9571
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9571, v9509) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v9572
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9573,) {}
output:  v9574
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9574, v9510) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v9575
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9575, v9511) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v9576
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9576, v9512) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v9577
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9578,) {}
output:  v9579
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9579, v9513) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v9580
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9580, v9514) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:11:37 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v9581
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9581, v9515) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v9582
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9583,) {}
output:  v9584
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9584, v9516) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v9585
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9584, v9517) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v9586
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9585, v9518) {}
512 16 (1, 512, 28, 28) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v9587
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9587, v9519) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v9588
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9589,) {}
output:  v9590
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9590, v9520) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v9591
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9591, v9521) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v9592
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9592, v9522) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v9593
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9594,) {}
output:  v9595
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9595, v9523) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v9596
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9596, v9524) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v9597
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9597, v9525) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v9598
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9599,) {}
output:  v9600
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9600, v9526) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v9601
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9601, v9527) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v9602
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9602, v9528) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v9603
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9604,) {}
output:  v9605
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9605, v9529) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v9606
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9606, v9530) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v9607
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9607, v9531) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:38 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v9608
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9609,) {}
output:  v9610
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9610, v9532) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v9611
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9611, v9533) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v9612
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9612, v9534) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v9613
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9614,) {}
output:  v9615
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9615, v9535) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v9616
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9615, v9536) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v9617
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9616, v9537) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v9618
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9618, v9538) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v9619
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9620,) {}
output:  v9621
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9621, v9539) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v9622
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9622, v9540) {}
1024 64 (1, 1024, 7, 7) (1024, 64, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v9623
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9623, v9541) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v9624
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9625,) {}
output:  v9626
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9626, v9542) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v9627
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9627, v9543) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v9628
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9628, v9544) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v9629
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9630,) {}
output:  v9631
Processing basic block Tue Jun 11 16:11:39 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-113-begin-loop-1 blowing up rounds:  (1008 / 1008) ** 3 < 1008
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 51.543236 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
############# 2024-06-11 16:11:49 ############
Default bit length: 63
Default security parameter: 40
Compiling: testonnx from compile_func
node:  Conv
node input:  ['data', 'Conv102_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
node:  MaxPool
node input:  ['Conv102_fwd0']
layer:  <class 'Compiler.nn.MaxPool2d'>
final layer:  MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv106_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['MaxPool104_fwd0', 'Conv112_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv106_fwd0', 'Conv108_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv108_fwd0', 'Conv110_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu114_fwd0', 'Conv116_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv116_fwd0', 'Conv118_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv118_fwd0', 'Conv120_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu122_fwd0', 'Conv124_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv124_fwd0', 'Conv126_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv126_fwd0', 'Conv128_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu130_fwd0', 'Conv132_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu130_fwd0', 'Conv138_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv132_fwd0', 'Conv134_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv134_fwd0', 'Conv136_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu140_fwd0', 'Conv142_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv142_fwd0', 'Conv278_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv278_fwd0', 'Conv146_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu148_fwd0', 'Conv150_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv150_fwd0', 'Conv152_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv152_fwd0', 'Conv154_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu156_fwd0', 'Conv158_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv158_fwd0', 'Conv160_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv160_fwd0', 'Conv162_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu164_fwd0', 'Conv166_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu164_fwd0', 'Conv172_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv166_fwd0', 'Conv1390_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
node:  Conv
node input:  ['Conv1390_fwd0', 'Conv170_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu174_fwd0', 'Conv176_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv176_fwd0', 'Conv178_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv178_fwd0', 'Conv180_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu182_fwd0', 'Conv184_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv184_fwd0', 'Conv186_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv186_fwd0', 'Conv188_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu190_fwd0', 'Conv192_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv192_fwd0', 'Conv194_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv194_fwd0', 'Conv196_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu198_fwd0', 'Conv200_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv200_fwd0', 'Conv202_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv202_fwd0', 'Conv204_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu206_fwd0', 'Conv208_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv208_fwd0', 'Conv210_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv210_fwd0', 'Conv212_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu214_fwd0', 'Conv216_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Relu214_fwd0', 'Conv222_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
node:  Conv
node input:  ['Conv216_fwd0', 'Conv218_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv218_fwd0', 'Conv220_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu224_fwd0', 'Conv226_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv226_fwd0', 'Conv228_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv228_fwd0', 'Conv230_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
node:  Conv
node input:  ['Relu232_fwd0', 'Conv234_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Conv
node input:  ['Conv234_fwd0', 'Conv236_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
node:  Conv
node input:  ['Conv236_fwd0', 'Conv238_weight']
layer:  <class 'Compiler.nn.Conv2d'>
final layer:  Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
node:  Add
node:  Relu
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v9738, v9685) {}
3 64 (1, 3, 224, 224) (64, 3, 7, 7)
conv_in_size:  (1, 3, 224, 224)
conv_w_size:  (64, 3, 7, 7)
output:  v9739
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v9739,) {}
maxpool_in_size:  (1, 64, 112, 112)
maxpool_out_size:  (1, 64, 56, 56)
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v9740
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9740, v9686) {}
64 128 (1, 64, 56, 56) (128, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (128, 64, 1, 1)
output:  v9741
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9740, v9687) {}
64 256 (1, 64, 56, 56) (256, 64, 1, 1)
conv_in_size:  (1, 64, 56, 56)
conv_w_size:  (256, 64, 1, 1)
output:  v9742
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9741, v9688) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9743
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9743, v9689) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9744
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9745,) {}
output:  v9746
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9746, v9690) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v9747
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9747, v9691) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9748
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9748, v9692) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9749
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9750,) {}
output:  v9751
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9751, v9693) {}
256 128 (1, 256, 56, 56) (128, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (128, 256, 1, 1)
output:  v9752
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9752, v9694) {}
128 128 (1, 128, 56, 56) (128, 4, 3, 3)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (128, 4, 3, 3)
output:  v9753
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9753, v9695) {}
128 256 (1, 128, 56, 56) (256, 128, 1, 1)
conv_in_size:  (1, 128, 56, 56)
conv_w_size:  (256, 128, 1, 1)
output:  v9754
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9755,) {}
output:  v9756
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9756, v9696) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 256, 1, 1)
output:  v9757
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9756, v9697) {}
256 512 (1, 256, 56, 56) (512, 256, 1, 1)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (512, 256, 1, 1)
output:  v9758
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9757, v9698) {}
256 256 (1, 256, 56, 56) (256, 8, 3, 3)
conv_in_size:  (1, 256, 56, 56)
conv_w_size:  (256, 8, 3, 3)
output:  v9759
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9759, v9699) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9760
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9761,) {}
output:  v9762
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9762, v9700) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9763
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9763, v9701) {}
256 256 (1, 256, 28, 28) (256, 16, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 16, 3, 3)
output:  v9764
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9764, v9702) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9765
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9766,) {}
output:  v9767
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9767, v9703) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9768
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9768, v9704) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9769
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9769, v9705) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9770
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9771,) {}
output:  v9772
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9772, v9706) {}
512 256 (1, 512, 28, 28) (256, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (256, 512, 1, 1)
output:  v9773
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9773, v9707) {}
256 256 (1, 256, 28, 28) (256, 8, 3, 3)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (256, 8, 3, 3)
output:  v9774
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9774, v9708) {}
256 512 (1, 256, 28, 28) (512, 256, 1, 1)
conv_in_size:  (1, 256, 28, 28)
conv_w_size:  (512, 256, 1, 1)
output:  v9775
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9776,) {}
output:  v9777
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9777, v9709) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 512, 1, 1)
output:  v9778
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9777, v9710) {}
512 1024 (1, 512, 28, 28) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (1024, 512, 1, 1)
output:  v9779
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v9778, v9711) {}
512 512 (1, 512, 28, 28) (512, 32, 3, 3)
conv_in_size:  (1, 512, 28, 28)
conv_w_size:  (512, 32, 3, 3)
output:  v9780
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9780, v9712) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9781
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9782,) {}
output:  v9783
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9783, v9713) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9784
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9784, v9714) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9785
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9785, v9715) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9786
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9787,) {}
output:  v9788
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9788, v9716) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9789
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9789, v9717) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9790
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9790, v9718) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9791
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9792,) {}
output:  v9793
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9793, v9719) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9794
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9794, v9720) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9795
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9795, v9721) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9796
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9797,) {}
output:  v9798
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9798, v9722) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9799
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9799, v9723) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9800
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9800, v9724) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9801
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9802,) {}
output:  v9803
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9803, v9725) {}
1024 512 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (512, 1024, 1, 1)
output:  v9804
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9804, v9726) {}
512 512 (1, 512, 14, 14) (512, 16, 3, 3)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (512, 16, 3, 3)
output:  v9805
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9805, v9727) {}
512 1024 (1, 512, 14, 14) (1024, 512, 1, 1)
conv_in_size:  (1, 512, 14, 14)
conv_w_size:  (1024, 512, 1, 1)
output:  v9806
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9807,) {}
output:  v9808
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9808, v9728) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 1024, 1, 1)
output:  v9809
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9808, v9729) {}
1024 2048 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9810
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9809, v9730) {}
1024 1024 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 14, 14)
conv_w_size:  (1024, 32, 3, 3)
output:  v9811
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9811, v9731) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9812
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9813,) {}
output:  v9814
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9814, v9732) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9815
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9815, v9733) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v9816
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9816, v9734) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9817
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9818,) {}
output:  v9819
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9819, v9735) {}
2048 1024 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv_in_size:  (1, 2048, 7, 7)
conv_w_size:  (1024, 2048, 1, 1)
output:  v9820
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9820, v9736) {}
1024 1024 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (1024, 32, 3, 3)
output:  v9821
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9821, v9737) {}
1024 2048 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv_in_size:  (1, 1024, 7, 7)
conv_w_size:  (2048, 1024, 1, 1)
output:  v9822
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9823,) {}
output:  v9824
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(64, 3, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)>
args:  (v9738, v9685) {}
64 3 (1, 3, 224, 224) (64, 3, 7, 7)
conv-forward
(1, 64, 112, 112)
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-1.bc
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-2.bc
output:  v9739
NOSTAND
forward:  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=1, ceil_mode=False)>
args:  (v9739,) {}
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-3.bc
maxpool_out_size_true:  (1, 64, 56, 56)
output:  v9740
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9740, v9686) {}
128 64 (1, 64, 56, 56) (128, 64, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-4.bc
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-5.bc
output:  v9741
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9740, v9687) {}
256 64 (1, 64, 56, 56) (256, 64, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-6.bc
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-7.bc
output:  v9742
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9741, v9688) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-8.bc
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-9.bc
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-10.bc
output:  v9743
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9743, v9689) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-11.bc
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-12.bc
output:  v9744
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9745,) {}
output:  v9746
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9746, v9690) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-13.bc
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-14.bc
output:  v9747
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9747, v9691) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-15.bc
Processing basic block Tue Jun 11 16:11:56 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-16.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-17.bc
output:  v9748
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9748, v9692) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-18.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-19.bc
output:  v9749
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9750,) {}
output:  v9751
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9751, v9693) {}
128 256 (1, 256, 56, 56) (128, 256, 1, 1)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-20.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-21.bc
output:  v9752
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(128, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9752, v9694) {}
128 4 (1, 128, 56, 56) (128, 4, 3, 3)
conv-forward
(1, 128, 56, 56)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-22.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-23.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-24.bc
output:  v9753
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9753, v9695) {}
256 128 (1, 128, 56, 56) (256, 128, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-25.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-26.bc
output:  v9754
NOSTAND
(1, 256, 56, 56) (1, 256, 56, 56)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9755,) {}
output:  v9756
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9756, v9696) {}
256 256 (1, 256, 56, 56) (256, 256, 1, 1)
conv-forward
(1, 256, 56, 56)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-27.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-28.bc
output:  v9757
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9756, v9697) {}
512 256 (1, 256, 56, 56) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-29.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-30.bc
output:  v9758
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9757, v9698) {}
256 8 (1, 256, 56, 56) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-31.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-32.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-33.bc
output:  v9759
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9759, v9699) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-34.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-35.bc
output:  v9760
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9761,) {}
output:  v9762
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9762, v9700) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-36.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-37.bc
output:  v9763
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)>
args:  (v9763, v9701) {}
256 16 (1, 256, 28, 28) (256, 16, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-38.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-39.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-40.bc
output:  v9764
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9764, v9702) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-41.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-42.bc
output:  v9765
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9766,) {}
output:  v9767
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9767, v9703) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-43.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-44.bc
output:  v9768
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9768, v9704) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-45.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-46.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-47.bc
output:  v9769
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9769, v9705) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-48.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-49.bc
output:  v9770
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9771,) {}
output:  v9772
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9772, v9706) {}
256 512 (1, 512, 28, 28) (256, 512, 1, 1)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-50.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-51.bc
output:  v9773
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(256, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9773, v9707) {}
256 8 (1, 256, 28, 28) (256, 8, 3, 3)
conv-forward
(1, 256, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-52.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-53.bc
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-54.bc
output:  v9774
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9774, v9708) {}
512 256 (1, 256, 28, 28) (512, 256, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-55.bc
Compiled 4400000 lines at Tue Jun 11 16:11:57 2024
Processing basic block Tue Jun 11 16:11:57 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-56.bc
output:  v9775
NOSTAND
(1, 512, 28, 28) (1, 512, 28, 28)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9776,) {}
output:  v9777
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9777, v9709) {}
512 512 (1, 512, 28, 28) (512, 512, 1, 1)
conv-forward
(1, 512, 28, 28)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-57.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-58.bc
output:  v9778
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9777, v9710) {}
1024 512 (1, 512, 28, 28) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-59.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-60.bc
output:  v9779
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)>
args:  (v9778, v9711) {}
512 32 (1, 512, 28, 28) (512, 32, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-61.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-62.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-63.bc
output:  v9780
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9780, v9712) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-64.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-65.bc
output:  v9781
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9782,) {}
output:  v9783
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9783, v9713) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-66.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-67.bc
output:  v9784
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9784, v9714) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-68.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-69.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-70.bc
output:  v9785
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9785, v9715) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-71.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-72.bc
output:  v9786
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9787,) {}
output:  v9788
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9788, v9716) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-73.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-74.bc
output:  v9789
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9789, v9717) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-75.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-76.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-77.bc
output:  v9790
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9790, v9718) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-78.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-79.bc
output:  v9791
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9792,) {}
output:  v9793
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9793, v9719) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-80.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-81.bc
output:  v9794
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9794, v9720) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-82.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-83.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-84.bc
output:  v9795
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9795, v9721) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-85.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-86.bc
output:  v9796
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9797,) {}
output:  v9798
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9798, v9722) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-87.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-88.bc
output:  v9799
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9799, v9723) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-89.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-90.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-91.bc
output:  v9800
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9800, v9724) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-92.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-93.bc
output:  v9801
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9802,) {}
output:  v9803
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9803, v9725) {}
512 1024 (1, 1024, 14, 14) (512, 1024, 1, 1)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-94.bc
Processing basic block Tue Jun 11 16:11:58 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-95.bc
output:  v9804
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9804, v9726) {}
512 16 (1, 512, 14, 14) (512, 16, 3, 3)
conv-forward
(1, 512, 14, 14)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-96.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-97.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-98.bc
output:  v9805
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9805, v9727) {}
1024 512 (1, 512, 14, 14) (1024, 512, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-99.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-100.bc
output:  v9806
NOSTAND
(1, 1024, 14, 14) (1, 1024, 14, 14)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9807,) {}
output:  v9808
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9808, v9728) {}
1024 1024 (1, 1024, 14, 14) (1024, 1024, 1, 1)
conv-forward
(1, 1024, 14, 14)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-101.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-102.bc
output:  v9809
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)>
args:  (v9808, v9729) {}
2048 1024 (1, 1024, 14, 14) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-103.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-104.bc
output:  v9810
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)>
args:  (v9809, v9730) {}
1024 32 (1, 1024, 14, 14) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-105.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-106.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-107.bc
output:  v9811
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9811, v9731) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-108.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-109.bc
output:  v9812
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9813,) {}
output:  v9814
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9814, v9732) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-110.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-111.bc
output:  v9815
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9815, v9733) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-112.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-113.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-114.bc
output:  v9816
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9816, v9734) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-115.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-116.bc
output:  v9817
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9818,) {}
output:  v9819
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9819, v9735) {}
1024 2048 (1, 2048, 7, 7) (1024, 2048, 1, 1)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-117.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-118.bc
output:  v9820
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(1024, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)>
args:  (v9820, v9736) {}
1024 32 (1, 1024, 7, 7) (1024, 32, 3, 3)
conv-forward
(1, 1024, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-119.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-120.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-121.bc
output:  v9821
NOSTAND
forward:  <bound method Conv2d.forward of Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)>
args:  (v9821, v9737) {}
2048 1024 (1, 1024, 7, 7) (2048, 1024, 1, 1)
conv-forward
(1, 2048, 7, 7)
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-122.bc
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-multithread-123.bc
output:  v9822
NOSTAND
(1, 2048, 7, 7) (1, 2048, 7, 7)
[1, 2, 3] [1, 2, 3]
NOSTAND
forward:  <bound method ReLU.forward of ReLU(inplace=True)>
args:  (v9823,) {}
output:  v9824
Processing basic block Tue Jun 11 16:11:59 2024
WARNING: Order of memory instructions not preserved, errors possible
testonnx-multithread-59-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-64-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-71-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-78-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-85-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-92-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-99-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-101-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-103-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-108-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-110-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-115-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
testonnx-multithread-117-begin-loop-1 blowing up rounds:  (1023 / 1023) ** 3 < 1023
testonnx-multithread-122-begin-loop-1 blowing up rounds:  (2047 / 2047) ** 3 < 2047
Profiling time: 50.917149 (ms)
Writing to /home/lx/Garnet/Programs/Schedules/testonnx.sch
Writing to /home/lx/Garnet/Programs/Bytecode/testonnx-0.bc
Program requires at most:
 84873707520 online communication bits
529473208320 offline communication bits
     6456821 online round
   102766560 offline round
