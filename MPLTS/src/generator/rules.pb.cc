// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#include "rules.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_rules_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapOutput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Parameter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tensor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Operator;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rule;
}  // namespace protobuf_rules_2eproto
namespace GraphSubst {
class ParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Parameter>
      _instance;
} _Parameter_default_instance_;
class TensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tensor>
      _instance;
} _Tensor_default_instance_;
class OperatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Operator>
      _instance;
} _Operator_default_instance_;
class MapOutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapOutput>
      _instance;
} _MapOutput_default_instance_;
class RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rule>
      _instance;
} _Rule_default_instance_;
class RuleCollectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RuleCollection>
      _instance;
} _RuleCollection_default_instance_;
}  // namespace GraphSubst
namespace protobuf_rules_2eproto {
static void InitDefaultsParameter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GraphSubst::_Parameter_default_instance_;
    new (ptr) ::GraphSubst::Parameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GraphSubst::Parameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Parameter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParameter}, {}};

static void InitDefaultsTensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GraphSubst::_Tensor_default_instance_;
    new (ptr) ::GraphSubst::Tensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GraphSubst::Tensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTensor}, {}};

static void InitDefaultsOperator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GraphSubst::_Operator_default_instance_;
    new (ptr) ::GraphSubst::Operator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GraphSubst::Operator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Operator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOperator}, {
      &protobuf_rules_2eproto::scc_info_Tensor.base,
      &protobuf_rules_2eproto::scc_info_Parameter.base,}};

static void InitDefaultsMapOutput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GraphSubst::_MapOutput_default_instance_;
    new (ptr) ::GraphSubst::MapOutput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GraphSubst::MapOutput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapOutput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapOutput}, {}};

static void InitDefaultsRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GraphSubst::_Rule_default_instance_;
    new (ptr) ::GraphSubst::Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GraphSubst::Rule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Rule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRule}, {
      &protobuf_rules_2eproto::scc_info_Operator.base,
      &protobuf_rules_2eproto::scc_info_MapOutput.base,}};

static void InitDefaultsRuleCollection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GraphSubst::_RuleCollection_default_instance_;
    new (ptr) ::GraphSubst::RuleCollection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GraphSubst::RuleCollection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RuleCollection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRuleCollection}, {
      &protobuf_rules_2eproto::scc_info_Rule.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Parameter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tensor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Operator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapOutput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RuleCollection.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, opid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, tsid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, para_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, srcopid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, dstopid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, srctsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, dsttsid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, srcop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, dstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, mappedoutput_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, rule_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::GraphSubst::Parameter)},
  { 9, 16, sizeof(::GraphSubst::Tensor)},
  { 18, 26, sizeof(::GraphSubst::Operator)},
  { 29, 38, sizeof(::GraphSubst::MapOutput)},
  { 42, 50, sizeof(::GraphSubst::Rule)},
  { 53, 59, sizeof(::GraphSubst::RuleCollection)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GraphSubst::_Parameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GraphSubst::_Tensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GraphSubst::_Operator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GraphSubst::_MapOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GraphSubst::_Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GraphSubst::_RuleCollection_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "rules.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013rules.proto\022\nGraphSubst\"\'\n\tParameter\022\013"
      "\n\003key\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\"$\n\006Tensor\022\014\n\004"
      "opId\030\001 \002(\005\022\014\n\004tsId\030\002 \002(\005\"`\n\010Operator\022\014\n\004"
      "type\030\001 \002(\005\022!\n\005input\030\002 \003(\0132\022.GraphSubst.T"
      "ensor\022#\n\004para\030\003 \003(\0132\025.GraphSubst.Paramet"
      "er\"O\n\tMapOutput\022\017\n\007srcOpId\030\001 \002(\005\022\017\n\007dstO"
      "pId\030\002 \002(\005\022\017\n\007srcTsId\030\003 \002(\005\022\017\n\007dstTsId\030\004 "
      "\002(\005\"}\n\004Rule\022#\n\005srcOp\030\001 \003(\0132\024.GraphSubst."
      "Operator\022#\n\005dstOp\030\002 \003(\0132\024.GraphSubst.Ope"
      "rator\022+\n\014mappedOutput\030\003 \003(\0132\025.GraphSubst"
      ".MapOutput\"0\n\016RuleCollection\022\036\n\004rule\030\001 \003"
      "(\0132\020.GraphSubst.Rule"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rules.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_rules_2eproto
namespace GraphSubst {

// ===================================================================

void Parameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameter::kKeyFieldNumber;
const int Parameter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameter::Parameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rules_2eproto::scc_info_Parameter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.Parameter)
}
Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Parameter)
}

void Parameter::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:GraphSubst.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
}

void Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Parameter& Parameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Parameter.base);
  return *internal_default_instance();
}


void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.Parameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.Parameter)
}

::google::protobuf::uint8* Parameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Parameter)
  return target;
}

size_t Parameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Parameter)
  size_t total_size = 0;

  if (has_key()) {
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Parameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Parameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Parameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Parameter)
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tensor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tensor::kOpIdFieldNumber;
const int Tensor::kTsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tensor::Tensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rules_2eproto::scc_info_Tensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&opid_, &from.opid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tsid_) -
    reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Tensor)
}

void Tensor::SharedCtor() {
  ::memset(&opid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsid_) -
      reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:GraphSubst.Tensor)
  SharedDtor();
}

void Tensor::SharedDtor() {
}

void Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tensor::descriptor() {
  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tensor& Tensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Tensor.base);
  return *internal_default_instance();
}


void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&opid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tsid_) -
        reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.Tensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_opid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tsId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.Tensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.Tensor)
  return false;
#undef DO_
}

void Tensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 opId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opid(), output);
  }

  // required int32 tsId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.Tensor)
}

::google::protobuf::uint8* Tensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 opId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opid(), target);
  }

  // required int32 tsId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tsid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Tensor)
  return target;
}

size_t Tensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Tensor)
  size_t total_size = 0;

  if (has_opid()) {
    // required int32 opId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opid());
  }

  if (has_tsid()) {
    // required int32 tsId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tsid());
  }

  return total_size;
}
size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Tensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 opId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opid());

    // required int32 tsId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tsid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Tensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Tensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      opid_ = from.opid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tsid_ = from.tsid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Tensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Tensor::Swap(Tensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  swap(opid_, other->opid_);
  swap(tsid_, other->tsid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tensor::GetMetadata() const {
  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Operator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operator::kTypeFieldNumber;
const int Operator::kInputFieldNumber;
const int Operator::kParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operator::Operator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rules_2eproto::scc_info_Operator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.Operator)
}
Operator::Operator(const Operator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      input_(from.input_),
      para_(from.para_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Operator)
}

void Operator::SharedCtor() {
  type_ = 0;
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:GraphSubst.Operator)
  SharedDtor();
}

void Operator::SharedDtor() {
}

void Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Operator::descriptor() {
  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Operator& Operator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Operator.base);
  return *internal_default_instance();
}


void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  para_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.Operator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GraphSubst.Tensor input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GraphSubst.Parameter para = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.Operator)
  return false;
#undef DO_
}

void Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .GraphSubst.Tensor input = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->input(static_cast<int>(i)),
      output);
  }

  // repeated .GraphSubst.Parameter para = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->para_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->para(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.Operator)
}

::google::protobuf::uint8* Operator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .GraphSubst.Tensor input = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->input(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GraphSubst.Parameter para = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->para_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->para(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Operator)
  return target;
}

size_t Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Operator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  // repeated .GraphSubst.Tensor input = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->input_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->input(static_cast<int>(i)));
    }
  }

  // repeated .GraphSubst.Parameter para = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->para_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->para(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  const Operator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Operator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Operator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Operator)
    MergeFrom(*source);
  }
}

void Operator::MergeFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  para_.MergeFrom(from.para_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void Operator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->input())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->para())) return false;
  return true;
}

void Operator::Swap(Operator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operator::InternalSwap(Operator* other) {
  using std::swap;
  CastToBase(&input_)->InternalSwap(CastToBase(&other->input_));
  CastToBase(&para_)->InternalSwap(CastToBase(&other->para_));
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Operator::GetMetadata() const {
  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapOutput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOutput::kSrcOpIdFieldNumber;
const int MapOutput::kDstOpIdFieldNumber;
const int MapOutput::kSrcTsIdFieldNumber;
const int MapOutput::kDstTsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOutput::MapOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rules_2eproto::scc_info_MapOutput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.MapOutput)
}
MapOutput::MapOutput(const MapOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&srcopid_, &from.srcopid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dsttsid_) -
    reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));
  // @@protoc_insertion_point(copy_constructor:GraphSubst.MapOutput)
}

void MapOutput::SharedCtor() {
  ::memset(&srcopid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dsttsid_) -
      reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));
}

MapOutput::~MapOutput() {
  // @@protoc_insertion_point(destructor:GraphSubst.MapOutput)
  SharedDtor();
}

void MapOutput::SharedDtor() {
}

void MapOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapOutput::descriptor() {
  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapOutput& MapOutput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_MapOutput.base);
  return *internal_default_instance();
}


void MapOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.MapOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&srcopid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dsttsid_) -
        reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.MapOutput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 srcOpId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_srcopid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcopid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 dstOpId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dstopid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstopid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 srcTsId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_srctsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srctsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 dstTsId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dsttsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dsttsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.MapOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.MapOutput)
  return false;
#undef DO_
}

void MapOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.MapOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 srcOpId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srcopid(), output);
  }

  // required int32 dstOpId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dstopid(), output);
  }

  // required int32 srcTsId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srctsid(), output);
  }

  // required int32 dstTsId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dsttsid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.MapOutput)
}

::google::protobuf::uint8* MapOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.MapOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 srcOpId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->srcopid(), target);
  }

  // required int32 dstOpId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dstopid(), target);
  }

  // required int32 srcTsId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srctsid(), target);
  }

  // required int32 dstTsId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dsttsid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.MapOutput)
  return target;
}

size_t MapOutput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.MapOutput)
  size_t total_size = 0;

  if (has_srcopid()) {
    // required int32 srcOpId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcopid());
  }

  if (has_dstopid()) {
    // required int32 dstOpId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dstopid());
  }

  if (has_srctsid()) {
    // required int32 srcTsId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srctsid());
  }

  if (has_dsttsid()) {
    // required int32 dstTsId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dsttsid());
  }

  return total_size;
}
size_t MapOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.MapOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 srcOpId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcopid());

    // required int32 dstOpId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dstopid());

    // required int32 srcTsId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srctsid());

    // required int32 dstTsId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dsttsid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.MapOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.MapOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.MapOutput)
    MergeFrom(*source);
  }
}

void MapOutput::MergeFrom(const MapOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.MapOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      srcopid_ = from.srcopid_;
    }
    if (cached_has_bits & 0x00000002u) {
      dstopid_ = from.dstopid_;
    }
    if (cached_has_bits & 0x00000004u) {
      srctsid_ = from.srctsid_;
    }
    if (cached_has_bits & 0x00000008u) {
      dsttsid_ = from.dsttsid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.MapOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutput::CopyFrom(const MapOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.MapOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MapOutput::Swap(MapOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOutput::InternalSwap(MapOutput* other) {
  using std::swap;
  swap(srcopid_, other->srcopid_);
  swap(dstopid_, other->dstopid_);
  swap(srctsid_, other->srctsid_);
  swap(dsttsid_, other->dsttsid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapOutput::GetMetadata() const {
  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rule::kSrcOpFieldNumber;
const int Rule::kDstOpFieldNumber;
const int Rule::kMappedOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rule::Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rules_2eproto::scc_info_Rule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.Rule)
}
Rule::Rule(const Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      srcop_(from.srcop_),
      dstop_(from.dstop_),
      mappedoutput_(from.mappedoutput_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Rule)
}

void Rule::SharedCtor() {
}

Rule::~Rule() {
  // @@protoc_insertion_point(destructor:GraphSubst.Rule)
  SharedDtor();
}

void Rule::SharedDtor() {
}

void Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rule::descriptor() {
  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rule& Rule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Rule.base);
  return *internal_default_instance();
}


void Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcop_.Clear();
  dstop_.Clear();
  mappedoutput_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.Rule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GraphSubst.Operator srcOp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_srcop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GraphSubst.Operator dstOp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dstop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GraphSubst.MapOutput mappedOutput = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mappedoutput()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.Rule)
  return false;
#undef DO_
}

void Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GraphSubst.Operator srcOp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->srcop_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->srcop(static_cast<int>(i)),
      output);
  }

  // repeated .GraphSubst.Operator dstOp = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dstop_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dstop(static_cast<int>(i)),
      output);
  }

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappedoutput_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->mappedoutput(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.Rule)
}

::google::protobuf::uint8* Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GraphSubst.Operator srcOp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->srcop_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->srcop(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GraphSubst.Operator dstOp = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dstop_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dstop(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappedoutput_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->mappedoutput(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Rule)
  return target;
}

size_t Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Rule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .GraphSubst.Operator srcOp = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->srcop_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->srcop(static_cast<int>(i)));
    }
  }

  // repeated .GraphSubst.Operator dstOp = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dstop_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dstop(static_cast<int>(i)));
    }
  }

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mappedoutput_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mappedoutput(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Rule)
    MergeFrom(*source);
  }
}

void Rule::MergeFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  srcop_.MergeFrom(from.srcop_);
  dstop_.MergeFrom(from.dstop_);
  mappedoutput_.MergeFrom(from.mappedoutput_);
}

void Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rule::CopyFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->srcop())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dstop())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mappedoutput())) return false;
  return true;
}

void Rule::Swap(Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rule::InternalSwap(Rule* other) {
  using std::swap;
  CastToBase(&srcop_)->InternalSwap(CastToBase(&other->srcop_));
  CastToBase(&dstop_)->InternalSwap(CastToBase(&other->dstop_));
  CastToBase(&mappedoutput_)->InternalSwap(CastToBase(&other->mappedoutput_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rule::GetMetadata() const {
  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RuleCollection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleCollection::kRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleCollection::RuleCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rules_2eproto::scc_info_RuleCollection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.RuleCollection)
}
RuleCollection::RuleCollection(const RuleCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rule_(from.rule_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.RuleCollection)
}

void RuleCollection::SharedCtor() {
}

RuleCollection::~RuleCollection() {
  // @@protoc_insertion_point(destructor:GraphSubst.RuleCollection)
  SharedDtor();
}

void RuleCollection::SharedDtor() {
}

void RuleCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RuleCollection::descriptor() {
  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuleCollection& RuleCollection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_RuleCollection.base);
  return *internal_default_instance();
}


void RuleCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.RuleCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rule_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RuleCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.RuleCollection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GraphSubst.Rule rule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.RuleCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.RuleCollection)
  return false;
#undef DO_
}

void RuleCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.RuleCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GraphSubst.Rule rule = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rule_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rule(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.RuleCollection)
}

::google::protobuf::uint8* RuleCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.RuleCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GraphSubst.Rule rule = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rule_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rule(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.RuleCollection)
  return target;
}

size_t RuleCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.RuleCollection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .GraphSubst.Rule rule = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rule(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.RuleCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.RuleCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.RuleCollection)
    MergeFrom(*source);
  }
}

void RuleCollection::MergeFrom(const RuleCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.RuleCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rule_.MergeFrom(from.rule_);
}

void RuleCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.RuleCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleCollection::CopyFrom(const RuleCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.RuleCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleCollection::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->rule())) return false;
  return true;
}

void RuleCollection::Swap(RuleCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuleCollection::InternalSwap(RuleCollection* other) {
  using std::swap;
  CastToBase(&rule_)->InternalSwap(CastToBase(&other->rule_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RuleCollection::GetMetadata() const {
  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GraphSubst
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GraphSubst::Parameter* Arena::CreateMaybeMessage< ::GraphSubst::Parameter >(Arena* arena) {
  return Arena::CreateInternal< ::GraphSubst::Parameter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GraphSubst::Tensor* Arena::CreateMaybeMessage< ::GraphSubst::Tensor >(Arena* arena) {
  return Arena::CreateInternal< ::GraphSubst::Tensor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GraphSubst::Operator* Arena::CreateMaybeMessage< ::GraphSubst::Operator >(Arena* arena) {
  return Arena::CreateInternal< ::GraphSubst::Operator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GraphSubst::MapOutput* Arena::CreateMaybeMessage< ::GraphSubst::MapOutput >(Arena* arena) {
  return Arena::CreateInternal< ::GraphSubst::MapOutput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GraphSubst::Rule* Arena::CreateMaybeMessage< ::GraphSubst::Rule >(Arena* arena) {
  return Arena::CreateInternal< ::GraphSubst::Rule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GraphSubst::RuleCollection* Arena::CreateMaybeMessage< ::GraphSubst::RuleCollection >(Arena* arena) {
  return Arena::CreateInternal< ::GraphSubst::RuleCollection >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
