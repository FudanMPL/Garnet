#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <math.h>
#include <inttypes.h>
#include <iostream>
#include <fstream>
#include <cstring>
#include <iomanip>
#include <cuda.h>


typedef unsigned long u32;
#define BYTE unsigned char

//设置数据块长度16字节（128位）
//设置gpu中每block中thread数量512
#define AES_BLOCK_SIZE 16
#define THREADS_PER_BLOCK 512
__constant__ uint8_t w3[240];
// S盒，host，扩展密钥用
uint8_t s_box[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

// S盒，device，加密用
__constant__ static const uint8_t sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};


// 逆S盒，device，解密用
__constant__ static const uint8_t sboxinv[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
    0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
    0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
    0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
    0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
    0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
    0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
    0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
    0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
    0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
    0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
    0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
    0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
    0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
    0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
    0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};


// x-time operation
__device__ uint8_t rj_xtime(uint8_t x){
  return (x & 0x80) ? ((x << 1) ^ 0x1b) : (x << 1);
}


// 字节代换
__device__ void aes_subBytes(uint8_t *buf){
  register uint8_t i, b;
  for (i = 0; i < 16; ++i){
    b = buf[i];
    buf[i] = sbox[b];
  }
} 


// 逆字节代换
__device__ void aes_subBytes_inv(uint8_t *buf){
  register uint8_t i, b;
  for (i = 0; i < 16; ++i){
    b = buf[i];
    buf[i] = sboxinv[b];
  }
} 


// 轮密钥加
__device__ void aes_addRoundKey(uint8_t *buf, uint8_t *key,uint8_t r){
  //register uint8_t i = 16;
  //while (i--){
   buf[16] ^= key[16*r+16];
   buf[15] ^= key[16*r+15];
   buf[14] ^= key[16*r+14];
   buf[13] ^= key[16*r+13];
   buf[12] ^= key[16*r+12];
   buf[11] ^= key[16*r+11];
   buf[10] ^= key[16*r+10];
   buf[9] ^= key[16*r+9];
   buf[8] ^= key[16*r+8];
   buf[7] ^= key[16*r+7];
   buf[6] ^= key[16*r+6];
   buf[5] ^= key[16*r+5];
   buf[4] ^= key[16*r+4];
   buf[3] ^= key[16*r+3];
   buf[2] ^= key[16*r+2];
   buf[1] ^= key[16*r+1];
   buf[0] ^= key[16*r+0];
  //}
} 


//行位移
__device__ void aes_shiftRows(uint8_t *buf){
  register uint8_t i, j; 
  i = buf[1];
  buf[1] = buf[5];
  buf[5] = buf[9];
  buf[9] = buf[13];
  buf[13] = i;
  i = buf[10];
  buf[10] = buf[2];
  buf[2] = i;
  j = buf[3];
  buf[3] = buf[15];
  buf[15] = buf[11];
  buf[11] = buf[7];
  buf[7] = j;
  j = buf[14];
  buf[14] = buf[6];
  buf[6]  = j;
}



// 逆行位移
__device__ void aes_shiftRows_inv(uint8_t *buf){
  register uint8_t i, j; 
  i = buf[1];
  buf[1] = buf[13];
  buf[13] = buf[9];
  buf[9] = buf[5];
  buf[5] = i;
  i = buf[2];
  buf[2] = buf[10];
  buf[10] = i;
  j = buf[3];
  buf[3] = buf[7];
  buf[7] = buf[11];
  buf[11] = buf[15];
  buf[15] = j;
  j = buf[6];
  buf[6] = buf[14];
  buf[14] = j;
} 


// 列混合
__device__ void aes_mixColumns(uint8_t *buf){
  register uint8_t i, a, b, c, d, e;
  for (i = 0; i < 16; i += 4){
    a = buf[i];
    b = buf[i + 1];
    c = buf[i + 2];
    d = buf[i + 3];
    e = a ^ b ^ c ^ d;
    buf[i] ^= e ^ rj_xtime(a^b);
    buf[i+1] ^= e ^ rj_xtime(b^c);
    buf[i+2] ^= e ^ rj_xtime(c^d);
    buf[i+3] ^= e ^ rj_xtime(d^a);
  }
} 


// 逆列混合
__device__ void aes_mixColumns_inv(uint8_t *buf){
  register uint8_t i, a, b, c, d, e, x, y, z;
  for (i = 0; i < 16; i += 4){
    a = buf[i];
    b = buf[i + 1];
    c = buf[i + 2];
    d = buf[i + 3];
    e = a ^ b ^ c ^ d;
    z = rj_xtime(e);
    x = e ^ rj_xtime(rj_xtime(z^a^c));
    y = e ^ rj_xtime(rj_xtime(z^b^d));
    buf[i] ^= x ^ rj_xtime(a^b);
    buf[i+1] ^= y ^ rj_xtime(b^c);
    buf[i+2] ^= x ^ rj_xtime(c^d);
    buf[i+3] ^= y ^ rj_xtime(d^a);
  }
} 

// 字循环 用于密钥扩展
void rot_word(uint8_t *w) {
	uint8_t tmp;
	uint8_t i;
	tmp = w[0];
	for (i = 0; i < 3; i++) {
		w[i] = w[i+1];
	}
	w[3] = tmp;
}
// 字节代换 用于密钥扩展
void sub_word(uint8_t *w) {
	uint8_t i;
	for (i = 0; i < 4; i++) {
		w[i] = s_box[w[i]];
	}
}
// 密钥扩展
void aes_key_expansion(uint8_t *key, uint8_t *w) {
	uint8_t tmp[4];
	uint8_t i;
	int Nb=4;
	int Nr=14;
	int Nk=8;
	uint8_t len = Nb*(Nr+1);
	uint8_t RC[11] = {0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36};

	for (i = 0; i < Nk; i++) {
		w[4*i+0] = key[4*i+0];
		w[4*i+1] = key[4*i+1];
		w[4*i+2] = key[4*i+2];
		w[4*i+3] = key[4*i+3];
	}

	for (i = Nk; i < len; i++) {
		tmp[0] = w[4*(i-1)+0];
		tmp[1] = w[4*(i-1)+1];
		tmp[2] = w[4*(i-1)+2];
		tmp[3] = w[4*(i-1)+3];
		if (i%Nk == 0) {
			rot_word(tmp);
			sub_word(tmp);;
			tmp[0] = RC[i/Nk]^tmp[0];
			tmp[1] = 0x00^tmp[1];
			tmp[2] = 0x00^tmp[2];
			tmp[3] = 0x00^tmp[3];
		} else if (Nk > 6 && i%Nk == 4) {
			sub_word(tmp);
		}

		w[4*i+0] = w[4*(i-Nk)+0]^tmp[0];
		w[4*i+1] = w[4*(i-Nk)+1]^tmp[1];
		w[4*i+2] = w[4*(i-Nk)+2]^tmp[2];
		w[4*i+3] = w[4*(i-Nk)+3]^tmp[3];
	}

}

//以下为T表
u32 Te0[256] = {
    0xc66363a5U, 0xf87c7c84U, 0xee777799U, 0xf67b7b8dU,
    0xfff2f20dU, 0xd66b6bbdU, 0xde6f6fb1U, 0x91c5c554U,
    0x60303050U, 0x02010103U, 0xce6767a9U, 0x562b2b7dU,
    0xe7fefe19U, 0xb5d7d762U, 0x4dababe6U, 0xec76769aU,
    0x8fcaca45U, 0x1f82829dU, 0x89c9c940U, 0xfa7d7d87U,
    0xeffafa15U, 0xb25959ebU, 0x8e4747c9U, 0xfbf0f00bU,
    0x41adadecU, 0xb3d4d467U, 0x5fa2a2fdU, 0x45afafeaU,
    0x239c9cbfU, 0x53a4a4f7U, 0xe4727296U, 0x9bc0c05bU,
    0x75b7b7c2U, 0xe1fdfd1cU, 0x3d9393aeU, 0x4c26266aU,
    0x6c36365aU, 0x7e3f3f41U, 0xf5f7f702U, 0x83cccc4fU,
    0x6834345cU, 0x51a5a5f4U, 0xd1e5e534U, 0xf9f1f108U,
    0xe2717193U, 0xabd8d873U, 0x62313153U, 0x2a15153fU,
    0x0804040cU, 0x95c7c752U, 0x46232365U, 0x9dc3c35eU,
    0x30181828U, 0x379696a1U, 0x0a05050fU, 0x2f9a9ab5U,
    0x0e070709U, 0x24121236U, 0x1b80809bU, 0xdfe2e23dU,
    0xcdebeb26U, 0x4e272769U, 0x7fb2b2cdU, 0xea75759fU,
    0x1209091bU, 0x1d83839eU, 0x582c2c74U, 0x341a1a2eU,
    0x361b1b2dU, 0xdc6e6eb2U, 0xb45a5aeeU, 0x5ba0a0fbU,
    0xa45252f6U, 0x763b3b4dU, 0xb7d6d661U, 0x7db3b3ceU,
    0x5229297bU, 0xdde3e33eU, 0x5e2f2f71U, 0x13848497U,
    0xa65353f5U, 0xb9d1d168U, 0x00000000U, 0xc1eded2cU,
    0x40202060U, 0xe3fcfc1fU, 0x79b1b1c8U, 0xb65b5bedU,
    0xd46a6abeU, 0x8dcbcb46U, 0x67bebed9U, 0x7239394bU,
    0x944a4adeU, 0x984c4cd4U, 0xb05858e8U, 0x85cfcf4aU,
    0xbbd0d06bU, 0xc5efef2aU, 0x4faaaae5U, 0xedfbfb16U,
    0x864343c5U, 0x9a4d4dd7U, 0x66333355U, 0x11858594U,
    0x8a4545cfU, 0xe9f9f910U, 0x04020206U, 0xfe7f7f81U,
    0xa05050f0U, 0x783c3c44U, 0x259f9fbaU, 0x4ba8a8e3U,
    0xa25151f3U, 0x5da3a3feU, 0x804040c0U, 0x058f8f8aU,
    0x3f9292adU, 0x219d9dbcU, 0x70383848U, 0xf1f5f504U,
    0x63bcbcdfU, 0x77b6b6c1U, 0xafdada75U, 0x42212163U,
    0x20101030U, 0xe5ffff1aU, 0xfdf3f30eU, 0xbfd2d26dU,
    0x81cdcd4cU, 0x180c0c14U, 0x26131335U, 0xc3ecec2fU,
    0xbe5f5fe1U, 0x359797a2U, 0x884444ccU, 0x2e171739U,
    0x93c4c457U, 0x55a7a7f2U, 0xfc7e7e82U, 0x7a3d3d47U,
    0xc86464acU, 0xba5d5de7U, 0x3219192bU, 0xe6737395U,
    0xc06060a0U, 0x19818198U, 0x9e4f4fd1U, 0xa3dcdc7fU,
    0x44222266U, 0x542a2a7eU, 0x3b9090abU, 0x0b888883U,
    0x8c4646caU, 0xc7eeee29U, 0x6bb8b8d3U, 0x2814143cU,
    0xa7dede79U, 0xbc5e5ee2U, 0x160b0b1dU, 0xaddbdb76U,
    0xdbe0e03bU, 0x64323256U, 0x743a3a4eU, 0x140a0a1eU,
    0x924949dbU, 0x0c06060aU, 0x4824246cU, 0xb85c5ce4U,
    0x9fc2c25dU, 0xbdd3d36eU, 0x43acacefU, 0xc46262a6U,
    0x399191a8U, 0x319595a4U, 0xd3e4e437U, 0xf279798bU,
    0xd5e7e732U, 0x8bc8c843U, 0x6e373759U, 0xda6d6db7U,
    0x018d8d8cU, 0xb1d5d564U, 0x9c4e4ed2U, 0x49a9a9e0U,
    0xd86c6cb4U, 0xac5656faU, 0xf3f4f407U, 0xcfeaea25U,
    0xca6565afU, 0xf47a7a8eU, 0x47aeaee9U, 0x10080818U,
    0x6fbabad5U, 0xf0787888U, 0x4a25256fU, 0x5c2e2e72U,
    0x381c1c24U, 0x57a6a6f1U, 0x73b4b4c7U, 0x97c6c651U,
    0xcbe8e823U, 0xa1dddd7cU, 0xe874749cU, 0x3e1f1f21U,
    0x964b4bddU, 0x61bdbddcU, 0x0d8b8b86U, 0x0f8a8a85U,
    0xe0707090U, 0x7c3e3e42U, 0x71b5b5c4U, 0xcc6666aaU,
    0x904848d8U, 0x06030305U, 0xf7f6f601U, 0x1c0e0e12U,
    0xc26161a3U, 0x6a35355fU, 0xae5757f9U, 0x69b9b9d0U,
    0x17868691U, 0x99c1c158U, 0x3a1d1d27U, 0x279e9eb9U,
    0xd9e1e138U, 0xebf8f813U, 0x2b9898b3U, 0x22111133U,
    0xd26969bbU, 0xa9d9d970U, 0x078e8e89U, 0x339494a7U,
    0x2d9b9bb6U, 0x3c1e1e22U, 0x15878792U, 0xc9e9e920U,
    0x87cece49U, 0xaa5555ffU, 0x50282878U, 0xa5dfdf7aU,
    0x038c8c8fU, 0x59a1a1f8U, 0x09898980U, 0x1a0d0d17U,
    0x65bfbfdaU, 0xd7e6e631U, 0x844242c6U, 0xd06868b8U,
    0x824141c3U, 0x299999b0U, 0x5a2d2d77U, 0x1e0f0f11U,
    0x7bb0b0cbU, 0xa85454fcU, 0x6dbbbbd6U, 0x2c16163aU,
};

u32 Te1[256] = {
    0xa5c66363U, 0x84f87c7cU, 0x99ee7777U, 0x8df67b7bU,
    0x0dfff2f2U, 0xbdd66b6bU, 0xb1de6f6fU, 0x5491c5c5U,
    0x50603030U, 0x03020101U, 0xa9ce6767U, 0x7d562b2bU,
    0x19e7fefeU, 0x62b5d7d7U, 0xe64dababU, 0x9aec7676U,
    0x458fcacaU, 0x9d1f8282U, 0x4089c9c9U, 0x87fa7d7dU,
    0x15effafaU, 0xebb25959U, 0xc98e4747U, 0x0bfbf0f0U,
    0xec41adadU, 0x67b3d4d4U, 0xfd5fa2a2U, 0xea45afafU,
    0xbf239c9cU, 0xf753a4a4U, 0x96e47272U, 0x5b9bc0c0U,
    0xc275b7b7U, 0x1ce1fdfdU, 0xae3d9393U, 0x6a4c2626U,
    0x5a6c3636U, 0x417e3f3fU, 0x02f5f7f7U, 0x4f83ccccU,
    0x5c683434U, 0xf451a5a5U, 0x34d1e5e5U, 0x08f9f1f1U,
    0x93e27171U, 0x73abd8d8U, 0x53623131U, 0x3f2a1515U,
    0x0c080404U, 0x5295c7c7U, 0x65462323U, 0x5e9dc3c3U,
    0x28301818U, 0xa1379696U, 0x0f0a0505U, 0xb52f9a9aU,
    0x090e0707U, 0x36241212U, 0x9b1b8080U, 0x3ddfe2e2U,
    0x26cdebebU, 0x694e2727U, 0xcd7fb2b2U, 0x9fea7575U,
    0x1b120909U, 0x9e1d8383U, 0x74582c2cU, 0x2e341a1aU,
    0x2d361b1bU, 0xb2dc6e6eU, 0xeeb45a5aU, 0xfb5ba0a0U,
    0xf6a45252U, 0x4d763b3bU, 0x61b7d6d6U, 0xce7db3b3U,
    0x7b522929U, 0x3edde3e3U, 0x715e2f2fU, 0x97138484U,
    0xf5a65353U, 0x68b9d1d1U, 0x00000000U, 0x2cc1ededU,
    0x60402020U, 0x1fe3fcfcU, 0xc879b1b1U, 0xedb65b5bU,
    0xbed46a6aU, 0x468dcbcbU, 0xd967bebeU, 0x4b723939U,
    0xde944a4aU, 0xd4984c4cU, 0xe8b05858U, 0x4a85cfcfU,
    0x6bbbd0d0U, 0x2ac5efefU, 0xe54faaaaU, 0x16edfbfbU,
    0xc5864343U, 0xd79a4d4dU, 0x55663333U, 0x94118585U,
    0xcf8a4545U, 0x10e9f9f9U, 0x06040202U, 0x81fe7f7fU,
    0xf0a05050U, 0x44783c3cU, 0xba259f9fU, 0xe34ba8a8U,
    0xf3a25151U, 0xfe5da3a3U, 0xc0804040U, 0x8a058f8fU,
    0xad3f9292U, 0xbc219d9dU, 0x48703838U, 0x04f1f5f5U,
    0xdf63bcbcU, 0xc177b6b6U, 0x75afdadaU, 0x63422121U,
    0x30201010U, 0x1ae5ffffU, 0x0efdf3f3U, 0x6dbfd2d2U,
    0x4c81cdcdU, 0x14180c0cU, 0x35261313U, 0x2fc3ececU,
    0xe1be5f5fU, 0xa2359797U, 0xcc884444U, 0x392e1717U,
    0x5793c4c4U, 0xf255a7a7U, 0x82fc7e7eU, 0x477a3d3dU,
    0xacc86464U, 0xe7ba5d5dU, 0x2b321919U, 0x95e67373U,
    0xa0c06060U, 0x98198181U, 0xd19e4f4fU, 0x7fa3dcdcU,
    0x66442222U, 0x7e542a2aU, 0xab3b9090U, 0x830b8888U,
    0xca8c4646U, 0x29c7eeeeU, 0xd36bb8b8U, 0x3c281414U,
    0x79a7dedeU, 0xe2bc5e5eU, 0x1d160b0bU, 0x76addbdbU,
    0x3bdbe0e0U, 0x56643232U, 0x4e743a3aU, 0x1e140a0aU,
    0xdb924949U, 0x0a0c0606U, 0x6c482424U, 0xe4b85c5cU,
    0x5d9fc2c2U, 0x6ebdd3d3U, 0xef43acacU, 0xa6c46262U,
    0xa8399191U, 0xa4319595U, 0x37d3e4e4U, 0x8bf27979U,
    0x32d5e7e7U, 0x438bc8c8U, 0x596e3737U, 0xb7da6d6dU,
    0x8c018d8dU, 0x64b1d5d5U, 0xd29c4e4eU, 0xe049a9a9U,
    0xb4d86c6cU, 0xfaac5656U, 0x07f3f4f4U, 0x25cfeaeaU,
    0xafca6565U, 0x8ef47a7aU, 0xe947aeaeU, 0x18100808U,
    0xd56fbabaU, 0x88f07878U, 0x6f4a2525U, 0x725c2e2eU,
    0x24381c1cU, 0xf157a6a6U, 0xc773b4b4U, 0x5197c6c6U,
    0x23cbe8e8U, 0x7ca1ddddU, 0x9ce87474U, 0x213e1f1fU,
    0xdd964b4bU, 0xdc61bdbdU, 0x860d8b8bU, 0x850f8a8aU,
    0x90e07070U, 0x427c3e3eU, 0xc471b5b5U, 0xaacc6666U,
    0xd8904848U, 0x05060303U, 0x01f7f6f6U, 0x121c0e0eU,
    0xa3c26161U, 0x5f6a3535U, 0xf9ae5757U, 0xd069b9b9U,
    0x91178686U, 0x5899c1c1U, 0x273a1d1dU, 0xb9279e9eU,
    0x38d9e1e1U, 0x13ebf8f8U, 0xb32b9898U, 0x33221111U,
    0xbbd26969U, 0x70a9d9d9U, 0x89078e8eU, 0xa7339494U,
    0xb62d9b9bU, 0x223c1e1eU, 0x92158787U, 0x20c9e9e9U,
    0x4987ceceU, 0xffaa5555U, 0x78502828U, 0x7aa5dfdfU,
    0x8f038c8cU, 0xf859a1a1U, 0x80098989U, 0x171a0d0dU,
    0xda65bfbfU, 0x31d7e6e6U, 0xc6844242U, 0xb8d06868U,
    0xc3824141U, 0xb0299999U, 0x775a2d2dU, 0x111e0f0fU,
    0xcb7bb0b0U, 0xfca85454U, 0xd66dbbbbU, 0x3a2c1616U,
};

u32 Te2[256] = {
    0x63a5c663U, 0x7c84f87cU, 0x7799ee77U, 0x7b8df67bU,
    0xf20dfff2U, 0x6bbdd66bU, 0x6fb1de6fU, 0xc55491c5U,
    0x30506030U, 0x01030201U, 0x67a9ce67U, 0x2b7d562bU,
    0xfe19e7feU, 0xd762b5d7U, 0xabe64dabU, 0x769aec76U,
    0xca458fcaU, 0x829d1f82U, 0xc94089c9U, 0x7d87fa7dU,
    0xfa15effaU, 0x59ebb259U, 0x47c98e47U, 0xf00bfbf0U,
    0xadec41adU, 0xd467b3d4U, 0xa2fd5fa2U, 0xafea45afU,
    0x9cbf239cU, 0xa4f753a4U, 0x7296e472U, 0xc05b9bc0U,
    0xb7c275b7U, 0xfd1ce1fdU, 0x93ae3d93U, 0x266a4c26U,
    0x365a6c36U, 0x3f417e3fU, 0xf702f5f7U, 0xcc4f83ccU,
    0x345c6834U, 0xa5f451a5U, 0xe534d1e5U, 0xf108f9f1U,
    0x7193e271U, 0xd873abd8U, 0x31536231U, 0x153f2a15U,
    0x040c0804U, 0xc75295c7U, 0x23654623U, 0xc35e9dc3U,
    0x18283018U, 0x96a13796U, 0x050f0a05U, 0x9ab52f9aU,
    0x07090e07U, 0x12362412U, 0x809b1b80U, 0xe23ddfe2U,
    0xeb26cdebU, 0x27694e27U, 0xb2cd7fb2U, 0x759fea75U,
    0x091b1209U, 0x839e1d83U, 0x2c74582cU, 0x1a2e341aU,
    0x1b2d361bU, 0x6eb2dc6eU, 0x5aeeb45aU, 0xa0fb5ba0U,
    0x52f6a452U, 0x3b4d763bU, 0xd661b7d6U, 0xb3ce7db3U,
    0x297b5229U, 0xe33edde3U, 0x2f715e2fU, 0x84971384U,
    0x53f5a653U, 0xd168b9d1U, 0x00000000U, 0xed2cc1edU,
    0x20604020U, 0xfc1fe3fcU, 0xb1c879b1U, 0x5bedb65bU,
    0x6abed46aU, 0xcb468dcbU, 0xbed967beU, 0x394b7239U,
    0x4ade944aU, 0x4cd4984cU, 0x58e8b058U, 0xcf4a85cfU,
    0xd06bbbd0U, 0xef2ac5efU, 0xaae54faaU, 0xfb16edfbU,
    0x43c58643U, 0x4dd79a4dU, 0x33556633U, 0x85941185U,
    0x45cf8a45U, 0xf910e9f9U, 0x02060402U, 0x7f81fe7fU,
    0x50f0a050U, 0x3c44783cU, 0x9fba259fU, 0xa8e34ba8U,
    0x51f3a251U, 0xa3fe5da3U, 0x40c08040U, 0x8f8a058fU,
    0x92ad3f92U, 0x9dbc219dU, 0x38487038U, 0xf504f1f5U,
    0xbcdf63bcU, 0xb6c177b6U, 0xda75afdaU, 0x21634221U,
    0x10302010U, 0xff1ae5ffU, 0xf30efdf3U, 0xd26dbfd2U,
    0xcd4c81cdU, 0x0c14180cU, 0x13352613U, 0xec2fc3ecU,
    0x5fe1be5fU, 0x97a23597U, 0x44cc8844U, 0x17392e17U,
    0xc45793c4U, 0xa7f255a7U, 0x7e82fc7eU, 0x3d477a3dU,
    0x64acc864U, 0x5de7ba5dU, 0x192b3219U, 0x7395e673U,
    0x60a0c060U, 0x81981981U, 0x4fd19e4fU, 0xdc7fa3dcU,
    0x22664422U, 0x2a7e542aU, 0x90ab3b90U, 0x88830b88U,
    0x46ca8c46U, 0xee29c7eeU, 0xb8d36bb8U, 0x143c2814U,
    0xde79a7deU, 0x5ee2bc5eU, 0x0b1d160bU, 0xdb76addbU,
    0xe03bdbe0U, 0x32566432U, 0x3a4e743aU, 0x0a1e140aU,
    0x49db9249U, 0x060a0c06U, 0x246c4824U, 0x5ce4b85cU,
    0xc25d9fc2U, 0xd36ebdd3U, 0xacef43acU, 0x62a6c462U,
    0x91a83991U, 0x95a43195U, 0xe437d3e4U, 0x798bf279U,
    0xe732d5e7U, 0xc8438bc8U, 0x37596e37U, 0x6db7da6dU,
    0x8d8c018dU, 0xd564b1d5U, 0x4ed29c4eU, 0xa9e049a9U,
    0x6cb4d86cU, 0x56faac56U, 0xf407f3f4U, 0xea25cfeaU,
    0x65afca65U, 0x7a8ef47aU, 0xaee947aeU, 0x08181008U,
    0xbad56fbaU, 0x7888f078U, 0x256f4a25U, 0x2e725c2eU,
    0x1c24381cU, 0xa6f157a6U, 0xb4c773b4U, 0xc65197c6U,
    0xe823cbe8U, 0xdd7ca1ddU, 0x749ce874U, 0x1f213e1fU,
    0x4bdd964bU, 0xbddc61bdU, 0x8b860d8bU, 0x8a850f8aU,
    0x7090e070U, 0x3e427c3eU, 0xb5c471b5U, 0x66aacc66U,
    0x48d89048U, 0x03050603U, 0xf601f7f6U, 0x0e121c0eU,
    0x61a3c261U, 0x355f6a35U, 0x57f9ae57U, 0xb9d069b9U,
    0x86911786U, 0xc15899c1U, 0x1d273a1dU, 0x9eb9279eU,
    0xe138d9e1U, 0xf813ebf8U, 0x98b32b98U, 0x11332211U,
    0x69bbd269U, 0xd970a9d9U, 0x8e89078eU, 0x94a73394U,
    0x9bb62d9bU, 0x1e223c1eU, 0x87921587U, 0xe920c9e9U,
    0xce4987ceU, 0x55ffaa55U, 0x28785028U, 0xdf7aa5dfU,
    0x8c8f038cU, 0xa1f859a1U, 0x89800989U, 0x0d171a0dU,
    0xbfda65bfU, 0xe631d7e6U, 0x42c68442U, 0x68b8d068U,
    0x41c38241U, 0x99b02999U, 0x2d775a2dU, 0x0f111e0fU,
    0xb0cb7bb0U, 0x54fca854U, 0xbbd66dbbU, 0x163a2c16U,
};

u32 Te3[256] = {
    0x6363a5c6U, 0x7c7c84f8U, 0x777799eeU, 0x7b7b8df6U,
    0xf2f20dffU, 0x6b6bbdd6U, 0x6f6fb1deU, 0xc5c55491U,
    0x30305060U, 0x01010302U, 0x6767a9ceU, 0x2b2b7d56U,
    0xfefe19e7U, 0xd7d762b5U, 0xababe64dU, 0x76769aecU,
    0xcaca458fU, 0x82829d1fU, 0xc9c94089U, 0x7d7d87faU,
    0xfafa15efU, 0x5959ebb2U, 0x4747c98eU, 0xf0f00bfbU,
    0xadadec41U, 0xd4d467b3U, 0xa2a2fd5fU, 0xafafea45U,
    0x9c9cbf23U, 0xa4a4f753U, 0x727296e4U, 0xc0c05b9bU,
    0xb7b7c275U, 0xfdfd1ce1U, 0x9393ae3dU, 0x26266a4cU,
    0x36365a6cU, 0x3f3f417eU, 0xf7f702f5U, 0xcccc4f83U,
    0x34345c68U, 0xa5a5f451U, 0xe5e534d1U, 0xf1f108f9U,
    0x717193e2U, 0xd8d873abU, 0x31315362U, 0x15153f2aU,
    0x04040c08U, 0xc7c75295U, 0x23236546U, 0xc3c35e9dU,
    0x18182830U, 0x9696a137U, 0x05050f0aU, 0x9a9ab52fU,
    0x0707090eU, 0x12123624U, 0x80809b1bU, 0xe2e23ddfU,
    0xebeb26cdU, 0x2727694eU, 0xb2b2cd7fU, 0x75759feaU,
    0x09091b12U, 0x83839e1dU, 0x2c2c7458U, 0x1a1a2e34U,
    0x1b1b2d36U, 0x6e6eb2dcU, 0x5a5aeeb4U, 0xa0a0fb5bU,
    0x5252f6a4U, 0x3b3b4d76U, 0xd6d661b7U, 0xb3b3ce7dU,
    0x29297b52U, 0xe3e33eddU, 0x2f2f715eU, 0x84849713U,
    0x5353f5a6U, 0xd1d168b9U, 0x00000000U, 0xeded2cc1U,
    0x20206040U, 0xfcfc1fe3U, 0xb1b1c879U, 0x5b5bedb6U,
    0x6a6abed4U, 0xcbcb468dU, 0xbebed967U, 0x39394b72U,
    0x4a4ade94U, 0x4c4cd498U, 0x5858e8b0U, 0xcfcf4a85U,
    0xd0d06bbbU, 0xefef2ac5U, 0xaaaae54fU, 0xfbfb16edU,
    0x4343c586U, 0x4d4dd79aU, 0x33335566U, 0x85859411U,
    0x4545cf8aU, 0xf9f910e9U, 0x02020604U, 0x7f7f81feU,
    0x5050f0a0U, 0x3c3c4478U, 0x9f9fba25U, 0xa8a8e34bU,
    0x5151f3a2U, 0xa3a3fe5dU, 0x4040c080U, 0x8f8f8a05U,
    0x9292ad3fU, 0x9d9dbc21U, 0x38384870U, 0xf5f504f1U,
    0xbcbcdf63U, 0xb6b6c177U, 0xdada75afU, 0x21216342U,
    0x10103020U, 0xffff1ae5U, 0xf3f30efdU, 0xd2d26dbfU,
    0xcdcd4c81U, 0x0c0c1418U, 0x13133526U, 0xecec2fc3U,
    0x5f5fe1beU, 0x9797a235U, 0x4444cc88U, 0x1717392eU,
    0xc4c45793U, 0xa7a7f255U, 0x7e7e82fcU, 0x3d3d477aU,
    0x6464acc8U, 0x5d5de7baU, 0x19192b32U, 0x737395e6U,
    0x6060a0c0U, 0x81819819U, 0x4f4fd19eU, 0xdcdc7fa3U,
    0x22226644U, 0x2a2a7e54U, 0x9090ab3bU, 0x8888830bU,
    0x4646ca8cU, 0xeeee29c7U, 0xb8b8d36bU, 0x14143c28U,
    0xdede79a7U, 0x5e5ee2bcU, 0x0b0b1d16U, 0xdbdb76adU,
    0xe0e03bdbU, 0x32325664U, 0x3a3a4e74U, 0x0a0a1e14U,
    0x4949db92U, 0x06060a0cU, 0x24246c48U, 0x5c5ce4b8U,
    0xc2c25d9fU, 0xd3d36ebdU, 0xacacef43U, 0x6262a6c4U,
    0x9191a839U, 0x9595a431U, 0xe4e437d3U, 0x79798bf2U,
    0xe7e732d5U, 0xc8c8438bU, 0x3737596eU, 0x6d6db7daU,
    0x8d8d8c01U, 0xd5d564b1U, 0x4e4ed29cU, 0xa9a9e049U,
    0x6c6cb4d8U, 0x5656faacU, 0xf4f407f3U, 0xeaea25cfU,
    0x6565afcaU, 0x7a7a8ef4U, 0xaeaee947U, 0x08081810U,
    0xbabad56fU, 0x787888f0U, 0x25256f4aU, 0x2e2e725cU,
    0x1c1c2438U, 0xa6a6f157U, 0xb4b4c773U, 0xc6c65197U,
    0xe8e823cbU, 0xdddd7ca1U, 0x74749ce8U, 0x1f1f213eU,
    0x4b4bdd96U, 0xbdbddc61U, 0x8b8b860dU, 0x8a8a850fU,
    0x707090e0U, 0x3e3e427cU, 0xb5b5c471U, 0x6666aaccU,
    0x4848d890U, 0x03030506U, 0xf6f601f7U, 0x0e0e121cU,
    0x6161a3c2U, 0x35355f6aU, 0x5757f9aeU, 0xb9b9d069U,
    0x86869117U, 0xc1c15899U, 0x1d1d273aU, 0x9e9eb927U,
    0xe1e138d9U, 0xf8f813ebU, 0x9898b32bU, 0x11113322U,
    0x6969bbd2U, 0xd9d970a9U, 0x8e8e8907U, 0x9494a733U,
    0x9b9bb62dU, 0x1e1e223cU, 0x87879215U, 0xe9e920c9U,
    0xcece4987U, 0x5555ffaaU, 0x28287850U, 0xdfdf7aa5U,
    0x8c8c8f03U, 0xa1a1f859U, 0x89898009U, 0x0d0d171aU,
    0xbfbfda65U, 0xe6e631d7U, 0x4242c684U, 0x6868b8d0U,
    0x4141c382U, 0x9999b029U, 0x2d2d775aU, 0x0f0f111eU,
    0xb0b0cb7bU, 0x5454fca8U, 0xbbbbd66dU, 0x16163a2cU,
};

__constant__ uint32_t Td0[256] = {
  0x50a7f451U,0x5365417eU,0xc3a4171aU,0x965e273aU,
  0xcb6bab3bU,0xf1459d1fU,0xab58faacU,0x9303e34bU,
  0x55fa3020U,0xf66d76adU,0x9176cc88U,0x254c02f5U,
  0xfcd7e54fU,0xd7cb2ac5U,0x80443526U,0x8fa362b5U,
  0x495ab1deU,0x671bba25U,0x980eea45U,0xe1c0fe5dU,
  0x02752fc3U,0x12f04c81U,0xa397468dU,0xc6f9d36bU,
  0xe75f8f03U,0x959c9215U,0xeb7a6dbfU,0xda595295U,
  0x2d83bed4U,0xd3217458U,0x2969e049U,0x44c8c98eU,
  0x6a89c275U,0x78798ef4U,0x6b3e5899U,0xdd71b927U,
  0xb64fe1beU,0x17ad88f0U,0x66ac20c9U,0xb43ace7dU,
  0x184adf63U,0x82311ae5U,0x60335197U,0x457f5362U,
  0xe07764b1U,0x84ae6bbbU,0x1ca081feU,0x942b08f9U,
  0x58684870U,0x19fd458fU,0x876cde94U,0xb7f87b52U,
  0x23d373abU,0xe2024b72U,0x578f1fe3U,0x2aab5566U,
  0x0728ebb2U,0x03c2b52fU,0x9a7bc586U,0xa50837d3U,
  0xf2872830U,0xb2a5bf23U,0xba6a0302U,0x5c8216edU,
  0x2b1ccf8aU,0x92b479a7U,0xf0f207f3U,0xa1e2694eU,
  0xcdf4da65U,0xd5be0506U,0x1f6234d1U,0x8afea6c4U,
  0x9d532e34U,0xa055f3a2U,0x32e18a05U,0x75ebf6a4U,
  0x39ec830bU,0xaaef6040U,0x069f715eU,0x51106ebdU,
  0xf98a213eU,0x3d06dd96U,0xae053eddU,0x46bde64dU,
  0xb58d5491U,0x055dc471U,0x6fd40604U,0xff155060U,
  0x24fb9819U,0x97e9bdd6U,0xcc434089U,0x779ed967U,
  0xbd42e8b0U,0x888b8907U,0x385b19e7U,0xdbeec879U,
  0x470a7ca1U,0xe90f427cU,0xc91e84f8U,0x00000000U,
  0x83868009U,0x48ed2b32U,0xac70111eU,0x4e725a6cU,
  0xfbff0efdU,0x5638850fU,0x1ed5ae3dU,0x27392d36U,
  0x64d90f0aU,0x21a65c68U,0xd1545b9bU,0x3a2e3624U,
  0xb1670a0cU,0x0fe75793U,0xd296eeb4U,0x9e919b1bU,
  0x4fc5c080U,0xa220dc61U,0x694b775aU,0x161a121cU,
  0x0aba93e2U,0xe52aa0c0U,0x43e0223cU,0x1d171b12U,
  0x0b0d090eU,0xadc78bf2U,0xb9a8b62dU,0xc8a91e14U,
  0x8519f157U,0x4c0775afU,0xbbdd99eeU,0xfd607fa3U,
  0x9f2601f7U,0xbcf5725cU,0xc53b6644U,0x347efb5bU,
  0x7629438bU,0xdcc623cbU,0x68fcedb6U,0x63f1e4b8U,
  0xcadc31d7U,0x10856342U,0x40229713U,0x2011c684U,
  0x7d244a85U,0xf83dbbd2U,0x1132f9aeU,0x6da129c7U,
  0x4b2f9e1dU,0xf330b2dcU,0xec52860dU,0xd0e3c177U,
  0x6c16b32bU,0x99b970a9U,0xfa489411U,0x2264e947U,
  0xc48cfca8U,0x1a3ff0a0U,0xd82c7d56U,0xef903322U,
  0xc74e4987U,0xc1d138d9U,0xfea2ca8cU,0x360bd498U,
  0xcf81f5a6U,0x28de7aa5U,0x268eb7daU,0xa4bfad3fU,
  0xe49d3a2cU,0x0d927850U,0x9bcc5f6aU,0x62467e54U,
  0xc2138df6U,0xe8b8d890U,0x5ef7392eU,0xf5afc382U,
  0xbe805d9fU,0x7c93d069U,0xa92dd56fU,0xb31225cfU,
  0x3b99acc8U,0xa77d1810U,0x6e639ce8U,0x7bbb3bdbU,
  0x097826cdU,0xf418596eU,0x01b79aecU,0xa89a4f83U,
  0x656e95e6U,0x7ee6ffaaU,0x08cfbc21U,0xe6e815efU,
  0xd99be7baU,0xce366f4aU,0xd4099feaU,0xd67cb029U,
  0xafb2a431U,0x31233f2aU,0x3094a5c6U,0xc066a235U,
  0x37bc4e74U,0xa6ca82fcU,0xb0d090e0U,0x15d8a733U,
  0x4a9804f1U,0xf7daec41U,0x0e50cd7fU,0x2ff69117U,
  0x8dd64d76U,0x4db0ef43U,0x544daaccU,0xdf0496e4U,
  0xe3b5d19eU,0x1b886a4cU,0xb81f2cc1U,0x7f516546U,
  0x04ea5e9dU,0x5d358c01U,0x737487faU,0x2e410bfbU,
  0x5a1d67b3U,0x52d2db92U,0x335610e9U,0x1347d66dU,
  0x8c61d79aU,0x7a0ca137U,0x8e14f859U,0x893c13ebU,
  0xee27a9ceU,0x35c961b7U,0xede51ce1U,0x3cb1477aU,
  0x59dfd29cU,0x3f73f255U,0x79ce1418U,0xbf37c773U,
  0xeacdf753U,0x5baafd5fU,0x146f3ddfU,0x86db4478U,
  0x81f3afcaU,0x3ec468b9U,0x2c342438U,0x5f40a3c2U,
  0x72c31d16U,0x0c25e2bcU,0x8b493c28U,0x41950dffU,
  0x7101a839U,0xdeb30c08U,0x9ce4b4d8U,0x90c15664U,
  0x6184cb7bU,0x70b632d5U,0x745c6c48U,0x4257b8d0U,
  };

__constant__ uint32_t Td1[256] = {
  0xa7f45150U,0x65417e53U,0xa4171ac3U,0x5e273a96U,
  0x6bab3bcbU,0x459d1ff1U,0x58faacabU,0x03e34b93U,
  0xfa302055U,0x6d76adf6U,0x76cc8891U,0x4c02f525U,
  0xd7e54ffcU,0xcb2ac5d7U,0x44352680U,0xa362b58fU,
  0x5ab1de49U,0x1bba2567U,0x0eea4598U,0xc0fe5de1U,
  0x752fc302U,0xf04c8112U,0x97468da3U,0xf9d36bc6U,
  0x5f8f03e7U,0x9c921595U,0x7a6dbfebU,0x595295daU,
  0x83bed42dU,0x217458d3U,0x69e04929U,0xc8c98e44U,
  0x89c2756aU,0x798ef478U,0x3e58996bU,0x71b927ddU,
  0x4fe1beb6U,0xad88f017U,0xac20c966U,0x3ace7db4U,
  0x4adf6318U,0x311ae582U,0x33519760U,0x7f536245U,
  0x7764b1e0U,0xae6bbb84U,0xa081fe1cU,0x2b08f994U,
  0x68487058U,0xfd458f19U,0x6cde9487U,0xf87b52b7U,
  0xd373ab23U,0x024b72e2U,0x8f1fe357U,0xab55662aU,
  0x28ebb207U,0xc2b52f03U,0x7bc5869aU,0x0837d3a5U,
  0x872830f2U,0xa5bf23b2U,0x6a0302baU,0x8216ed5cU,
  0x1ccf8a2bU,0xb479a792U,0xf207f3f0U,0xe2694ea1U,
  0xf4da65cdU,0xbe0506d5U,0x6234d11fU,0xfea6c48aU,
  0x532e349dU,0x55f3a2a0U,0xe18a0532U,0xebf6a475U,
  0xec830b39U,0xef6040aaU,0x9f715e06U,0x106ebd51U,
  0x8a213ef9U,0x06dd963dU,0x053eddaeU,0xbde64d46U,
  0x8d5491b5U,0x5dc47105U,0xd406046fU,0x155060ffU,
  0xfb981924U,0xe9bdd697U,0x434089ccU,0x9ed96777U,
  0x42e8b0bdU,0x8b890788U,0x5b19e738U,0xeec879dbU,
  0x0a7ca147U,0x0f427ce9U,0x1e84f8c9U,0x00000000U,
  0x86800983U,0xed2b3248U,0x70111eacU,0x725a6c4eU,
  0xff0efdfbU,0x38850f56U,0xd5ae3d1eU,0x392d3627U,
  0xd90f0a64U,0xa65c6821U,0x545b9bd1U,0x2e36243aU,
  0x670a0cb1U,0xe757930fU,0x96eeb4d2U,0x919b1b9eU,
  0xc5c0804fU,0x20dc61a2U,0x4b775a69U,0x1a121c16U,
  0xba93e20aU,0x2aa0c0e5U,0xe0223c43U,0x171b121dU,
  0x0d090e0bU,0xc78bf2adU,0xa8b62db9U,0xa91e14c8U,
  0x19f15785U,0x0775af4cU,0xdd99eebbU,0x607fa3fdU,
  0x2601f79fU,0xf5725cbcU,0x3b6644c5U,0x7efb5b34U,
  0x29438b76U,0xc623cbdcU,0xfcedb668U,0xf1e4b863U,
  0xdc31d7caU,0x85634210U,0x22971340U,0x11c68420U,
  0x244a857dU,0x3dbbd2f8U,0x32f9ae11U,0xa129c76dU,
  0x2f9e1d4bU,0x30b2dcf3U,0x52860decU,0xe3c177d0U,
  0x16b32b6cU,0xb970a999U,0x489411faU,0x64e94722U,
  0x8cfca8c4U,0x3ff0a01aU,0x2c7d56d8U,0x903322efU,
  0x4e4987c7U,0xd138d9c1U,0xa2ca8cfeU,0x0bd49836U,
  0x81f5a6cfU,0xde7aa528U,0x8eb7da26U,0xbfad3fa4U,
  0x9d3a2ce4U,0x9278500dU,0xcc5f6a9bU,0x467e5462U,
  0x138df6c2U,0xb8d890e8U,0xf7392e5eU,0xafc382f5U,
  0x805d9fbeU,0x93d0697cU,0x2dd56fa9U,0x1225cfb3U,
  0x99acc83bU,0x7d1810a7U,0x639ce86eU,0xbb3bdb7bU,
  0x7826cd09U,0x18596ef4U,0xb79aec01U,0x9a4f83a8U,
  0x6e95e665U,0xe6ffaa7eU,0xcfbc2108U,0xe815efe6U,
  0x9be7bad9U,0x366f4aceU,0x099fead4U,0x7cb029d6U,
  0xb2a431afU,0x233f2a31U,0x94a5c630U,0x66a235c0U,
  0xbc4e7437U,0xca82fca6U,0xd090e0b0U,0xd8a73315U,
  0x9804f14aU,0xdaec41f7U,0x50cd7f0eU,0xf691172fU,
  0xd64d768dU,0xb0ef434dU,0x4daacc54U,0x0496e4dfU,
  0xb5d19ee3U,0x886a4c1bU,0x1f2cc1b8U,0x5165467fU,
  0xea5e9d04U,0x358c015dU,0x7487fa73U,0x410bfb2eU,
  0x1d67b35aU,0xd2db9252U,0x5610e933U,0x47d66d13U,
  0x61d79a8cU,0x0ca1377aU,0x14f8598eU,0x3c13eb89U,
  0x27a9ceeeU,0xc961b735U,0xe51ce1edU,0xb1477a3cU,
  0xdfd29c59U,0x73f2553fU,0xce141879U,0x37c773bfU,
  0xcdf753eaU,0xaafd5f5bU,0x6f3ddf14U,0xdb447886U,
  0xf3afca81U,0xc468b93eU,0x3424382cU,0x40a3c25fU,
  0xc31d1672U,0x25e2bc0cU,0x493c288bU,0x950dff41U,
  0x01a83971U,0xb30c08deU,0xe4b4d89cU,0xc1566490U,
  0x84cb7b61U,0xb632d570U,0x5c6c4874U,0x57b8d042U,
  };

__constant__ uint32_t Td2[256] = {
  0xf45150a7U,0x417e5365U,0x171ac3a4U,0x273a965eU,
  0xab3bcb6bU,0x9d1ff145U,0xfaacab58U,0xe34b9303U,
  0x302055faU,0x76adf66dU,0xcc889176U,0x02f5254cU,
  0xe54ffcd7U,0x2ac5d7cbU,0x35268044U,0x62b58fa3U,
  0xb1de495aU,0xba25671bU,0xea45980eU,0xfe5de1c0U,
  0x2fc30275U,0x4c8112f0U,0x468da397U,0xd36bc6f9U,
  0x8f03e75fU,0x9215959cU,0x6dbfeb7aU,0x5295da59U,
  0xbed42d83U,0x7458d321U,0xe0492969U,0xc98e44c8U,
  0xc2756a89U,0x8ef47879U,0x58996b3eU,0xb927dd71U,
  0xe1beb64fU,0x88f017adU,0x20c966acU,0xce7db43aU,
  0xdf63184aU,0x1ae58231U,0x51976033U,0x5362457fU,
  0x64b1e077U,0x6bbb84aeU,0x81fe1ca0U,0x08f9942bU,
  0x48705868U,0x458f19fdU,0xde94876cU,0x7b52b7f8U,
  0x73ab23d3U,0x4b72e202U,0x1fe3578fU,0x55662aabU,
  0xebb20728U,0xb52f03c2U,0xc5869a7bU,0x37d3a508U,
  0x2830f287U,0xbf23b2a5U,0x0302ba6aU,0x16ed5c82U,
  0xcf8a2b1cU,0x79a792b4U,0x07f3f0f2U,0x694ea1e2U,
  0xda65cdf4U,0x0506d5beU,0x34d11f62U,0xa6c48afeU,
  0x2e349d53U,0xf3a2a055U,0x8a0532e1U,0xf6a475ebU,
  0x830b39ecU,0x6040aaefU,0x715e069fU,0x6ebd5110U,
  0x213ef98aU,0xdd963d06U,0x3eddae05U,0xe64d46bdU,
  0x5491b58dU,0xc471055dU,0x06046fd4U,0x5060ff15U,
  0x981924fbU,0xbdd697e9U,0x4089cc43U,0xd967779eU,
  0xe8b0bd42U,0x8907888bU,0x19e7385bU,0xc879dbeeU,
  0x7ca1470aU,0x427ce90fU,0x84f8c91eU,0x00000000U,
  0x80098386U,0x2b3248edU,0x111eac70U,0x5a6c4e72U,
  0x0efdfbffU,0x850f5638U,0xae3d1ed5U,0x2d362739U,
  0x0f0a64d9U,0x5c6821a6U,0x5b9bd154U,0x36243a2eU,
  0x0a0cb167U,0x57930fe7U,0xeeb4d296U,0x9b1b9e91U,
  0xc0804fc5U,0xdc61a220U,0x775a694bU,0x121c161aU,
  0x93e20abaU,0xa0c0e52aU,0x223c43e0U,0x1b121d17U,
  0x090e0b0dU,0x8bf2adc7U,0xb62db9a8U,0x1e14c8a9U,
  0xf1578519U,0x75af4c07U,0x99eebbddU,0x7fa3fd60U,
  0x01f79f26U,0x725cbcf5U,0x6644c53bU,0xfb5b347eU,
  0x438b7629U,0x23cbdcc6U,0xedb668fcU,0xe4b863f1U,
  0x31d7cadcU,0x63421085U,0x97134022U,0xc6842011U,
  0x4a857d24U,0xbbd2f83dU,0xf9ae1132U,0x29c76da1U,
  0x9e1d4b2fU,0xb2dcf330U,0x860dec52U,0xc177d0e3U,
  0xb32b6c16U,0x70a999b9U,0x9411fa48U,0xe9472264U,
  0xfca8c48cU,0xf0a01a3fU,0x7d56d82cU,0x3322ef90U,
  0x4987c74eU,0x38d9c1d1U,0xca8cfea2U,0xd498360bU,
  0xf5a6cf81U,0x7aa528deU,0xb7da268eU,0xad3fa4bfU,
  0x3a2ce49dU,0x78500d92U,0x5f6a9bccU,0x7e546246U,
  0x8df6c213U,0xd890e8b8U,0x392e5ef7U,0xc382f5afU,
  0x5d9fbe80U,0xd0697c93U,0xd56fa92dU,0x25cfb312U,
  0xacc83b99U,0x1810a77dU,0x9ce86e63U,0x3bdb7bbbU,
  0x26cd0978U,0x596ef418U,0x9aec01b7U,0x4f83a89aU,
  0x95e6656eU,0xffaa7ee6U,0xbc2108cfU,0x15efe6e8U,
  0xe7bad99bU,0x6f4ace36U,0x9fead409U,0xb029d67cU,
  0xa431afb2U,0x3f2a3123U,0xa5c63094U,0xa235c066U,
  0x4e7437bcU,0x82fca6caU,0x90e0b0d0U,0xa73315d8U,
  0x04f14a98U,0xec41f7daU,0xcd7f0e50U,0x91172ff6U,
  0x4d768dd6U,0xef434db0U,0xaacc544dU,0x96e4df04U,
  0xd19ee3b5U,0x6a4c1b88U,0x2cc1b81fU,0x65467f51U,
  0x5e9d04eaU,0x8c015d35U,0x87fa7374U,0x0bfb2e41U,
  0x67b35a1dU,0xdb9252d2U,0x10e93356U,0xd66d1347U,
  0xd79a8c61U,0xa1377a0cU,0xf8598e14U,0x13eb893cU,
  0xa9ceee27U,0x61b735c9U,0x1ce1ede5U,0x477a3cb1U,
  0xd29c59dfU,0xf2553f73U,0x141879ceU,0xc773bf37U,
  0xf753eacdU,0xfd5f5baaU,0x3ddf146fU,0x447886dbU,
  0xafca81f3U,0x68b93ec4U,0x24382c34U,0xa3c25f40U,
  0x1d1672c3U,0xe2bc0c25U,0x3c288b49U,0x0dff4195U,
  0xa8397101U,0x0c08deb3U,0xb4d89ce4U,0x566490c1U,
  0xcb7b6184U,0x32d570b6U,0x6c48745cU,0xb8d04257U,
  };

__constant__ uint32_t Td3[256] = {
  0x5150a7f4U,0x7e536541U,0x1ac3a417U,0x3a965e27U,
  0x3bcb6babU,0x1ff1459dU,0xacab58faU,0x4b9303e3U,
  0x2055fa30U,0xadf66d76U,0x889176ccU,0xf5254c02U,
  0x4ffcd7e5U,0xc5d7cb2aU,0x26804435U,0xb58fa362U,
  0xde495ab1U,0x25671bbaU,0x45980eeaU,0x5de1c0feU,
  0xc302752fU,0x8112f04cU,0x8da39746U,0x6bc6f9d3U,
  0x03e75f8fU,0x15959c92U,0xbfeb7a6dU,0x95da5952U,
  0xd42d83beU,0x58d32174U,0x492969e0U,0x8e44c8c9U,
  0x756a89c2U,0xf478798eU,0x996b3e58U,0x27dd71b9U,
  0xbeb64fe1U,0xf017ad88U,0xc966ac20U,0x7db43aceU,
  0x63184adfU,0xe582311aU,0x97603351U,0x62457f53U,
  0xb1e07764U,0xbb84ae6bU,0xfe1ca081U,0xf9942b08U,
  0x70586848U,0x8f19fd45U,0x94876cdeU,0x52b7f87bU,
  0xab23d373U,0x72e2024bU,0xe3578f1fU,0x662aab55U,
  0xb20728ebU,0x2f03c2b5U,0x869a7bc5U,0xd3a50837U,
  0x30f28728U,0x23b2a5bfU,0x02ba6a03U,0xed5c8216U,
  0x8a2b1ccfU,0xa792b479U,0xf3f0f207U,0x4ea1e269U,
  0x65cdf4daU,0x06d5be05U,0xd11f6234U,0xc48afea6U,
  0x349d532eU,0xa2a055f3U,0x0532e18aU,0xa475ebf6U,
  0x0b39ec83U,0x40aaef60U,0x5e069f71U,0xbd51106eU,
  0x3ef98a21U,0x963d06ddU,0xddae053eU,0x4d46bde6U,
  0x91b58d54U,0x71055dc4U,0x046fd406U,0x60ff1550U,
  0x1924fb98U,0xd697e9bdU,0x89cc4340U,0x67779ed9U,
  0xb0bd42e8U,0x07888b89U,0xe7385b19U,0x79dbeec8U,
  0xa1470a7cU,0x7ce90f42U,0xf8c91e84U,0x00000000U,
  0x09838680U,0x3248ed2bU,0x1eac7011U,0x6c4e725aU,
  0xfdfbff0eU,0x0f563885U,0x3d1ed5aeU,0x3627392dU,
  0x0a64d90fU,0x6821a65cU,0x9bd1545bU,0x243a2e36U,
  0x0cb1670aU,0x930fe757U,0xb4d296eeU,0x1b9e919bU,
  0x804fc5c0U,0x61a220dcU,0x5a694b77U,0x1c161a12U,
  0xe20aba93U,0xc0e52aa0U,0x3c43e022U,0x121d171bU,
  0x0e0b0d09U,0xf2adc78bU,0x2db9a8b6U,0x14c8a91eU,
  0x578519f1U,0xaf4c0775U,0xeebbdd99U,0xa3fd607fU,
  0xf79f2601U,0x5cbcf572U,0x44c53b66U,0x5b347efbU,
  0x8b762943U,0xcbdcc623U,0xb668fcedU,0xb863f1e4U,
  0xd7cadc31U,0x42108563U,0x13402297U,0x842011c6U,
  0x857d244aU,0xd2f83dbbU,0xae1132f9U,0xc76da129U,
  0x1d4b2f9eU,0xdcf330b2U,0x0dec5286U,0x77d0e3c1U,
  0x2b6c16b3U,0xa999b970U,0x11fa4894U,0x472264e9U,
  0xa8c48cfcU,0xa01a3ff0U,0x56d82c7dU,0x22ef9033U,
  0x87c74e49U,0xd9c1d138U,0x8cfea2caU,0x98360bd4U,
  0xa6cf81f5U,0xa528de7aU,0xda268eb7U,0x3fa4bfadU,
  0x2ce49d3aU,0x500d9278U,0x6a9bcc5fU,0x5462467eU,
  0xf6c2138dU,0x90e8b8d8U,0x2e5ef739U,0x82f5afc3U,
  0x9fbe805dU,0x697c93d0U,0x6fa92dd5U,0xcfb31225U,
  0xc83b99acU,0x10a77d18U,0xe86e639cU,0xdb7bbb3bU,
  0xcd097826U,0x6ef41859U,0xec01b79aU,0x83a89a4fU,
  0xe6656e95U,0xaa7ee6ffU,0x2108cfbcU,0xefe6e815U,
  0xbad99be7U,0x4ace366fU,0xead4099fU,0x29d67cb0U,
  0x31afb2a4U,0x2a31233fU,0xc63094a5U,0x35c066a2U,
  0x7437bc4eU,0xfca6ca82U,0xe0b0d090U,0x3315d8a7U,
  0xf14a9804U,0x41f7daecU,0x7f0e50cdU,0x172ff691U,
  0x768dd64dU,0x434db0efU,0xcc544daaU,0xe4df0496U,
  0x9ee3b5d1U,0x4c1b886aU,0xc1b81f2cU,0x467f5165U,
  0x9d04ea5eU,0x015d358cU,0xfa737487U,0xfb2e410bU,
  0xb35a1d67U,0x9252d2dbU,0xe9335610U,0x6d1347d6U,
  0x9a8c61d7U,0x377a0ca1U,0x598e14f8U,0xeb893c13U,
  0xceee27a9U,0xb735c961U,0xe1ede51cU,0x7a3cb147U,
  0x9c59dfd2U,0x553f73f2U,0x1879ce14U,0x73bf37c7U,
  0x53eacdf7U,0x5f5baafdU,0xdf146f3dU,0x7886db44U,
  0xca81f3afU,0xb93ec468U,0x382c3424U,0xc25f40a3U,
  0x1672c31dU,0xbc0c25e2U,0x288b493cU,0xff41950dU,
  0x397101a8U,0x08deb30cU,0xd89ce4b4U,0x6490c156U,
  0x7b6184cbU,0xd570b632U,0x48745c6cU,0xd04257b8U,
  };

__constant__ uint8_t Td4[256] = {
    0x52U, 0x09U, 0x6aU, 0xd5U, 0x30U, 0x36U, 0xa5U, 0x38U,
    0xbfU, 0x40U, 0xa3U, 0x9eU, 0x81U, 0xf3U, 0xd7U, 0xfbU,
    0x7cU, 0xe3U, 0x39U, 0x82U, 0x9bU, 0x2fU, 0xffU, 0x87U,
    0x34U, 0x8eU, 0x43U, 0x44U, 0xc4U, 0xdeU, 0xe9U, 0xcbU,
    0x54U, 0x7bU, 0x94U, 0x32U, 0xa6U, 0xc2U, 0x23U, 0x3dU,
    0xeeU, 0x4cU, 0x95U, 0x0bU, 0x42U, 0xfaU, 0xc3U, 0x4eU,
    0x08U, 0x2eU, 0xa1U, 0x66U, 0x28U, 0xd9U, 0x24U, 0xb2U,
    0x76U, 0x5bU, 0xa2U, 0x49U, 0x6dU, 0x8bU, 0xd1U, 0x25U,
    0x72U, 0xf8U, 0xf6U, 0x64U, 0x86U, 0x68U, 0x98U, 0x16U,
    0xd4U, 0xa4U, 0x5cU, 0xccU, 0x5dU, 0x65U, 0xb6U, 0x92U,
    0x6cU, 0x70U, 0x48U, 0x50U, 0xfdU, 0xedU, 0xb9U, 0xdaU,
    0x5eU, 0x15U, 0x46U, 0x57U, 0xa7U, 0x8dU, 0x9dU, 0x84U,
    0x90U, 0xd8U, 0xabU, 0x00U, 0x8cU, 0xbcU, 0xd3U, 0x0aU,
    0xf7U, 0xe4U, 0x58U, 0x05U, 0xb8U, 0xb3U, 0x45U, 0x06U,
    0xd0U, 0x2cU, 0x1eU, 0x8fU, 0xcaU, 0x3fU, 0x0fU, 0x02U,
    0xc1U, 0xafU, 0xbdU, 0x03U, 0x01U, 0x13U, 0x8aU, 0x6bU,
    0x3aU, 0x91U, 0x11U, 0x41U, 0x4fU, 0x67U, 0xdcU, 0xeaU,
    0x97U, 0xf2U, 0xcfU, 0xceU, 0xf0U, 0xb4U, 0xe6U, 0x73U,
    0x96U, 0xacU, 0x74U, 0x22U, 0xe7U, 0xadU, 0x35U, 0x85U,
    0xe2U, 0xf9U, 0x37U, 0xe8U, 0x1cU, 0x75U, 0xdfU, 0x6eU,
    0x47U, 0xf1U, 0x1aU, 0x71U, 0x1dU, 0x29U, 0xc5U, 0x89U,
    0x6fU, 0xb7U, 0x62U, 0x0eU, 0xaaU, 0x18U, 0xbeU, 0x1bU,
    0xfcU, 0x56U, 0x3eU, 0x4bU, 0xc6U, 0xd2U, 0x79U, 0x20U,
    0x9aU, 0xdbU, 0xc0U, 0xfeU, 0x78U, 0xcdU, 0x5aU, 0xf4U,
    0x1fU, 0xddU, 0xa8U, 0x33U, 0x88U, 0x07U, 0xc7U, 0x31U,
    0xb1U, 0x12U, 0x10U, 0x59U, 0x27U, 0x80U, 0xecU, 0x5fU,
    0x60U, 0x51U, 0x7fU, 0xa9U, 0x19U, 0xb5U, 0x4aU, 0x0dU,
    0x2dU, 0xe5U, 0x7aU, 0x9fU, 0x93U, 0xc9U, 0x9cU, 0xefU,
    0xa0U, 0xe0U, 0x3bU, 0x4dU, 0xaeU, 0x2aU, 0xf5U, 0xb0U,
    0xc8U, 0xebU, 0xbbU, 0x3cU, 0x83U, 0x53U, 0x99U, 0x61U,
    0x17U, 0x2bU, 0x04U, 0x7eU, 0xbaU, 0x77U, 0xd6U, 0x26U,
    0xe1U, 0x69U, 0x14U, 0x63U, 0x55U, 0x21U, 0x0cU, 0x7dU,
};

__device__ u32 Byte2Word(BYTE k1, BYTE k2, BYTE k3, BYTE k4){
    u32 result(0x00000000);  
    u32 temp;  
    temp = k1;  // K1  
    temp <<= 24;  
    result |= temp;  
    temp = k2;  // K2  
    temp <<= 16;  
    result |= temp;  
    temp = k3;  // K3  
    temp <<= 8;  
    result |= temp;  
    temp = k4;  // K4  
    result |= temp;  
    return result;  
}



// 使用aes加密算法，对一块（128位）数据进行加密 (在此处使用T表操作）
__constant__  u32 cuda_Td0[256];
__constant__  u32 cuda_Td1[256];
__constant__  u32 cuda_Td2[256];
__constant__  u32 cuda_Td3[256];
__constant__  u32 cuda_Te0[256];
__constant__  u32 cuda_Te1[256];
__constant__  u32 cuda_Te2[256];
__constant__  u32 cuda_Te3[256];
__global__ void aes256_encrypt_ecb(uint8_t *buf_d, unsigned long numbytes, uint8_t *key){
  uint8_t i;
  uint8_t buf_t[AES_BLOCK_SIZE]; // thread buffer
  __shared__ u32 keywords[60];
  u32 s0,s1,s2,s3,t0,t1,t2,t3;
  u32 *Te0=cuda_Te0;
  u32 *Te1=cuda_Te1;
  u32 *Te2=cuda_Te2;
  u32 *Te3=cuda_Te3;
  //计算待加密数据在总数据中的偏移
  unsigned long offset = (blockIdx.x * THREADS_PER_BLOCK * AES_BLOCK_SIZE) + (threadIdx.x * AES_BLOCK_SIZE);
  if (offset >= numbytes) {  return; }
  for(int i=0;i<240;i+=4)
    keywords[i/4]=Byte2Word(key[i],key[i+1],key[i+2],key[i+3]);
  __syncthreads();

  buf_t[0] = buf_d[offset+0];
  buf_t[1] = buf_d[offset+4];
  buf_t[2] = buf_d[offset+8];
  buf_t[3] = buf_d[offset+12];
  buf_t[4] = buf_d[offset+1];
  buf_t[5] = buf_d[offset+5];
  buf_t[6] = buf_d[offset+9];
  buf_t[7] = buf_d[offset+13];
  buf_t[8] = buf_d[offset+2];
  buf_t[9] = buf_d[offset+6];
  buf_t[10] = buf_d[offset+10];
  buf_t[11] = buf_d[offset+14];
  buf_t[12] = buf_d[offset+3];
  buf_t[13] = buf_d[offset+7];
  buf_t[14] = buf_d[offset+11];
  buf_t[15] = buf_d[offset+15];

  s0=Byte2Word(buf_t[0],buf_t[1],buf_t[2],buf_t[3])^keywords[0];
  s1=Byte2Word(buf_t[4],buf_t[5],buf_t[6],buf_t[7])^keywords[1];
  s2=Byte2Word(buf_t[8],buf_t[9],buf_t[10],buf_t[11])^keywords[2];
  s3=Byte2Word(buf_t[12],buf_t[13],buf_t[14],buf_t[15])^keywords[3];

  //通过查询T表来代替AES每一轮的循环加密部分，每一轮次的加密操作可以通过16次查表和16次异或完成。
  /*round 1: */
  t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff]^keywords[4];
  t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff]^keywords[5];
  t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff]^keywords[6];
  t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff]^keywords[7];
  /* round 2: */
  s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ keywords[ 8];
  s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ keywords[ 9];
  s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ keywords[10];
  s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ keywords[11];
  /* round 3: */
  t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ keywords[12];
  t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ keywords[13];
  t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ keywords[14];
  t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ keywords[15];
  /* round 4: */
  s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ keywords[16];
  s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ keywords[17];
  s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ keywords[18];
  s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ keywords[19];
  /* round 5: */
  t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ keywords[20];
  t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ keywords[21];
  t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ keywords[22];
  t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ keywords[23];
  /* round 6: */
  s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ keywords[24];
  s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ keywords[25];
  s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ keywords[26];
  s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ keywords[27];
  /* round 7: */
  t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ keywords[28];
  t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ keywords[29];
  t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ keywords[30];
  t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ keywords[31];
  /* round 8: */
  s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ keywords[32];
  s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ keywords[33];
  s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ keywords[34];
  s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ keywords[35];
  /* round 9: */
  t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ keywords[36];
  t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ keywords[37];
  t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ keywords[38];
  t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ keywords[39];
  /* round 10: */
  s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ keywords[40];
  s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ keywords[41];
  s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ keywords[42];
  s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ keywords[43];
  /* round 11: */
  t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ keywords[44];
  t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ keywords[45];
  t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ keywords[46];
  t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ keywords[47];
  /* round 12: */
  s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ keywords[48];
  s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ keywords[49];
  s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ keywords[50];
  s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ keywords[51];
  /* round 13: */
  t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ keywords[52];
  t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ keywords[53];
  t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ keywords[54];
  t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ keywords[55];



  /* round 14: */
  s0 =(Te2[(t0 >> 24)] & 0xff000000) ^(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^(Te0[(t2 >>8) & 0xff] & 0x0000ff00) ^(Te1[(t3) & 0xff] & 0x000000ff) ^keywords[56];
  s1 =(Te2[(t1 >> 24)] & 0xff000000) ^(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^(Te0[(t3 >>8) & 0xff] & 0x0000ff00) ^(Te1[(t0) & 0xff] & 0x000000ff) ^keywords[57];
  s2 =(Te2[(t2 >> 24)] & 0xff000000) ^(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^(Te0[(t0 >>8) & 0xff] & 0x0000ff00) ^(Te1[(t1) & 0xff] & 0x000000ff) ^keywords[58];
  s3 =(Te2[(t3 >> 24)] & 0xff000000) ^(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^(Te0[(t1 >>8) & 0xff] & 0x0000ff00) ^(Te1[(t2) & 0xff] & 0x000000ff) ^keywords[59];
  buf_d[offset+0]=(s0>>24)&0xff;
  buf_d[offset+1]=(s1>>24)&0xff;
  buf_d[offset+2]=(s2>>24)&0xff;
  buf_d[offset+3]=(s3>>24)&0xff;
  buf_d[offset+4]=(s0>>16)&0xff;
  buf_d[offset+5]=(s1>>16)&0xff;
  buf_d[offset+6]=(s2>>16)&0xff;
  buf_d[offset+7]=(s3>>16)&0xff;
  buf_d[offset+8]=(s0>>8)&0xff;
  buf_d[offset+9]=(s1>>8)&0xff;
  buf_d[offset+10]=(s2>>8)&0xff;
  buf_d[offset+11]=(s3>>8)&0xff;
  buf_d[offset+12]=s0&0xff;
  buf_d[offset+13]=s1&0xff;
  buf_d[offset+14]=s2&0xff;
  buf_d[offset+15]=s3&0xff;      

  __syncthreads();
} 



// 使用aes解密算法，对一块（128位）数据进行解密
__global__ void aes256_decrypt_ecb(uint8_t *buf_d, unsigned long numbytes){
  uint8_t i;
  uint8_t *key=w3;
  uint8_t buf_t[AES_BLOCK_SIZE];
  //计算待解密数据在总数据中的偏移
  unsigned long offset = (blockIdx.x * THREADS_PER_BLOCK * AES_BLOCK_SIZE) + (threadIdx.x * AES_BLOCK_SIZE);
  if (offset >= numbytes) { return; }
  //拷贝待解密数据至buf_t
  memcpy(buf_t, &buf_d[offset], AES_BLOCK_SIZE);

  //解密，共14轮
  aes_addRoundKey(buf_t, key,14);
  for (i = 1; i < 14; i++){
  	aes_shiftRows_inv(buf_t);
  	aes_subBytes_inv(buf_t);
  	aes_addRoundKey( buf_t,  key,14-i);
    aes_mixColumns_inv(buf_t);
    }
  aes_shiftRows_inv(buf_t);
  aes_subBytes_inv(buf_t);
  aes_addRoundKey( buf_t,  key,0);
  //将解密后的buf_t拷贝回总数据
  memcpy(&buf_d[offset], buf_t, AES_BLOCK_SIZE);
  __syncthreads();
} 

//aes加密
void encryptdemo(uint8_t *key, uint8_t *buf, unsigned long numbytes){
 uint8_t *buf_d;
  uint8_t *w_d;
  uint8_t *w;

  cudaMemcpyToSymbol(sbox, sbox, sizeof(uint8_t)*256);

  //为扩展后密钥分配内存空间
  w = (uint8_t*)malloc(240*sizeof(uint8_t));
  
  aes_key_expansion(key, w);

  //为数据和扩展后的密钥分配显存空间
  cudaMalloc((void**)&buf_d, numbytes);
  cudaMalloc((void**)&w_d, 240*sizeof(uint8_t));
  //从内存拷贝至显存
  cudaMemcpy(buf_d, buf, numbytes, cudaMemcpyHostToDevice);
  cudaMemcpy(w_d, w, 240*sizeof(uint8_t), cudaMemcpyHostToDevice);

  //计算GRIDSIZE与BLOCKSIZE
  dim3 dimBlock(ceil((double)numbytes / (double)(THREADS_PER_BLOCK * AES_BLOCK_SIZE)));
  dim3 dimGrid(THREADS_PER_BLOCK);
  //对每个数据块进行aes加密
  aes256_encrypt_ecb<<<dimBlock, dimGrid>>>(buf_d, numbytes, w_d);

  cudaMemcpy(buf, buf_d, numbytes, cudaMemcpyDeviceToHost);
  
}

// aes解密
void decryptdemo(uint8_t *key, uint8_t *buf, unsigned long numbytes){
  uint8_t *buf_d;
  
  uint8_t *w;

  cudaMemcpyToSymbol(sboxinv, sboxinv, sizeof(uint8_t)*256);

  printf("\nBeginning decryption\n");

  //记录解密算法开始时间
  cudaEvent_t start1;
  cudaEventCreate(&start1);
  cudaEvent_t stop1;
  cudaEventCreate(&stop1);
  cudaEventRecord(start1);

  //为扩展后密钥分配内存空间
  w = (uint8_t*)malloc(240*sizeof(uint8_t));

  aes_key_expansion(key, w);

  //分配显存空间
  cudaMalloc((void**)&buf_d, numbytes);
  //从内存拷贝至显存
  cudaMemcpy(buf_d, buf, numbytes, cudaMemcpyHostToDevice);
  cudaMemcpyToSymbol(w3, w, 240*sizeof(uint8_t));

  //计算GRIDSIZE与BLOCKSIZE
  dim3 dimBlock(ceil((double)numbytes / (double)(THREADS_PER_BLOCK * AES_BLOCK_SIZE)));
  dim3 dimGrid(THREADS_PER_BLOCK);
  printf("Creating %d threads over %d blocks\n", dimBlock.x*dimGrid.x, dimBlock.x);
    //对每个数据块进行aes解密
  aes256_decrypt_ecb<<<dimBlock, dimGrid>>>(buf_d, numbytes);

  cudaMemcpy(buf, buf_d, numbytes, cudaMemcpyDeviceToHost);

  //记录解密算法结束时间，并计算解密速度
  cudaEventRecord(stop1);
  cudaEventSynchronize(stop1);
  float msecTotal1,total;
  cudaEventElapsedTime(&msecTotal1, start1, stop1);
  total=msecTotal1/1000;
  printf("time:%f\n",total);
  printf("Throughput: %fGbps\n", numbytes/total/1024/1024/1024*8);


}


// __global__ void GPU_init() { }


// int main(int argc,char** argv){

//   FILE *file;
//   uint8_t *buf,*buf2; 
//   unsigned long numbytes;
//   char *fname;
//   int  i;
//   int padding;
 
//   uint8_t key[32];

//   // 设置gpu
//   int deviceCount = 0;
//   cudaError_t error_id = cudaGetDeviceCount(&deviceCount);
//   if (error_id != cudaSuccess){
//     printf("Error: %s\n", cudaGetErrorString(error_id));
//     printf("Exiting...\n");
//     exit(EXIT_FAILURE);
//   }
//   if (deviceCount == 0){
//     printf("There are no available device(s) that support CUDA\n");
//     exit(EXIT_FAILURE);
//   }


//   // 打开待加密文件
//   fname = argv[1];  
//   file = fopen(fname, "r");
//   if (file == NULL) {printf("File %s doesn't exist\n", fname); exit(1); }
//   printf("Opened file %s\n", fname);
//   fseek(file, 0L, SEEK_END);
//   numbytes = ftell(file);
//   printf("Size is %lu\n", numbytes);

//   // 将待加密数据读取到内存
//   fseek(file, 0L, SEEK_SET);
//   //cudaMallocHost((void**)&buf_d_2, numbytes);
//   buf = (uint8_t*)calloc(numbytes, sizeof(uint8_t));
//   if(buf == NULL) exit(1);
//   if (fread(buf, 1, numbytes, file) != numbytes)
//   {
//     printf("Unable to read all bytes from file %s\n", fname);
//     exit(EXIT_FAILURE);
//   }
//   fclose(file);

//   // 补全
//   padding = AES_BLOCK_SIZE - numbytes % AES_BLOCK_SIZE;
//   numbytes += padding;
//   printf("Padding file with %d bytes for a new size of %lu\n", padding, numbytes);

//   // 生成密钥
//   for (i = 0; i < sizeof(key);i++) key[i] = i;
//   cudaMallocHost((void**)&buf2, numbytes);
//   cudaMemcpy(buf2, buf, numbytes, cudaMemcpyHostToHost);
//   cudaMemcpyToSymbol(cuda_Te0,Te0,256*sizeof(u32));
//   cudaMemcpyToSymbol(cuda_Te1,Te1,256*sizeof(u32));
//   cudaMemcpyToSymbol(cuda_Te2,Te2,256*sizeof(u32));
//   cudaMemcpyToSymbol(cuda_Te3,Te3,256*sizeof(u32));

//   // gpu初始化
//   GPU_init<<<1, 1>>>();

//   // 调用加密算法
//   encryptdemo(key, buf2, numbytes);
//   // 将加密后的数据写入cipher.txt
//   file = fopen("cipher.txt", "w");
//   fwrite(buf2, 1, numbytes, file);
//   fclose(file);

//   // 解密
//   decryptdemo(key, buf2, numbytes);
//   // 将解密后的数据写回output.txt
//   file = fopen("output.txt", "w");
//   fwrite(buf2, 1, numbytes - padding, file);
//   fclose(file);
//   free(buf);

//   return EXIT_SUCCESS;
// }